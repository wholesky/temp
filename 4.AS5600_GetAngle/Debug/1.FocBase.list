
1.FocBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008c28  08008c28  00018c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009084  08009084  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009084  08009084  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009084  08009084  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800908c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  08009260  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08009260  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce41  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ed  00000000  00000000  0002d081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  0002f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a66  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019334  00000000  00000000  00030d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010cd5  00000000  00000000  0004a08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c331  00000000  00000000  0005ad5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c28  00000000  00000000  000e7090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ebcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c10 	.word	0x08008c10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008c10 	.word	0x08008c10

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_DMA_Init+0x38>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <MX_DMA_Init+0x38>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_DMA_Init+0x38>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	200e      	movs	r0, #14
 8000e18:	f000 fd9b 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e1c:	200e      	movs	r0, #14
 8000e1e:	f000 fdb4 	bl	800198a <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_GPIO_Init+0x40>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <MX_GPIO_Init+0x40>)
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x40>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_GPIO_Init+0x40>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <MX_GPIO_Init+0x40>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <MX_GPIO_Init+0x40>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 fc0c 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f834 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f7ff ffd4 	bl	8000e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e88:	f7ff ffb4 	bl	8000df4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e8c:	f000 fa84 	bl	8001398 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e90:	f000 f9aa 	bl	80011e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  InitPwm();
 8000e94:	f000 fb4e 	bl	8001534 <InitPwm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RetFloat1= GetSerialRetFloat1();
 8000e98:	f000 fbea 	bl	8001670 <GetSerialRetFloat1>
 8000e9c:	6078      	str	r0, [r7, #4]
	  RetFloat2= GetSerialRetFloat2();
 8000e9e:	f000 fbf1 	bl	8001684 <GetSerialRetFloat2>
 8000ea2:	6038      	str	r0, [r7, #0]
	  Serial_Printf("%f,%f,%f\r\n", RetFloat1,RetFloat2,RetFloat1+RetFloat2);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fabf 	bl	8000428 <__aeabi_f2d>
 8000eaa:	4680      	mov	r8, r0
 8000eac:	4689      	mov	r9, r1
 8000eae:	6838      	ldr	r0, [r7, #0]
 8000eb0:	f7ff faba 	bl	8000428 <__aeabi_f2d>
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	460d      	mov	r5, r1
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fe5a 	bl	8000b74 <__addsf3>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fab0 	bl	8000428 <__aeabi_f2d>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ed0:	e9cd 4500 	strd	r4, r5, [sp]
 8000ed4:	4642      	mov	r2, r8
 8000ed6:	464b      	mov	r3, r9
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <main+0x74>)
 8000eda:	f000 fb3d 	bl	8001558 <Serial_Printf>
	  HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fc3c 	bl	800175c <HAL_Delay>
	  RetFloat1= GetSerialRetFloat1();
 8000ee4:	e7d8      	b.n	8000e98 <main+0x24>
 8000ee6:	bf00      	nop
 8000ee8:	08008c28 	.word	0x08008c28

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	2228      	movs	r2, #40	; 0x28
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 f874 	bl	8005fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f20:	2302      	movs	r3, #2
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 f969 	bl	800220c <HAL_RCC_OscConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f40:	f000 f819 	bl	8000f76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f44:	230f      	movs	r3, #15
 8000f46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fbd6 	bl	8002710 <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f6a:	f000 f804 	bl	8000f76 <Error_Handler>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3740      	adds	r7, #64	; 0x40
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7a:	b672      	cpsid	i
}
 8000f7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <Error_Handler+0x8>

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102a:	f000 fb7b 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DMA1_Channel4_IRQHandler+0x10>)
 800103a:	f000 fe2f 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000284 	.word	0x20000284

08001048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <USART1_IRQHandler+0x10>)
 800104e:	f002 fbed 	bl	800382c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000023c 	.word	0x2000023c

0800105c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_kill>:

int _kill(int pid, int sig)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001074:	f005 f82a 	bl	80060cc <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	2216      	movs	r2, #22
 800107c:	601a      	str	r2, [r3, #0]
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_exit>:

void _exit (int status)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001092:	f04f 31ff 	mov.w	r1, #4294967295
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffe7 	bl	800106a <_kill>
  while (1) {}    /* Make sure we hang here */
 800109c:	e7fe      	b.n	800109c <_exit+0x12>

0800109e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e00a      	b.n	80010c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b0:	f3af 8000 	nop.w
 80010b4:	4601      	mov	r1, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	b2ca      	uxtb	r2, r1
 80010be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbf0      	blt.n	80010b0 <_read+0x12>
  }

  return len;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e009      	b.n	80010fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	60ba      	str	r2, [r7, #8]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	dbf1      	blt.n	80010ea <_write+0x12>
  }
  return len;
 8001106:	687b      	ldr	r3, [r7, #4]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_close>:

int _close(int file)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
  return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <_isatty>:

int _isatty(int file)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f004 ff94 	bl	80060cc <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20005000 	.word	0x20005000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	200001f0 	.word	0x200001f0
 80011d8:	20000488 	.word	0x20000488

080011dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <MX_TIM2_Init+0x114>)
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <MX_TIM2_Init+0x114>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <MX_TIM2_Init+0x114>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <MX_TIM2_Init+0x114>)
 800122e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001232:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <MX_TIM2_Init+0x114>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <MX_TIM2_Init+0x114>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001240:	482e      	ldr	r0, [pc, #184]	; (80012fc <MX_TIM2_Init+0x114>)
 8001242:	f001 fbf3 	bl	8002a2c <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800124c:	f7ff fe93 	bl	8000f76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125a:	4619      	mov	r1, r3
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <MX_TIM2_Init+0x114>)
 800125e:	f001 fdf1 	bl	8002e44 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001268:	f7ff fe85 	bl	8000f76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800126c:	4823      	ldr	r0, [pc, #140]	; (80012fc <MX_TIM2_Init+0x114>)
 800126e:	f001 fc2c 	bl	8002aca <HAL_TIM_PWM_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001278:	f7ff fe7d 	bl	8000f76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	4619      	mov	r1, r3
 800128a:	481c      	ldr	r0, [pc, #112]	; (80012fc <MX_TIM2_Init+0x114>)
 800128c:	f002 f952 	bl	8003534 <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001296:	f7ff fe6e 	bl	8000f76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129a:	2360      	movs	r3, #96	; 0x60
 800129c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_TIM2_Init+0x114>)
 80012b2:	f001 fd05 	bl	8002cc0 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012bc:	f7ff fe5b 	bl	8000f76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2204      	movs	r2, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM2_Init+0x114>)
 80012c8:	f001 fcfa 	bl	8002cc0 <HAL_TIM_PWM_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80012d2:	f7ff fe50 	bl	8000f76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_TIM2_Init+0x114>)
 80012de:	f001 fcef 	bl	8002cc0 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80012e8:	f7ff fe45 	bl	8000f76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <MX_TIM2_Init+0x114>)
 80012ee:	f000 f823 	bl	8001338 <HAL_TIM_MspPostInit>

}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	; 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f4 	.word	0x200001f4

08001300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d10b      	bne.n	800132a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_TIM_Base_MspInit+0x34>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_TIM_Base_MspInit+0x34>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_TIM_Base_MspInit+0x34>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001356:	d117      	bne.n	8001388 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_TIM_MspPostInit+0x58>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_TIM_MspPostInit+0x58>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_MspPostInit+0x58>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001370:	2307      	movs	r3, #7
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <HAL_TIM_MspPostInit+0x5c>)
 8001384:	f000 fdbe 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	40010800 	.word	0x40010800

08001398 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <MX_USART1_UART_Init+0x4c>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 576000;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013a4:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <MX_USART1_UART_Init+0x50>)
 80013a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013bc:	220c      	movs	r2, #12
 80013be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_USART1_UART_Init+0x48>)
 80013ce:	f002 f90f 	bl	80035f0 <HAL_UART_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80013d8:	f7ff fdcd 	bl	8000f76 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000023c 	.word	0x2000023c
 80013e4:	40013800 	.word	0x40013800
 80013e8:	0008ca00 	.word	0x0008ca00

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <HAL_UART_MspInit+0xe8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d15f      	bne.n	80014cc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_UART_MspInit+0xec>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_UART_MspInit+0xec>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_UART_MspInit+0xec>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_UART_MspInit+0xec>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <HAL_UART_MspInit+0xec>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_UART_MspInit+0xec>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4822      	ldr	r0, [pc, #136]	; (80014dc <HAL_UART_MspInit+0xf0>)
 8001452:	f000 fd57 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	481c      	ldr	r0, [pc, #112]	; (80014dc <HAL_UART_MspInit+0xf0>)
 800146c:	f000 fd4a 	bl	8001f04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_UART_MspInit+0xf8>)
 8001474:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001478:	2210      	movs	r2, #16
 800147a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014a0:	480f      	ldr	r0, [pc, #60]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 80014a2:	f000 fa8d 	bl	80019c0 <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80014ac:	f7ff fd63 	bl	8000f76 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_UART_MspInit+0xf4>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2025      	movs	r0, #37	; 0x25
 80014c2:	f000 fa46 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014c6:	2025      	movs	r0, #37	; 0x25
 80014c8:	f000 fa5f 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010800 	.word	0x40010800
 80014e0:	20000284 	.word	0x20000284
 80014e4:	40020044 	.word	0x40020044

080014e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e8:	f7ff fe78 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ee:	490c      	ldr	r1, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001504:	4c09      	ldr	r4, [pc, #36]	; (800152c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f004 fde1 	bl	80060d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7ff fcad 	bl	8000e74 <main>
  bx lr
 800151a:	4770      	bx	lr
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001524:	0800908c 	.word	0x0800908c
  ldr r2, =_sbss
 8001528:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800152c:	20000484 	.word	0x20000484

08001530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_2_IRQHandler>
	...

08001534 <InitPwm>:
 *  Created on: Mar 11, 2025
 *      Author: KingPC
 */

#include "tim.h"
void InitPwm(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001538:	2100      	movs	r1, #0
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <InitPwm+0x20>)
 800153c:	f001 fb1e 	bl	8002b7c <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001540:	2104      	movs	r1, #4
 8001542:	4804      	ldr	r0, [pc, #16]	; (8001554 <InitPwm+0x20>)
 8001544:	f001 fb1a 	bl	8002b7c <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8001548:	2108      	movs	r1, #8
 800154a:	4802      	ldr	r0, [pc, #8]	; (8001554 <InitPwm+0x20>)
 800154c:	f001 fb16 	bl	8002b7c <HAL_TIM_PWM_Start>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200001f4 	.word	0x200001f4

08001558 <Serial_Printf>:
#include "stdio.h"
#include"gpio.h"
#include"usart.h"
#include <string.h>
#include <stdlib.h>
void Serial_Printf(const char *format, ...) {
 8001558:	b40f      	push	{r0, r1, r2, r3}
 800155a:	b580      	push	{r7, lr}
 800155c:	b0c2      	sub	sp, #264	; 0x108
 800155e:	af00      	add	r7, sp, #0
	va_list args;			// 定义参数列表变量
	va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 8001560:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	char strBuf[256];				// 定义输出的字符串
	vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800156e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fd2e 	bl	8005fd4 <vsiprintf>
	va_end(args);					// 结束可变参数的使用

	// 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
	while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX) {
 8001578:	bf00      	nop
 800157a:	480c      	ldr	r0, [pc, #48]	; (80015ac <Serial_Printf+0x54>)
 800157c:	f002 fc0c 	bl	8003d98 <HAL_UART_GetState>
 8001580:	4603      	mov	r3, r0
 8001582:	2b21      	cmp	r3, #33	; 0x21
 8001584:	d0f9      	beq.n	800157a <Serial_Printf+0x22>
		// Wait for DMA transfer to complete
	}

	HAL_UART_Transmit_DMA(&huart1, (uint8_t*) strBuf, strlen(strBuf));
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fde1 	bl	8000150 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <Serial_Printf+0x54>)
 8001598:	f002 f87a 	bl	8003690 <HAL_UART_Transmit_DMA>
}
 800159c:	bf00      	nop
 800159e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80015a2:	46bd      	mov	sp, r7
 80015a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015a8:	b004      	add	sp, #16
 80015aa:	4770      	bx	lr
 80015ac:	2000023c 	.word	0x2000023c

080015b0 <HAL_UARTEx_RxEventCallback>:
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*) Serial_RxPacket,
			sizeof(Serial_RxPacket)); //最后参数表示最大接收长度
}
float ReceivedFloat1 = 0;
float ReceivedFloat2 = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
	if (huart == &huart1) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a28      	ldr	r2, [pc, #160]	; (8001660 <HAL_UARTEx_RxEventCallback+0xb0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d149      	bne.n	8001658 <HAL_UARTEx_RxEventCallback+0xa8>
		Serial_RxPacket[Size] = '\0'; // 由于C语言中的字符串都必须以'\0'为结束标志的，所以接收完后需加上这行
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_UARTEx_RxEventCallback+0xb4>)
 80015c8:	2100      	movs	r1, #0
 80015ca:	54d1      	strb	r1, [r2, r3]
		// 检查是否包含换行符 `\n`，如果有则截断字符串
		char *newlinePos = strchr(Serial_RxPacket, '\n');
 80015cc:	210a      	movs	r1, #10
 80015ce:	4825      	ldr	r0, [pc, #148]	; (8001664 <HAL_UARTEx_RxEventCallback+0xb4>)
 80015d0:	f004 fd12 	bl	8005ff8 <strchr>
 80015d4:	60f8      	str	r0, [r7, #12]
		if (newlinePos != NULL) {
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <HAL_UARTEx_RxEventCallback+0x32>
			*newlinePos = '\0'; // 将 `\n` 替换为字符串结束符
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
		}
		// 检查是否包含逗号 `,`
		char *commaPos = strchr(Serial_RxPacket, ',');
 80015e2:	212c      	movs	r1, #44	; 0x2c
 80015e4:	481f      	ldr	r0, [pc, #124]	; (8001664 <HAL_UARTEx_RxEventCallback+0xb4>)
 80015e6:	f004 fd07 	bl	8005ff8 <strchr>
 80015ea:	60b8      	str	r0, [r7, #8]
		if (commaPos != NULL) {
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01d      	beq.n	800162e <HAL_UARTEx_RxEventCallback+0x7e>
			// 如果有逗号，则将逗号替换为字符串结束符，并分别解析两个浮点数
			*commaPos = '\0';
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
			ReceivedFloat1 = atof(Serial_RxPacket);
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <HAL_UARTEx_RxEventCallback+0xb4>)
 80015fa:	f002 ff19 	bl	8004430 <atof>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fa5f 	bl	8000ac8 <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	4a16      	ldr	r2, [pc, #88]	; (8001668 <HAL_UARTEx_RxEventCallback+0xb8>)
 800160e:	6013      	str	r3, [r2, #0]
			ReceivedFloat2 = atof(commaPos + 1);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3301      	adds	r3, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f002 ff0b 	bl	8004430 <atof>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa51 	bl	8000ac8 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_UARTEx_RxEventCallback+0xbc>)
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e00f      	b.n	800164e <HAL_UARTEx_RxEventCallback+0x9e>
		} else {
			// 如果没有逗号，则只解析一个浮点数
			ReceivedFloat1 = atof(Serial_RxPacket);
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001630:	f002 fefe 	bl	8004430 <atof>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fa44 	bl	8000ac8 <__aeabi_d2f>
 8001640:	4603      	mov	r3, r0
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001644:	6013      	str	r3, [r2, #0]
			ReceivedFloat2 = 0; // 如果没有第二个浮点数，可以将 ReceivedFloat2 设置为 0 或其他默认值
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
		}
		// 重新启动 UART 接收
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*) Serial_RxPacket,
 800164e:	2264      	movs	r2, #100	; 0x64
 8001650:	4904      	ldr	r1, [pc, #16]	; (8001664 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001654:	f002 f88c 	bl	8003770 <HAL_UARTEx_ReceiveToIdle_IT>
				sizeof(Serial_RxPacket));
	}
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000023c 	.word	0x2000023c
 8001664:	200002c8 	.word	0x200002c8
 8001668:	2000032c 	.word	0x2000032c
 800166c:	20000330 	.word	0x20000330

08001670 <GetSerialRetFloat1>:
float GetSerialRetFloat1() {
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	return ReceivedFloat1;
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <GetSerialRetFloat1+0x10>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	2000032c 	.word	0x2000032c

08001684 <GetSerialRetFloat2>:
float GetSerialRetFloat2() {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	return ReceivedFloat2;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <GetSerialRetFloat2+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000330 	.word	0x20000330

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x28>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x28>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f947 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fc64 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40022000 	.word	0x40022000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f95f 	bl	80019a6 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f927 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	20000008 	.word	0x20000008
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_IncTick+0x1c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x20>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_IncTick+0x20>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000008 	.word	0x20000008
 8001744:	20000334 	.word	0x20000334

08001748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <HAL_GetTick+0x10>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20000334 	.word	0x20000334

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff fff0 	bl	8001748 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffe0 	bl	8001748 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000008 	.word	0x20000008

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff90 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff2d 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff42 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e043      	b.n	8001a5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_DMA_Init+0xa8>)
 80019de:	4413      	add	r3, r2
 80019e0:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_DMA_Init+0xac>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	009a      	lsls	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_DMA_Init+0xb0>)
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	bffdfff8 	.word	0xbffdfff8
 8001a6c:	cccccccd 	.word	0xcccccccd
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_DMA_Start_IT+0x20>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e04b      	b.n	8001b2c <HAL_DMA_Start_IT+0xb8>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d13a      	bne.n	8001b1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f9eb 	bl	8001ea8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 020e 	orr.w	r2, r2, #14
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e00f      	b.n	8001b0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0204 	bic.w	r2, r2, #4
 8001afa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 020a 	orr.w	r2, r2, #10
 8001b0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e005      	b.n	8001b2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
 8001b28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e020      	b.n	8001ba0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 020e 	bic.w	r2, r2, #14
 8001b6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d005      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	e051      	b.n	8001c74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 020e 	bic.w	r2, r2, #14
 8001bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_DMA_Abort_IT+0xd4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d029      	beq.n	8001c4e <HAL_DMA_Abort_IT+0xa2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_DMA_Abort_IT+0xd8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d022      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x9e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_DMA_Abort_IT+0xdc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d01a      	beq.n	8001c44 <HAL_DMA_Abort_IT+0x98>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_DMA_Abort_IT+0xe0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d012      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x92>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_DMA_Abort_IT+0xe4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00a      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x8c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_DMA_Abort_IT+0xe8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d102      	bne.n	8001c32 <HAL_DMA_Abort_IT+0x86>
 8001c2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c30:	e00e      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c36:	e00b      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c3c:	e008      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	e005      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c48:	e002      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	e000      	b.n	8001c50 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_DMA_Abort_IT+0xec>)
 8001c52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
    } 
  }
  return status;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40020008 	.word	0x40020008
 8001c84:	4002001c 	.word	0x4002001c
 8001c88:	40020030 	.word	0x40020030
 8001c8c:	40020044 	.word	0x40020044
 8001c90:	40020058 	.word	0x40020058
 8001c94:	4002006c 	.word	0x4002006c
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	2204      	movs	r2, #4
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d04f      	beq.n	8001d64 <HAL_DMA_IRQHandler+0xc8>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d04a      	beq.n	8001d64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_DMA_IRQHandler+0x1f0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d029      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xae>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a65      	ldr	r2, [pc, #404]	; (8001e90 <HAL_DMA_IRQHandler+0x1f4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d022      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xaa>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a63      	ldr	r2, [pc, #396]	; (8001e94 <HAL_DMA_IRQHandler+0x1f8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01a      	beq.n	8001d40 <HAL_DMA_IRQHandler+0xa4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a62      	ldr	r2, [pc, #392]	; (8001e98 <HAL_DMA_IRQHandler+0x1fc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d012      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x9e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a60      	ldr	r2, [pc, #384]	; (8001e9c <HAL_DMA_IRQHandler+0x200>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00a      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x98>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a5f      	ldr	r2, [pc, #380]	; (8001ea0 <HAL_DMA_IRQHandler+0x204>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d102      	bne.n	8001d2e <HAL_DMA_IRQHandler+0x92>
 8001d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d2c:	e00e      	b.n	8001d4c <HAL_DMA_IRQHandler+0xb0>
 8001d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d32:	e00b      	b.n	8001d4c <HAL_DMA_IRQHandler+0xb0>
 8001d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d38:	e008      	b.n	8001d4c <HAL_DMA_IRQHandler+0xb0>
 8001d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d3e:	e005      	b.n	8001d4c <HAL_DMA_IRQHandler+0xb0>
 8001d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d44:	e002      	b.n	8001d4c <HAL_DMA_IRQHandler+0xb0>
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	e000      	b.n	8001d4c <HAL_DMA_IRQHandler+0xb0>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	4a55      	ldr	r2, [pc, #340]	; (8001ea4 <HAL_DMA_IRQHandler+0x208>)
 8001d4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8094 	beq.w	8001e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d62:	e08e      	b.n	8001e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	2202      	movs	r2, #2
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d056      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x186>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d051      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10b      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 020a 	bic.w	r2, r2, #10
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a38      	ldr	r2, [pc, #224]	; (8001e8c <HAL_DMA_IRQHandler+0x1f0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d029      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x166>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a37      	ldr	r2, [pc, #220]	; (8001e90 <HAL_DMA_IRQHandler+0x1f4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d022      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x162>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a35      	ldr	r2, [pc, #212]	; (8001e94 <HAL_DMA_IRQHandler+0x1f8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01a      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x15c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a34      	ldr	r2, [pc, #208]	; (8001e98 <HAL_DMA_IRQHandler+0x1fc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d012      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x156>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a32      	ldr	r2, [pc, #200]	; (8001e9c <HAL_DMA_IRQHandler+0x200>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00a      	beq.n	8001dec <HAL_DMA_IRQHandler+0x150>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <HAL_DMA_IRQHandler+0x204>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d102      	bne.n	8001de6 <HAL_DMA_IRQHandler+0x14a>
 8001de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001de4:	e00e      	b.n	8001e04 <HAL_DMA_IRQHandler+0x168>
 8001de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dea:	e00b      	b.n	8001e04 <HAL_DMA_IRQHandler+0x168>
 8001dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df0:	e008      	b.n	8001e04 <HAL_DMA_IRQHandler+0x168>
 8001df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df6:	e005      	b.n	8001e04 <HAL_DMA_IRQHandler+0x168>
 8001df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfc:	e002      	b.n	8001e04 <HAL_DMA_IRQHandler+0x168>
 8001dfe:	2320      	movs	r3, #32
 8001e00:	e000      	b.n	8001e04 <HAL_DMA_IRQHandler+0x168>
 8001e02:	2302      	movs	r3, #2
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_DMA_IRQHandler+0x208>)
 8001e06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d034      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e20:	e02f      	b.n	8001e82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2208      	movs	r2, #8
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d028      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x1e8>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 020e 	bic.w	r2, r2, #14
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
    }
  }
  return;
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
}
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020008 	.word	0x40020008
 8001e90:	4002001c 	.word	0x4002001c
 8001e94:	40020030 	.word	0x40020030
 8001e98:	40020044 	.word	0x40020044
 8001e9c:	40020058 	.word	0x40020058
 8001ea0:	4002006c 	.word	0x4002006c
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d108      	bne.n	8001ee8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ee6:	e007      	b.n	8001ef8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e169      	b.n	80021ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8158 	bne.w	80021e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f40:	4a98      	ldr	r2, [pc, #608]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d875      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f46:	4a98      	ldr	r2, [pc, #608]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d058      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f4c:	4a96      	ldr	r2, [pc, #600]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d86f      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f52:	4a96      	ldr	r2, [pc, #600]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d052      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f58:	4a94      	ldr	r2, [pc, #592]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d869      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a94      	ldr	r2, [pc, #592]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04c      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f64:	4a92      	ldr	r2, [pc, #584]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d863      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d046      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f70:	4a90      	ldr	r2, [pc, #576]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d85d      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d82a      	bhi.n	8001fd0 <HAL_GPIO_Init+0xcc>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d859      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_GPIO_Init+0x80>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001feb 	.word	0x08001feb
 8001f90:	0800202d 	.word	0x0800202d
 8001f94:	08002033 	.word	0x08002033
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	08002033 	.word	0x08002033
 8001fa0:	08002033 	.word	0x08002033
 8001fa4:	08002033 	.word	0x08002033
 8001fa8:	08002033 	.word	0x08002033
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	08002033 	.word	0x08002033
 8001fb4:	08002033 	.word	0x08002033
 8001fb8:	08002033 	.word	0x08002033
 8001fbc:	08002033 	.word	0x08002033
 8001fc0:	08002033 	.word	0x08002033
 8001fc4:	08002033 	.word	0x08002033
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	4a79      	ldr	r2, [pc, #484]	; (80021b8 <HAL_GPIO_Init+0x2b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fd6:	e02c      	b.n	8002032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e029      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e024      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e01f      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e01a      	b.n	8002034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002006:	2304      	movs	r3, #4
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e013      	b.n	8002034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	611a      	str	r2, [r3, #16]
          break;
 800201e:	e009      	b.n	8002034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	615a      	str	r2, [r3, #20]
          break;
 800202a:	e003      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x130>
          break;
 8002032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d801      	bhi.n	800203e <HAL_GPIO_Init+0x13a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_Init+0x13e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d802      	bhi.n	8002050 <HAL_GPIO_Init+0x14c>
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x152>
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3b08      	subs	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	210f      	movs	r1, #15
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b1 	beq.w	80021e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209c:	4a48      	ldr	r2, [pc, #288]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <HAL_GPIO_Init+0x2c0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1ec>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_GPIO_Init+0x2c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1e8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1e4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <HAL_GPIO_Init+0x2cc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020f0:	2300      	movs	r3, #0
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002102:	492f      	ldr	r1, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	492c      	ldr	r1, [pc, #176]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4928      	ldr	r1, [pc, #160]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	491e      	ldr	r1, [pc, #120]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4918      	ldr	r1, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4914      	ldr	r1, [pc, #80]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d021      	beq.n	80021d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e021      	b.n	80021e6 <HAL_GPIO_Init+0x2e2>
 80021a2:	bf00      	nop
 80021a4:	10320000 	.word	0x10320000
 80021a8:	10310000 	.word	0x10310000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	10210000 	.word	0x10210000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10110000 	.word	0x10110000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f ae8e 	bne.w	8001f18 <HAL_GPIO_Init+0x14>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	372c      	adds	r7, #44	; 0x2c
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e272      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8087 	beq.w	800233a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222c:	4b92      	ldr	r3, [pc, #584]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00c      	beq.n	8002252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002238:	4b8f      	ldr	r3, [pc, #572]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d112      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
 8002244:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d10b      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06c      	beq.n	8002338 <HAL_RCC_OscConfig+0x12c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d168      	bne.n	8002338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e24c      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x76>
 8002274:	4b80      	ldr	r3, [pc, #512]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e02e      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x98>
 800228a:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7a      	ldr	r2, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b78      	ldr	r3, [pc, #480]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800229c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0xbc>
 80022ae:	4b72      	ldr	r3, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a71      	ldr	r2, [pc, #452]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022c8:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b68      	ldr	r3, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a67      	ldr	r2, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fa2e 	bl	8001748 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fa2a 	bl	8001748 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e200      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe4>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fa1a 	bl	8001748 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff fa16 	bl	8001748 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1ec      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x10c>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1c0      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4939      	ldr	r1, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7ff f9cf 	bl	8001748 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7ff f9cb 	bl	8001748 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1a1      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4927      	ldr	r1, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff f9ae 	bl	8001748 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f0:	f7ff f9aa 	bl	8001748 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e180      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d03a      	beq.n	8002490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff f98e 	bl	8001748 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff f98a 	bl	8001748 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e160      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f000 face 	bl	80029f0 <RCC_Delay>
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7ff f974 	bl	8001748 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002462:	e00f      	b.n	8002484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7ff f970 	bl	8001748 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d908      	bls.n	8002484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e146      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	42420000 	.word	0x42420000
 8002480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e9      	bne.n	8002464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a6 	beq.w	80025ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10d      	bne.n	80024ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a87      	ldr	r2, [pc, #540]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]
 80024ba:	4b85      	ldr	r3, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7e      	ldr	r2, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7ff f931 	bl	8001748 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7ff f92d 	bl	8001748 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e103      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b75      	ldr	r3, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x312>
 8002510:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	e02d      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x334>
 8002526:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a66      	ldr	r2, [pc, #408]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6213      	str	r3, [r2, #32]
 800253e:	e01c      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d10c      	bne.n	8002562 <HAL_RCC_OscConfig+0x356>
 8002548:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a60      	ldr	r2, [pc, #384]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a5d      	ldr	r2, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e00b      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002562:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a5a      	ldr	r2, [pc, #360]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b58      	ldr	r3, [pc, #352]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d015      	beq.n	80025ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7ff f8e1 	bl	8001748 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff f8dd 	bl	8001748 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0b1      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ee      	beq.n	800258a <HAL_RCC_OscConfig+0x37e>
 80025ac:	e014      	b.n	80025d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7ff f8cb 	bl	8001748 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff f8c7 	bl	8001748 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e09b      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8087 	beq.w	8002702 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d061      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d146      	bne.n	8002696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002608:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff f89b 	bl	8001748 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff f897 	bl	8001748 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e06d      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d108      	bne.n	8002650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4921      	ldr	r1, [pc, #132]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a19      	ldr	r1, [r3, #32]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	430b      	orrs	r3, r1
 8002662:	491b      	ldr	r1, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff f86b 	bl	8001748 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7ff f867 	bl	8001748 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e03d      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x46a>
 8002694:	e035      	b.n	8002702 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7ff f854 	bl	8001748 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7ff f850 	bl	8001748 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e026      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x498>
 80026c2:	e01e      	b.n	8002702 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e019      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40007000 	.word	0x40007000
 80026d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x500>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d0      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d910      	bls.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4965      	ldr	r1, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800278e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d040      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d115      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e073      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06b      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4936      	ldr	r1, [pc, #216]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7fe ffa2 	bl	8001748 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe ff9e 	bl	8001748 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e053      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d210      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f821 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490a      	ldr	r1, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1cc>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1d0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe ff00 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08008c34 	.word	0x08008c34
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <HAL_RCC_GetSysClockFreq+0x94>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x30>
 800290e:	2b08      	cmp	r3, #8
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x36>
 8002912:	e027      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_GetSysClockFreq+0x98>)
 8002916:	613b      	str	r3, [r7, #16]
      break;
 8002918:	e027      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0c9b      	lsrs	r3, r3, #18
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_GetSysClockFreq+0x94>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	0c5b      	lsrs	r3, r3, #17
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	4a11      	ldr	r2, [pc, #68]	; (8002984 <HAL_RCC_GetSysClockFreq+0xa0>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_RCC_GetSysClockFreq+0x98>)
 8002946:	fb03 f202 	mul.w	r2, r3, r2
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e004      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	613b      	str	r3, [r7, #16]
      break;
 8002962:	e002      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetSysClockFreq+0x98>)
 8002966:	613b      	str	r3, [r7, #16]
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	693b      	ldr	r3, [r7, #16]
}
 800296c:	4618      	mov	r0, r3
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	007a1200 	.word	0x007a1200
 8002980:	08008c4c 	.word	0x08008c4c
 8002984:	08008c5c 	.word	0x08008c5c
 8002988:	003d0900 	.word	0x003d0900

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_RCC_GetHCLKFreq+0x10>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000000 	.word	0x20000000

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff2 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08008c44 	.word	0x08008c44

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff ffde 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0adb      	lsrs	r3, r3, #11
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08008c44 	.word	0x08008c44

080029f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCC_Delay+0x34>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <RCC_Delay+0x38>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a5b      	lsrs	r3, r3, #9
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a0c:	bf00      	nop
  }
  while (Delay --);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	60fa      	str	r2, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <RCC_Delay+0x1c>
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000000 	.word	0x20000000
 8002a28:	10624dd3 	.word	0x10624dd3

08002a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e041      	b.n	8002ac2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fc54 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 fab2 	bl	8002fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e041      	b.n	8002b60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f839 	bl	8002b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4610      	mov	r0, r2
 8002b0a:	f000 fa63 	bl	8002fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_TIM_PWM_Start+0x24>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e022      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d109      	bne.n	8002bba <HAL_TIM_PWM_Start+0x3e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e015      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d109      	bne.n	8002bd4 <HAL_TIM_PWM_Start+0x58>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e008      	b.n	8002be6 <HAL_TIM_PWM_Start+0x6a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e05e      	b.n	8002cac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x82>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	e013      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x92>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c0c:	e00b      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0xa2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	e003      	b.n	8002c26 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fc5c 	bl	80034ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_TIM_PWM_Start+0x138>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <HAL_TIM_PWM_Start+0x138>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_TIM_PWM_Start+0xfa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d009      	beq.n	8002c76 <HAL_TIM_PWM_Start+0xfa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_TIM_PWM_Start+0x13c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_PWM_Start+0xfa>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_TIM_PWM_Start+0x140>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d111      	bne.n	8002c9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d010      	beq.n	8002caa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c98:	e007      	b.n	8002caa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e0ae      	b.n	8002e3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	f200 809f 	bhi.w	8002e2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002e2d 	.word	0x08002e2d
 8002cfc:	08002e2d 	.word	0x08002e2d
 8002d00:	08002e2d 	.word	0x08002e2d
 8002d04:	08002d69 	.word	0x08002d69
 8002d08:	08002e2d 	.word	0x08002e2d
 8002d0c:	08002e2d 	.word	0x08002e2d
 8002d10:	08002e2d 	.word	0x08002e2d
 8002d14:	08002dab 	.word	0x08002dab
 8002d18:	08002e2d 	.word	0x08002e2d
 8002d1c:	08002e2d 	.word	0x08002e2d
 8002d20:	08002e2d 	.word	0x08002e2d
 8002d24:	08002deb 	.word	0x08002deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f9be 	bl	80030b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0208 	orr.w	r2, r2, #8
 8002d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6999      	ldr	r1, [r3, #24]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	619a      	str	r2, [r3, #24]
      break;
 8002d66:	e064      	b.n	8002e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fa04 	bl	800317c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6999      	ldr	r1, [r3, #24]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	021a      	lsls	r2, r3, #8
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	619a      	str	r2, [r3, #24]
      break;
 8002da8:	e043      	b.n	8002e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fa4d 	bl	8003250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0208 	orr.w	r2, r2, #8
 8002dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0204 	bic.w	r2, r2, #4
 8002dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69d9      	ldr	r1, [r3, #28]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	61da      	str	r2, [r3, #28]
      break;
 8002de8:	e023      	b.n	8002e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fa97 	bl	8003324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69d9      	ldr	r1, [r3, #28]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	61da      	str	r2, [r3, #28]
      break;
 8002e2a:	e002      	b.n	8002e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_TIM_ConfigClockSource+0x1c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0b4      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x186>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e98:	d03e      	beq.n	8002f18 <HAL_TIM_ConfigClockSource+0xd4>
 8002e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9e:	f200 8087 	bhi.w	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea6:	f000 8086 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x172>
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	d87f      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b70      	cmp	r3, #112	; 0x70
 8002eb2:	d01a      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0xa6>
 8002eb4:	2b70      	cmp	r3, #112	; 0x70
 8002eb6:	d87b      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b60      	cmp	r3, #96	; 0x60
 8002eba:	d050      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x11a>
 8002ebc:	2b60      	cmp	r3, #96	; 0x60
 8002ebe:	d877      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b50      	cmp	r3, #80	; 0x50
 8002ec2:	d03c      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0xfa>
 8002ec4:	2b50      	cmp	r3, #80	; 0x50
 8002ec6:	d873      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d058      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0x13a>
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d86f      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b30      	cmp	r3, #48	; 0x30
 8002ed2:	d064      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x15a>
 8002ed4:	2b30      	cmp	r3, #48	; 0x30
 8002ed6:	d86b      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d060      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x15a>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d867      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d05c      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x15a>
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d05a      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x15a>
 8002ee8:	e062      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002efa:	f000 fad8 	bl	80034ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	609a      	str	r2, [r3, #8]
      break;
 8002f16:	e04f      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f28:	f000 fac1 	bl	80034ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f3a:	609a      	str	r2, [r3, #8]
      break;
 8002f3c:	e03c      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f000 fa38 	bl	80033c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2150      	movs	r1, #80	; 0x50
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa8f 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002f5c:	e02c      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f000 fa56 	bl	800341c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2160      	movs	r1, #96	; 0x60
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fa7f 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002f7c:	e01c      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 fa18 	bl	80033c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2140      	movs	r1, #64	; 0x40
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fa6f 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e00c      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f000 fa66 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002fae:	e003      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb4:	e000      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <TIM_Base_SetConfig+0xd0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00b      	beq.n	8003004 <TIM_Base_SetConfig+0x30>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d007      	beq.n	8003004 <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	; (80030a8 <TIM_Base_SetConfig+0xd4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_Base_SetConfig+0x30>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2b      	ldr	r2, [pc, #172]	; (80030ac <TIM_Base_SetConfig+0xd8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d108      	bne.n	8003016 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <TIM_Base_SetConfig+0xd0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00b      	beq.n	8003036 <TIM_Base_SetConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d007      	beq.n	8003036 <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <TIM_Base_SetConfig+0xd4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <TIM_Base_SetConfig+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <TIM_Base_SetConfig+0xd8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d108      	bne.n	8003048 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <TIM_Base_SetConfig+0xd0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d103      	bne.n	800307c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f023 0201 	bic.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	611a      	str	r2, [r3, #16]
  }
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800

080030b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f023 0201 	bic.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 0302 	bic.w	r3, r3, #2
 80030f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <TIM_OC1_SetConfig+0xc8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0308 	bic.w	r3, r3, #8
 8003112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <TIM_OC1_SetConfig+0xc8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d111      	bne.n	8003152 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40012c00 	.word	0x40012c00

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 0210 	bic.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0320 	bic.w	r3, r3, #32
 80031c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1d      	ldr	r2, [pc, #116]	; (800324c <TIM_OC2_SetConfig+0xd0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10d      	bne.n	80031f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <TIM_OC2_SetConfig+0xd0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d113      	bne.n	8003228 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800320e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	40012c00 	.word	0x40012c00

08003250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <TIM_OC3_SetConfig+0xd0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10d      	bne.n	80032ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_OC3_SetConfig+0xd0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d113      	bne.n	80032fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	621a      	str	r2, [r3, #32]
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00

08003324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800336e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	031b      	lsls	r3, r3, #12
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <TIM_OC4_SetConfig+0x98>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d109      	bne.n	8003398 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	40012c00 	.word	0x40012c00

080033c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f023 0201 	bic.w	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 030a 	bic.w	r3, r3, #10
 80033fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0210 	bic.w	r2, r3, #16
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	031b      	lsls	r3, r3, #12
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003458:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	621a      	str	r2, [r3, #32]
}
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	f043 0307 	orr.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b087      	sub	sp, #28
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	609a      	str	r2, [r3, #8]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2201      	movs	r2, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	43db      	mvns	r3, r3
 800350e:	401a      	ands	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003548:	2302      	movs	r3, #2
 800354a:	e046      	b.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d009      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a10      	ldr	r2, [pc, #64]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10c      	bne.n	80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800

080035f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e042      	b.n	8003688 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fee8 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fe6d 	bl	8004314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d156      	bne.n	8003758 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_UART_Transmit_DMA+0x26>
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e04f      	b.n	800375a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2221      	movs	r2, #33	; 0x21
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_UART_Transmit_DMA+0xd4>)
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_UART_Transmit_DMA+0xd8>)
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_UART_Transmit_DMA+0xdc>)
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	2200      	movs	r2, #0
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3304      	adds	r3, #4
 800370e:	461a      	mov	r2, r3
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	f7fe f9af 	bl	8001a74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800371e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3314      	adds	r3, #20
 8003726:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	617b      	str	r3, [r7, #20]
   return(result);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003740:	627a      	str	r2, [r7, #36]	; 0x24
 8003742:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	61fb      	str	r3, [r7, #28]
   return(result);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3730      	adds	r7, #48	; 0x30
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08003dd3 	.word	0x08003dd3
 8003768:	08003e6d 	.word	0x08003e6d
 800376c:	08003e89 	.word	0x08003e89

08003770 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	; 0x30
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	d14a      	bne.n	8003820 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e043      	b.n	8003822 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	461a      	mov	r2, r3
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fbb5 	bl	8003f1c <UART_Start_Receive_IT>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80037b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d12c      	bne.n	800381a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d125      	bne.n	8003814 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	617b      	str	r3, [r7, #20]
   return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fe:	627a      	str	r2, [r7, #36]	; 0x24
 8003800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6a39      	ldr	r1, [r7, #32]
 8003804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	61fb      	str	r3, [r7, #28]
   return(result);
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8003812:	e002      	b.n	800381a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800381a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800381e:	e000      	b.n	8003822 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3730      	adds	r7, #48	; 0x30
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b0ba      	sub	sp, #232	; 0xe8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800386a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_UART_IRQHandler+0x66>
 800387e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fc83 	bl	8004196 <UART_Receive_IT>
      return;
 8003890:	e25b      	b.n	8003d4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80de 	beq.w	8003a58 <HAL_UART_IRQHandler+0x22c>
 800389c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80d1 	beq.w	8003a58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_UART_IRQHandler+0xae>
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_UART_IRQHandler+0xd2>
 80038e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_UART_IRQHandler+0xf6>
 800390a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d011      	beq.n	8003952 <HAL_UART_IRQHandler+0x126>
 800392e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800393a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f043 0208 	orr.w	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 81f2 	beq.w	8003d40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800395c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_UART_IRQHandler+0x14e>
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fc0e 	bl	8004196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <HAL_UART_IRQHandler+0x17a>
 800399e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04f      	beq.n	8003a46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fb18 	bl	8003fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d041      	beq.n	8003a3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1d9      	bne.n	80039ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d013      	beq.n	8003a36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	4a7e      	ldr	r2, [pc, #504]	; (8003c0c <HAL_UART_IRQHandler+0x3e0>)
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe f8c6 	bl	8001bac <HAL_DMA_Abort_IT>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a30:	4610      	mov	r0, r2
 8003a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e00e      	b.n	8003a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9a5 	bl	8003d86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	e00a      	b.n	8003a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9a1 	bl	8003d86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	e006      	b.n	8003a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f99d 	bl	8003d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a52:	e175      	b.n	8003d40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	bf00      	nop
    return;
 8003a56:	e173      	b.n	8003d40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	f040 814f 	bne.w	8003d00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8148 	beq.w	8003d00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8141 	beq.w	8003d00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80b6 	beq.w	8003c10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ab0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8145 	beq.w	8003d44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	f080 813e 	bcs.w	8003d44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ace:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	f000 8088 	beq.w	8003bec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b08:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1d9      	bne.n	8003adc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3314      	adds	r3, #20
 8003b48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e1      	bne.n	8003b28 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbc:	f023 0310 	bic.w	r3, r3, #16
 8003bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bce:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bd0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e3      	bne.n	8003baa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd ffa4 	bl	8001b34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fcd4 	bl	80015b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c08:	e09c      	b.n	8003d44 <HAL_UART_IRQHandler+0x518>
 8003c0a:	bf00      	nop
 8003c0c:	080040a1 	.word	0x080040a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 808e 	beq.w	8003d48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8089 	beq.w	8003d48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e3      	bne.n	8003c36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3314      	adds	r3, #20
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c92:	633a      	str	r2, [r7, #48]	; 0x30
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e3      	bne.n	8003c6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0310 	bic.w	r3, r3, #16
 8003cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cd8:	61fa      	str	r2, [r7, #28]
 8003cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e3      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fd fc59 	bl	80015b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cfe:	e023      	b.n	8003d48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d009      	beq.n	8003d20 <HAL_UART_IRQHandler+0x4f4>
 8003d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9d5 	bl	80040c8 <UART_Transmit_IT>
    return;
 8003d1e:	e014      	b.n	8003d4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <HAL_UART_IRQHandler+0x51e>
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fa14 	bl	8004166 <UART_EndTransmit_IT>
    return;
 8003d3e:	e004      	b.n	8003d4a <HAL_UART_IRQHandler+0x51e>
    return;
 8003d40:	bf00      	nop
 8003d42:	e002      	b.n	8003d4a <HAL_UART_IRQHandler+0x51e>
      return;
 8003d44:	bf00      	nop
 8003d46:	e000      	b.n	8003d4a <HAL_UART_IRQHandler+0x51e>
      return;
 8003d48:	bf00      	nop
  }
}
 8003d4a:	37e8      	adds	r7, #232	; 0xe8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b2db      	uxtb	r3, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b090      	sub	sp, #64	; 0x40
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d137      	bne.n	8003e5e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df0:	2200      	movs	r2, #0
 8003df2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	623b      	str	r3, [r7, #32]
   return(result);
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e14:	633a      	str	r2, [r7, #48]	; 0x30
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e5      	bne.n	8003df4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e48:	61fa      	str	r2, [r7, #28]
 8003e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	617b      	str	r3, [r7, #20]
   return(result);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e5c:	e002      	b.n	8003e64 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003e5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e60:	f7ff ff76 	bl	8003d50 <HAL_UART_TxCpltCallback>
}
 8003e64:	bf00      	nop
 8003e66:	3740      	adds	r7, #64	; 0x40
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ff71 	bl	8003d62 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b21      	cmp	r3, #33	; 0x21
 8003eba:	d108      	bne.n	8003ece <UART_DMAError+0x46>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ec8:	68b8      	ldr	r0, [r7, #8]
 8003eca:	f000 f860 	bl	8003f8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b22      	cmp	r3, #34	; 0x22
 8003eee:	d108      	bne.n	8003f02 <UART_DMAError+0x7a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f000 f86d 	bl	8003fdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f043 0210 	orr.w	r2, r3, #16
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f0e:	68b8      	ldr	r0, [r7, #8]
 8003f10:	f7ff ff39 	bl	8003d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2222      	movs	r2, #34	; 0x22
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0220 	orr.w	r2, r2, #32
 8003f80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b089      	sub	sp, #36	; 0x24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	61ba      	str	r2, [r7, #24]
 8003fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003fd2:	bf00      	nop
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b095      	sub	sp, #84	; 0x54
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004004:	643a      	str	r2, [r7, #64]	; 0x40
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800400a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	61fb      	str	r3, [r7, #28]
   return(result);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	2b01      	cmp	r3, #1
 8004052:	d119      	bne.n	8004088 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	60bb      	str	r3, [r7, #8]
   return(result);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0310 	bic.w	r3, r3, #16
 800406a:	647b      	str	r3, [r7, #68]	; 0x44
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004074:	61ba      	str	r2, [r7, #24]
 8004076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6979      	ldr	r1, [r7, #20]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	613b      	str	r3, [r7, #16]
   return(result);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004096:	bf00      	nop
 8004098:	3754      	adds	r7, #84	; 0x54
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fe63 	bl	8003d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b21      	cmp	r3, #33	; 0x21
 80040da:	d13e      	bne.n	800415a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e4:	d114      	bne.n	8004110 <UART_Transmit_IT+0x48>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d110      	bne.n	8004110 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004102:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]
 800410e:	e008      	b.n	8004122 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	1c59      	adds	r1, r3, #1
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6211      	str	r1, [r2, #32]
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4619      	mov	r1, r3
 8004130:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004144:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004154:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fde2 	bl	8003d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b08c      	sub	sp, #48	; 0x30
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b22      	cmp	r3, #34	; 0x22
 80041a8:	f040 80ae 	bne.w	8004308 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	d117      	bne.n	80041e6 <UART_Receive_IT+0x50>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d113      	bne.n	80041e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	1c9a      	adds	r2, r3, #2
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
 80041e4:	e026      	b.n	8004234 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d007      	beq.n	800420a <UART_Receive_IT+0x74>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <UART_Receive_IT+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e008      	b.n	800422a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004224:	b2da      	uxtb	r2, r3
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4619      	mov	r1, r3
 8004242:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004244:	2b00      	cmp	r3, #0
 8004246:	d15d      	bne.n	8004304 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0220 	bic.w	r2, r2, #32
 8004256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	2b01      	cmp	r3, #1
 800428c:	d135      	bne.n	80042fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	613b      	str	r3, [r7, #16]
   return(result);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 0310 	bic.w	r3, r3, #16
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b4:	623a      	str	r2, [r7, #32]
 80042b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	69f9      	ldr	r1, [r7, #28]
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d10a      	bne.n	80042ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fd f95c 	bl	80015b0 <HAL_UARTEx_RxEventCallback>
 80042f8:	e002      	b.n	8004300 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fd3a 	bl	8003d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e002      	b.n	800430a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	; 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800434e:	f023 030c 	bic.w	r3, r3, #12
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	430b      	orrs	r3, r1
 800435a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <UART_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d103      	bne.n	8004384 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fe fb24 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	e002      	b.n	800438a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7fe fb0c 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8004388:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009a      	lsls	r2, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	4a22      	ldr	r2, [pc, #136]	; (800442c <UART_SetConfig+0x118>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	0119      	lsls	r1, r3, #4
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009a      	lsls	r2, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <UART_SetConfig+0x118>)
 80043c2:	fba3 0302 	umull	r0, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2064      	movs	r0, #100	; 0x64
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	; 0x32
 80043d4:	4a15      	ldr	r2, [pc, #84]	; (800442c <UART_SetConfig+0x118>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	4419      	add	r1, r3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <UART_SetConfig+0x118>)
 80043fa:	fba3 0302 	umull	r0, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2064      	movs	r0, #100	; 0x64
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	; 0x32
 800440c:	4a07      	ldr	r2, [pc, #28]	; (800442c <UART_SetConfig+0x118>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	440a      	add	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40013800 	.word	0x40013800
 800442c:	51eb851f 	.word	0x51eb851f

08004430 <atof>:
 8004430:	2100      	movs	r1, #0
 8004432:	f000 be1b 	b.w	800506c <strtod>

08004436 <sulp>:
 8004436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	460f      	mov	r7, r1
 800443c:	4690      	mov	r8, r2
 800443e:	f003 fcdb 	bl	8007df8 <__ulp>
 8004442:	4604      	mov	r4, r0
 8004444:	460d      	mov	r5, r1
 8004446:	f1b8 0f00 	cmp.w	r8, #0
 800444a:	d011      	beq.n	8004470 <sulp+0x3a>
 800444c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004450:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004454:	2b00      	cmp	r3, #0
 8004456:	dd0b      	ble.n	8004470 <sulp+0x3a>
 8004458:	2400      	movs	r4, #0
 800445a:	051b      	lsls	r3, r3, #20
 800445c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004460:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004464:	4622      	mov	r2, r4
 8004466:	462b      	mov	r3, r5
 8004468:	f7fc f836 	bl	80004d8 <__aeabi_dmul>
 800446c:	4604      	mov	r4, r0
 800446e:	460d      	mov	r5, r1
 8004470:	4620      	mov	r0, r4
 8004472:	4629      	mov	r1, r5
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004478 <_strtod_l>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	b09f      	sub	sp, #124	; 0x7c
 800447e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004480:	2200      	movs	r2, #0
 8004482:	4604      	mov	r4, r0
 8004484:	921a      	str	r2, [sp, #104]	; 0x68
 8004486:	460d      	mov	r5, r1
 8004488:	f04f 0800 	mov.w	r8, #0
 800448c:	f04f 0900 	mov.w	r9, #0
 8004490:	460a      	mov	r2, r1
 8004492:	9219      	str	r2, [sp, #100]	; 0x64
 8004494:	7811      	ldrb	r1, [r2, #0]
 8004496:	292b      	cmp	r1, #43	; 0x2b
 8004498:	d04a      	beq.n	8004530 <_strtod_l+0xb8>
 800449a:	d838      	bhi.n	800450e <_strtod_l+0x96>
 800449c:	290d      	cmp	r1, #13
 800449e:	d832      	bhi.n	8004506 <_strtod_l+0x8e>
 80044a0:	2908      	cmp	r1, #8
 80044a2:	d832      	bhi.n	800450a <_strtod_l+0x92>
 80044a4:	2900      	cmp	r1, #0
 80044a6:	d03b      	beq.n	8004520 <_strtod_l+0xa8>
 80044a8:	2200      	movs	r2, #0
 80044aa:	920e      	str	r2, [sp, #56]	; 0x38
 80044ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80044ae:	7832      	ldrb	r2, [r6, #0]
 80044b0:	2a30      	cmp	r2, #48	; 0x30
 80044b2:	f040 80b2 	bne.w	800461a <_strtod_l+0x1a2>
 80044b6:	7872      	ldrb	r2, [r6, #1]
 80044b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80044bc:	2a58      	cmp	r2, #88	; 0x58
 80044be:	d16e      	bne.n	800459e <_strtod_l+0x126>
 80044c0:	9302      	str	r3, [sp, #8]
 80044c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044c4:	4620      	mov	r0, r4
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	ab1a      	add	r3, sp, #104	; 0x68
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4a8c      	ldr	r2, [pc, #560]	; (8004700 <_strtod_l+0x288>)
 80044ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80044d0:	a919      	add	r1, sp, #100	; 0x64
 80044d2:	f002 fd6d 	bl	8006fb0 <__gethex>
 80044d6:	f010 070f 	ands.w	r7, r0, #15
 80044da:	4605      	mov	r5, r0
 80044dc:	d005      	beq.n	80044ea <_strtod_l+0x72>
 80044de:	2f06      	cmp	r7, #6
 80044e0:	d128      	bne.n	8004534 <_strtod_l+0xbc>
 80044e2:	2300      	movs	r3, #0
 80044e4:	3601      	adds	r6, #1
 80044e6:	9619      	str	r6, [sp, #100]	; 0x64
 80044e8:	930e      	str	r3, [sp, #56]	; 0x38
 80044ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 85a0 	bne.w	8005032 <_strtod_l+0xbba>
 80044f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044f4:	b1cb      	cbz	r3, 800452a <_strtod_l+0xb2>
 80044f6:	4642      	mov	r2, r8
 80044f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	b01f      	add	sp, #124	; 0x7c
 8004502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004506:	2920      	cmp	r1, #32
 8004508:	d1ce      	bne.n	80044a8 <_strtod_l+0x30>
 800450a:	3201      	adds	r2, #1
 800450c:	e7c1      	b.n	8004492 <_strtod_l+0x1a>
 800450e:	292d      	cmp	r1, #45	; 0x2d
 8004510:	d1ca      	bne.n	80044a8 <_strtod_l+0x30>
 8004512:	2101      	movs	r1, #1
 8004514:	910e      	str	r1, [sp, #56]	; 0x38
 8004516:	1c51      	adds	r1, r2, #1
 8004518:	9119      	str	r1, [sp, #100]	; 0x64
 800451a:	7852      	ldrb	r2, [r2, #1]
 800451c:	2a00      	cmp	r2, #0
 800451e:	d1c5      	bne.n	80044ac <_strtod_l+0x34>
 8004520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004522:	9519      	str	r5, [sp, #100]	; 0x64
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 8582 	bne.w	800502e <_strtod_l+0xbb6>
 800452a:	4642      	mov	r2, r8
 800452c:	464b      	mov	r3, r9
 800452e:	e7e5      	b.n	80044fc <_strtod_l+0x84>
 8004530:	2100      	movs	r1, #0
 8004532:	e7ef      	b.n	8004514 <_strtod_l+0x9c>
 8004534:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004536:	b13a      	cbz	r2, 8004548 <_strtod_l+0xd0>
 8004538:	2135      	movs	r1, #53	; 0x35
 800453a:	a81c      	add	r0, sp, #112	; 0x70
 800453c:	f003 fd48 	bl	8007fd0 <__copybits>
 8004540:	4620      	mov	r0, r4
 8004542:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004544:	f003 f92c 	bl	80077a0 <_Bfree>
 8004548:	3f01      	subs	r7, #1
 800454a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800454c:	2f04      	cmp	r7, #4
 800454e:	d806      	bhi.n	800455e <_strtod_l+0xe6>
 8004550:	e8df f007 	tbb	[pc, r7]
 8004554:	201d0314 	.word	0x201d0314
 8004558:	14          	.byte	0x14
 8004559:	00          	.byte	0x00
 800455a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800455e:	05e9      	lsls	r1, r5, #23
 8004560:	bf48      	it	mi
 8004562:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004566:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800456a:	0d1b      	lsrs	r3, r3, #20
 800456c:	051b      	lsls	r3, r3, #20
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1bb      	bne.n	80044ea <_strtod_l+0x72>
 8004572:	f001 fdab 	bl	80060cc <__errno>
 8004576:	2322      	movs	r3, #34	; 0x22
 8004578:	6003      	str	r3, [r0, #0]
 800457a:	e7b6      	b.n	80044ea <_strtod_l+0x72>
 800457c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004580:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004584:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004588:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800458c:	e7e7      	b.n	800455e <_strtod_l+0xe6>
 800458e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004704 <_strtod_l+0x28c>
 8004592:	e7e4      	b.n	800455e <_strtod_l+0xe6>
 8004594:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004598:	f04f 38ff 	mov.w	r8, #4294967295
 800459c:	e7df      	b.n	800455e <_strtod_l+0xe6>
 800459e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	9219      	str	r2, [sp, #100]	; 0x64
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b30      	cmp	r3, #48	; 0x30
 80045a8:	d0f9      	beq.n	800459e <_strtod_l+0x126>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d09d      	beq.n	80044ea <_strtod_l+0x72>
 80045ae:	2301      	movs	r3, #1
 80045b0:	f04f 0a00 	mov.w	sl, #0
 80045b4:	220a      	movs	r2, #10
 80045b6:	46d3      	mov	fp, sl
 80045b8:	9305      	str	r3, [sp, #20]
 80045ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80045c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80045c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80045c4:	7806      	ldrb	r6, [r0, #0]
 80045c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80045ca:	b2d9      	uxtb	r1, r3
 80045cc:	2909      	cmp	r1, #9
 80045ce:	d926      	bls.n	800461e <_strtod_l+0x1a6>
 80045d0:	2201      	movs	r2, #1
 80045d2:	494d      	ldr	r1, [pc, #308]	; (8004708 <_strtod_l+0x290>)
 80045d4:	f001 fd1d 	bl	8006012 <strncmp>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d030      	beq.n	800463e <_strtod_l+0x1c6>
 80045dc:	2000      	movs	r0, #0
 80045de:	4632      	mov	r2, r6
 80045e0:	4603      	mov	r3, r0
 80045e2:	465e      	mov	r6, fp
 80045e4:	9008      	str	r0, [sp, #32]
 80045e6:	2a65      	cmp	r2, #101	; 0x65
 80045e8:	d001      	beq.n	80045ee <_strtod_l+0x176>
 80045ea:	2a45      	cmp	r2, #69	; 0x45
 80045ec:	d113      	bne.n	8004616 <_strtod_l+0x19e>
 80045ee:	b91e      	cbnz	r6, 80045f8 <_strtod_l+0x180>
 80045f0:	9a05      	ldr	r2, [sp, #20]
 80045f2:	4302      	orrs	r2, r0
 80045f4:	d094      	beq.n	8004520 <_strtod_l+0xa8>
 80045f6:	2600      	movs	r6, #0
 80045f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80045fa:	1c6a      	adds	r2, r5, #1
 80045fc:	9219      	str	r2, [sp, #100]	; 0x64
 80045fe:	786a      	ldrb	r2, [r5, #1]
 8004600:	2a2b      	cmp	r2, #43	; 0x2b
 8004602:	d074      	beq.n	80046ee <_strtod_l+0x276>
 8004604:	2a2d      	cmp	r2, #45	; 0x2d
 8004606:	d078      	beq.n	80046fa <_strtod_l+0x282>
 8004608:	f04f 0c00 	mov.w	ip, #0
 800460c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004610:	2909      	cmp	r1, #9
 8004612:	d97f      	bls.n	8004714 <_strtod_l+0x29c>
 8004614:	9519      	str	r5, [sp, #100]	; 0x64
 8004616:	2700      	movs	r7, #0
 8004618:	e09e      	b.n	8004758 <_strtod_l+0x2e0>
 800461a:	2300      	movs	r3, #0
 800461c:	e7c8      	b.n	80045b0 <_strtod_l+0x138>
 800461e:	f1bb 0f08 	cmp.w	fp, #8
 8004622:	bfd8      	it	le
 8004624:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8004626:	f100 0001 	add.w	r0, r0, #1
 800462a:	bfd6      	itet	le
 800462c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004630:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004634:	930a      	strle	r3, [sp, #40]	; 0x28
 8004636:	f10b 0b01 	add.w	fp, fp, #1
 800463a:	9019      	str	r0, [sp, #100]	; 0x64
 800463c:	e7c1      	b.n	80045c2 <_strtod_l+0x14a>
 800463e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	9219      	str	r2, [sp, #100]	; 0x64
 8004644:	785a      	ldrb	r2, [r3, #1]
 8004646:	f1bb 0f00 	cmp.w	fp, #0
 800464a:	d037      	beq.n	80046bc <_strtod_l+0x244>
 800464c:	465e      	mov	r6, fp
 800464e:	9008      	str	r0, [sp, #32]
 8004650:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004654:	2b09      	cmp	r3, #9
 8004656:	d912      	bls.n	800467e <_strtod_l+0x206>
 8004658:	2301      	movs	r3, #1
 800465a:	e7c4      	b.n	80045e6 <_strtod_l+0x16e>
 800465c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800465e:	3001      	adds	r0, #1
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	9219      	str	r2, [sp, #100]	; 0x64
 8004664:	785a      	ldrb	r2, [r3, #1]
 8004666:	2a30      	cmp	r2, #48	; 0x30
 8004668:	d0f8      	beq.n	800465c <_strtod_l+0x1e4>
 800466a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800466e:	2b08      	cmp	r3, #8
 8004670:	f200 84e4 	bhi.w	800503c <_strtod_l+0xbc4>
 8004674:	9008      	str	r0, [sp, #32]
 8004676:	2000      	movs	r0, #0
 8004678:	4606      	mov	r6, r0
 800467a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800467c:	930b      	str	r3, [sp, #44]	; 0x2c
 800467e:	3a30      	subs	r2, #48	; 0x30
 8004680:	f100 0301 	add.w	r3, r0, #1
 8004684:	d014      	beq.n	80046b0 <_strtod_l+0x238>
 8004686:	9908      	ldr	r1, [sp, #32]
 8004688:	eb00 0c06 	add.w	ip, r0, r6
 800468c:	4419      	add	r1, r3
 800468e:	9108      	str	r1, [sp, #32]
 8004690:	4633      	mov	r3, r6
 8004692:	210a      	movs	r1, #10
 8004694:	4563      	cmp	r3, ip
 8004696:	d113      	bne.n	80046c0 <_strtod_l+0x248>
 8004698:	1833      	adds	r3, r6, r0
 800469a:	2b08      	cmp	r3, #8
 800469c:	f106 0601 	add.w	r6, r6, #1
 80046a0:	4406      	add	r6, r0
 80046a2:	dc1a      	bgt.n	80046da <_strtod_l+0x262>
 80046a4:	230a      	movs	r3, #10
 80046a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046a8:	fb03 2301 	mla	r3, r3, r1, r2
 80046ac:	930a      	str	r3, [sp, #40]	; 0x28
 80046ae:	2300      	movs	r3, #0
 80046b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80046b2:	4618      	mov	r0, r3
 80046b4:	1c51      	adds	r1, r2, #1
 80046b6:	9119      	str	r1, [sp, #100]	; 0x64
 80046b8:	7852      	ldrb	r2, [r2, #1]
 80046ba:	e7c9      	b.n	8004650 <_strtod_l+0x1d8>
 80046bc:	4658      	mov	r0, fp
 80046be:	e7d2      	b.n	8004666 <_strtod_l+0x1ee>
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	f103 0301 	add.w	r3, r3, #1
 80046c6:	dc03      	bgt.n	80046d0 <_strtod_l+0x258>
 80046c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80046ca:	434f      	muls	r7, r1
 80046cc:	970a      	str	r7, [sp, #40]	; 0x28
 80046ce:	e7e1      	b.n	8004694 <_strtod_l+0x21c>
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	bfd8      	it	le
 80046d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80046d8:	e7dc      	b.n	8004694 <_strtod_l+0x21c>
 80046da:	2e10      	cmp	r6, #16
 80046dc:	bfdc      	itt	le
 80046de:	230a      	movle	r3, #10
 80046e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80046e4:	e7e3      	b.n	80046ae <_strtod_l+0x236>
 80046e6:	2300      	movs	r3, #0
 80046e8:	9308      	str	r3, [sp, #32]
 80046ea:	2301      	movs	r3, #1
 80046ec:	e780      	b.n	80045f0 <_strtod_l+0x178>
 80046ee:	f04f 0c00 	mov.w	ip, #0
 80046f2:	1caa      	adds	r2, r5, #2
 80046f4:	9219      	str	r2, [sp, #100]	; 0x64
 80046f6:	78aa      	ldrb	r2, [r5, #2]
 80046f8:	e788      	b.n	800460c <_strtod_l+0x194>
 80046fa:	f04f 0c01 	mov.w	ip, #1
 80046fe:	e7f8      	b.n	80046f2 <_strtod_l+0x27a>
 8004700:	08008c60 	.word	0x08008c60
 8004704:	7ff00000 	.word	0x7ff00000
 8004708:	08008c5e 	.word	0x08008c5e
 800470c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800470e:	1c51      	adds	r1, r2, #1
 8004710:	9119      	str	r1, [sp, #100]	; 0x64
 8004712:	7852      	ldrb	r2, [r2, #1]
 8004714:	2a30      	cmp	r2, #48	; 0x30
 8004716:	d0f9      	beq.n	800470c <_strtod_l+0x294>
 8004718:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800471c:	2908      	cmp	r1, #8
 800471e:	f63f af7a 	bhi.w	8004616 <_strtod_l+0x19e>
 8004722:	3a30      	subs	r2, #48	; 0x30
 8004724:	9209      	str	r2, [sp, #36]	; 0x24
 8004726:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004728:	920c      	str	r2, [sp, #48]	; 0x30
 800472a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800472c:	1c57      	adds	r7, r2, #1
 800472e:	9719      	str	r7, [sp, #100]	; 0x64
 8004730:	7852      	ldrb	r2, [r2, #1]
 8004732:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004736:	f1be 0f09 	cmp.w	lr, #9
 800473a:	d938      	bls.n	80047ae <_strtod_l+0x336>
 800473c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800473e:	1a7f      	subs	r7, r7, r1
 8004740:	2f08      	cmp	r7, #8
 8004742:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004746:	dc03      	bgt.n	8004750 <_strtod_l+0x2d8>
 8004748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800474a:	428f      	cmp	r7, r1
 800474c:	bfa8      	it	ge
 800474e:	460f      	movge	r7, r1
 8004750:	f1bc 0f00 	cmp.w	ip, #0
 8004754:	d000      	beq.n	8004758 <_strtod_l+0x2e0>
 8004756:	427f      	negs	r7, r7
 8004758:	2e00      	cmp	r6, #0
 800475a:	d14f      	bne.n	80047fc <_strtod_l+0x384>
 800475c:	9905      	ldr	r1, [sp, #20]
 800475e:	4301      	orrs	r1, r0
 8004760:	f47f aec3 	bne.w	80044ea <_strtod_l+0x72>
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f aedb 	bne.w	8004520 <_strtod_l+0xa8>
 800476a:	2a69      	cmp	r2, #105	; 0x69
 800476c:	d029      	beq.n	80047c2 <_strtod_l+0x34a>
 800476e:	dc26      	bgt.n	80047be <_strtod_l+0x346>
 8004770:	2a49      	cmp	r2, #73	; 0x49
 8004772:	d026      	beq.n	80047c2 <_strtod_l+0x34a>
 8004774:	2a4e      	cmp	r2, #78	; 0x4e
 8004776:	f47f aed3 	bne.w	8004520 <_strtod_l+0xa8>
 800477a:	499a      	ldr	r1, [pc, #616]	; (80049e4 <_strtod_l+0x56c>)
 800477c:	a819      	add	r0, sp, #100	; 0x64
 800477e:	f002 fe59 	bl	8007434 <__match>
 8004782:	2800      	cmp	r0, #0
 8004784:	f43f aecc 	beq.w	8004520 <_strtod_l+0xa8>
 8004788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b28      	cmp	r3, #40	; 0x28
 800478e:	d12f      	bne.n	80047f0 <_strtod_l+0x378>
 8004790:	4995      	ldr	r1, [pc, #596]	; (80049e8 <_strtod_l+0x570>)
 8004792:	aa1c      	add	r2, sp, #112	; 0x70
 8004794:	a819      	add	r0, sp, #100	; 0x64
 8004796:	f002 fe61 	bl	800745c <__hexnan>
 800479a:	2805      	cmp	r0, #5
 800479c:	d128      	bne.n	80047f0 <_strtod_l+0x378>
 800479e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80047a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80047a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80047ac:	e69d      	b.n	80044ea <_strtod_l+0x72>
 80047ae:	210a      	movs	r1, #10
 80047b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80047b2:	fb01 2107 	mla	r1, r1, r7, r2
 80047b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80047ba:	9209      	str	r2, [sp, #36]	; 0x24
 80047bc:	e7b5      	b.n	800472a <_strtod_l+0x2b2>
 80047be:	2a6e      	cmp	r2, #110	; 0x6e
 80047c0:	e7d9      	b.n	8004776 <_strtod_l+0x2fe>
 80047c2:	498a      	ldr	r1, [pc, #552]	; (80049ec <_strtod_l+0x574>)
 80047c4:	a819      	add	r0, sp, #100	; 0x64
 80047c6:	f002 fe35 	bl	8007434 <__match>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	f43f aea8 	beq.w	8004520 <_strtod_l+0xa8>
 80047d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047d2:	4987      	ldr	r1, [pc, #540]	; (80049f0 <_strtod_l+0x578>)
 80047d4:	3b01      	subs	r3, #1
 80047d6:	a819      	add	r0, sp, #100	; 0x64
 80047d8:	9319      	str	r3, [sp, #100]	; 0x64
 80047da:	f002 fe2b 	bl	8007434 <__match>
 80047de:	b910      	cbnz	r0, 80047e6 <_strtod_l+0x36e>
 80047e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047e2:	3301      	adds	r3, #1
 80047e4:	9319      	str	r3, [sp, #100]	; 0x64
 80047e6:	f04f 0800 	mov.w	r8, #0
 80047ea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80049f4 <_strtod_l+0x57c>
 80047ee:	e67c      	b.n	80044ea <_strtod_l+0x72>
 80047f0:	4881      	ldr	r0, [pc, #516]	; (80049f8 <_strtod_l+0x580>)
 80047f2:	f001 fcb5 	bl	8006160 <nan>
 80047f6:	4680      	mov	r8, r0
 80047f8:	4689      	mov	r9, r1
 80047fa:	e676      	b.n	80044ea <_strtod_l+0x72>
 80047fc:	9b08      	ldr	r3, [sp, #32]
 80047fe:	f1bb 0f00 	cmp.w	fp, #0
 8004802:	bf08      	it	eq
 8004804:	46b3      	moveq	fp, r6
 8004806:	1afb      	subs	r3, r7, r3
 8004808:	2e10      	cmp	r6, #16
 800480a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800480c:	4635      	mov	r5, r6
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	bfa8      	it	ge
 8004812:	2510      	movge	r5, #16
 8004814:	f7fb fde6 	bl	80003e4 <__aeabi_ui2d>
 8004818:	2e09      	cmp	r6, #9
 800481a:	4680      	mov	r8, r0
 800481c:	4689      	mov	r9, r1
 800481e:	dd13      	ble.n	8004848 <_strtod_l+0x3d0>
 8004820:	4b76      	ldr	r3, [pc, #472]	; (80049fc <_strtod_l+0x584>)
 8004822:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004826:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800482a:	f7fb fe55 	bl	80004d8 <__aeabi_dmul>
 800482e:	4680      	mov	r8, r0
 8004830:	4650      	mov	r0, sl
 8004832:	4689      	mov	r9, r1
 8004834:	f7fb fdd6 	bl	80003e4 <__aeabi_ui2d>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4640      	mov	r0, r8
 800483e:	4649      	mov	r1, r9
 8004840:	f7fb fc94 	bl	800016c <__adddf3>
 8004844:	4680      	mov	r8, r0
 8004846:	4689      	mov	r9, r1
 8004848:	2e0f      	cmp	r6, #15
 800484a:	dc36      	bgt.n	80048ba <_strtod_l+0x442>
 800484c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	f43f ae4b 	beq.w	80044ea <_strtod_l+0x72>
 8004854:	dd22      	ble.n	800489c <_strtod_l+0x424>
 8004856:	2b16      	cmp	r3, #22
 8004858:	dc09      	bgt.n	800486e <_strtod_l+0x3f6>
 800485a:	4968      	ldr	r1, [pc, #416]	; (80049fc <_strtod_l+0x584>)
 800485c:	4642      	mov	r2, r8
 800485e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004862:	464b      	mov	r3, r9
 8004864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004868:	f7fb fe36 	bl	80004d8 <__aeabi_dmul>
 800486c:	e7c3      	b.n	80047f6 <_strtod_l+0x37e>
 800486e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004870:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8004874:	4293      	cmp	r3, r2
 8004876:	db20      	blt.n	80048ba <_strtod_l+0x442>
 8004878:	4c60      	ldr	r4, [pc, #384]	; (80049fc <_strtod_l+0x584>)
 800487a:	f1c6 060f 	rsb	r6, r6, #15
 800487e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8004882:	4642      	mov	r2, r8
 8004884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004888:	464b      	mov	r3, r9
 800488a:	f7fb fe25 	bl	80004d8 <__aeabi_dmul>
 800488e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004890:	1b9e      	subs	r6, r3, r6
 8004892:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8004896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800489a:	e7e5      	b.n	8004868 <_strtod_l+0x3f0>
 800489c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800489e:	3316      	adds	r3, #22
 80048a0:	db0b      	blt.n	80048ba <_strtod_l+0x442>
 80048a2:	9b08      	ldr	r3, [sp, #32]
 80048a4:	4640      	mov	r0, r8
 80048a6:	1bdf      	subs	r7, r3, r7
 80048a8:	4b54      	ldr	r3, [pc, #336]	; (80049fc <_strtod_l+0x584>)
 80048aa:	4649      	mov	r1, r9
 80048ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80048b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b4:	f7fb ff3a 	bl	800072c <__aeabi_ddiv>
 80048b8:	e79d      	b.n	80047f6 <_strtod_l+0x37e>
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	1b75      	subs	r5, r6, r5
 80048be:	441d      	add	r5, r3
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	dd70      	ble.n	80049a6 <_strtod_l+0x52e>
 80048c4:	f015 030f 	ands.w	r3, r5, #15
 80048c8:	d00a      	beq.n	80048e0 <_strtod_l+0x468>
 80048ca:	494c      	ldr	r1, [pc, #304]	; (80049fc <_strtod_l+0x584>)
 80048cc:	4642      	mov	r2, r8
 80048ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048d6:	464b      	mov	r3, r9
 80048d8:	f7fb fdfe 	bl	80004d8 <__aeabi_dmul>
 80048dc:	4680      	mov	r8, r0
 80048de:	4689      	mov	r9, r1
 80048e0:	f035 050f 	bics.w	r5, r5, #15
 80048e4:	d04d      	beq.n	8004982 <_strtod_l+0x50a>
 80048e6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80048ea:	dd22      	ble.n	8004932 <_strtod_l+0x4ba>
 80048ec:	2600      	movs	r6, #0
 80048ee:	46b3      	mov	fp, r6
 80048f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80048f2:	9608      	str	r6, [sp, #32]
 80048f4:	2322      	movs	r3, #34	; 0x22
 80048f6:	f04f 0800 	mov.w	r8, #0
 80048fa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80049f4 <_strtod_l+0x57c>
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004902:	2b00      	cmp	r3, #0
 8004904:	f43f adf1 	beq.w	80044ea <_strtod_l+0x72>
 8004908:	4620      	mov	r0, r4
 800490a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800490c:	f002 ff48 	bl	80077a0 <_Bfree>
 8004910:	4620      	mov	r0, r4
 8004912:	9908      	ldr	r1, [sp, #32]
 8004914:	f002 ff44 	bl	80077a0 <_Bfree>
 8004918:	4659      	mov	r1, fp
 800491a:	4620      	mov	r0, r4
 800491c:	f002 ff40 	bl	80077a0 <_Bfree>
 8004920:	4620      	mov	r0, r4
 8004922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004924:	f002 ff3c 	bl	80077a0 <_Bfree>
 8004928:	4631      	mov	r1, r6
 800492a:	4620      	mov	r0, r4
 800492c:	f002 ff38 	bl	80077a0 <_Bfree>
 8004930:	e5db      	b.n	80044ea <_strtod_l+0x72>
 8004932:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <_strtod_l+0x588>)
 8004934:	4640      	mov	r0, r8
 8004936:	9305      	str	r3, [sp, #20]
 8004938:	2300      	movs	r3, #0
 800493a:	4649      	mov	r1, r9
 800493c:	469a      	mov	sl, r3
 800493e:	112d      	asrs	r5, r5, #4
 8004940:	2d01      	cmp	r5, #1
 8004942:	dc21      	bgt.n	8004988 <_strtod_l+0x510>
 8004944:	b10b      	cbz	r3, 800494a <_strtod_l+0x4d2>
 8004946:	4680      	mov	r8, r0
 8004948:	4689      	mov	r9, r1
 800494a:	492d      	ldr	r1, [pc, #180]	; (8004a00 <_strtod_l+0x588>)
 800494c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004950:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004954:	4642      	mov	r2, r8
 8004956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800495a:	464b      	mov	r3, r9
 800495c:	f7fb fdbc 	bl	80004d8 <__aeabi_dmul>
 8004960:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <_strtod_l+0x57c>)
 8004962:	460a      	mov	r2, r1
 8004964:	400b      	ands	r3, r1
 8004966:	4927      	ldr	r1, [pc, #156]	; (8004a04 <_strtod_l+0x58c>)
 8004968:	4680      	mov	r8, r0
 800496a:	428b      	cmp	r3, r1
 800496c:	d8be      	bhi.n	80048ec <_strtod_l+0x474>
 800496e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004972:	428b      	cmp	r3, r1
 8004974:	bf86      	itte	hi
 8004976:	f04f 38ff 	movhi.w	r8, #4294967295
 800497a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8004a08 <_strtod_l+0x590>
 800497e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004982:	2300      	movs	r3, #0
 8004984:	9305      	str	r3, [sp, #20]
 8004986:	e07b      	b.n	8004a80 <_strtod_l+0x608>
 8004988:	07ea      	lsls	r2, r5, #31
 800498a:	d505      	bpl.n	8004998 <_strtod_l+0x520>
 800498c:	9b05      	ldr	r3, [sp, #20]
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f7fb fda1 	bl	80004d8 <__aeabi_dmul>
 8004996:	2301      	movs	r3, #1
 8004998:	9a05      	ldr	r2, [sp, #20]
 800499a:	f10a 0a01 	add.w	sl, sl, #1
 800499e:	3208      	adds	r2, #8
 80049a0:	106d      	asrs	r5, r5, #1
 80049a2:	9205      	str	r2, [sp, #20]
 80049a4:	e7cc      	b.n	8004940 <_strtod_l+0x4c8>
 80049a6:	d0ec      	beq.n	8004982 <_strtod_l+0x50a>
 80049a8:	426d      	negs	r5, r5
 80049aa:	f015 020f 	ands.w	r2, r5, #15
 80049ae:	d00a      	beq.n	80049c6 <_strtod_l+0x54e>
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <_strtod_l+0x584>)
 80049b2:	4640      	mov	r0, r8
 80049b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049b8:	4649      	mov	r1, r9
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb feb5 	bl	800072c <__aeabi_ddiv>
 80049c2:	4680      	mov	r8, r0
 80049c4:	4689      	mov	r9, r1
 80049c6:	112d      	asrs	r5, r5, #4
 80049c8:	d0db      	beq.n	8004982 <_strtod_l+0x50a>
 80049ca:	2d1f      	cmp	r5, #31
 80049cc:	dd1e      	ble.n	8004a0c <_strtod_l+0x594>
 80049ce:	2600      	movs	r6, #0
 80049d0:	46b3      	mov	fp, r6
 80049d2:	960b      	str	r6, [sp, #44]	; 0x2c
 80049d4:	9608      	str	r6, [sp, #32]
 80049d6:	2322      	movs	r3, #34	; 0x22
 80049d8:	f04f 0800 	mov.w	r8, #0
 80049dc:	f04f 0900 	mov.w	r9, #0
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	e78d      	b.n	8004900 <_strtod_l+0x488>
 80049e4:	08008cbd 	.word	0x08008cbd
 80049e8:	08008c74 	.word	0x08008c74
 80049ec:	08008cb5 	.word	0x08008cb5
 80049f0:	08008cf4 	.word	0x08008cf4
 80049f4:	7ff00000 	.word	0x7ff00000
 80049f8:	08009081 	.word	0x08009081
 80049fc:	08008e60 	.word	0x08008e60
 8004a00:	08008e38 	.word	0x08008e38
 8004a04:	7ca00000 	.word	0x7ca00000
 8004a08:	7fefffff 	.word	0x7fefffff
 8004a0c:	f015 0310 	ands.w	r3, r5, #16
 8004a10:	bf18      	it	ne
 8004a12:	236a      	movne	r3, #106	; 0x6a
 8004a14:	4640      	mov	r0, r8
 8004a16:	9305      	str	r3, [sp, #20]
 8004a18:	4649      	mov	r1, r9
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8004ce8 <_strtod_l+0x870>
 8004a20:	07ea      	lsls	r2, r5, #31
 8004a22:	d504      	bpl.n	8004a2e <_strtod_l+0x5b6>
 8004a24:	e9da 2300 	ldrd	r2, r3, [sl]
 8004a28:	f7fb fd56 	bl	80004d8 <__aeabi_dmul>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	106d      	asrs	r5, r5, #1
 8004a30:	f10a 0a08 	add.w	sl, sl, #8
 8004a34:	d1f4      	bne.n	8004a20 <_strtod_l+0x5a8>
 8004a36:	b10b      	cbz	r3, 8004a3c <_strtod_l+0x5c4>
 8004a38:	4680      	mov	r8, r0
 8004a3a:	4689      	mov	r9, r1
 8004a3c:	9b05      	ldr	r3, [sp, #20]
 8004a3e:	b1bb      	cbz	r3, 8004a70 <_strtod_l+0x5f8>
 8004a40:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004a44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	dd10      	ble.n	8004a70 <_strtod_l+0x5f8>
 8004a4e:	2b1f      	cmp	r3, #31
 8004a50:	f340 8128 	ble.w	8004ca4 <_strtod_l+0x82c>
 8004a54:	2b34      	cmp	r3, #52	; 0x34
 8004a56:	bfd8      	it	le
 8004a58:	f04f 33ff 	movle.w	r3, #4294967295
 8004a5c:	f04f 0800 	mov.w	r8, #0
 8004a60:	bfcf      	iteee	gt
 8004a62:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004a66:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004a6a:	4093      	lslle	r3, r2
 8004a6c:	ea03 0901 	andle.w	r9, r3, r1
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	4640      	mov	r0, r8
 8004a76:	4649      	mov	r1, r9
 8004a78:	f7fb ff96 	bl	80009a8 <__aeabi_dcmpeq>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1a6      	bne.n	80049ce <_strtod_l+0x556>
 8004a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a82:	465a      	mov	r2, fp
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	4620      	mov	r0, r4
 8004a88:	4633      	mov	r3, r6
 8004a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a8c:	f002 fef0 	bl	8007870 <__s2b>
 8004a90:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a92:	2800      	cmp	r0, #0
 8004a94:	f43f af2a 	beq.w	80048ec <_strtod_l+0x474>
 8004a98:	2600      	movs	r6, #0
 8004a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a9c:	9b08      	ldr	r3, [sp, #32]
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	eba3 0307 	sub.w	r3, r3, r7
 8004aa4:	bfa8      	it	ge
 8004aa6:	2300      	movge	r3, #0
 8004aa8:	46b3      	mov	fp, r6
 8004aaa:	9312      	str	r3, [sp, #72]	; 0x48
 8004aac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004ab0:	9316      	str	r3, [sp, #88]	; 0x58
 8004ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	f002 fe32 	bl	8007720 <_Balloc>
 8004abc:	9008      	str	r0, [sp, #32]
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	f43f af18 	beq.w	80048f4 <_strtod_l+0x47c>
 8004ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac6:	300c      	adds	r0, #12
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	f103 010c 	add.w	r1, r3, #12
 8004ace:	3202      	adds	r2, #2
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	f001 fb36 	bl	8006142 <memcpy>
 8004ad6:	ab1c      	add	r3, sp, #112	; 0x70
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	ab1b      	add	r3, sp, #108	; 0x6c
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4642      	mov	r2, r8
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004ae8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004aec:	f003 f9ec 	bl	8007ec8 <__d2b>
 8004af0:	901a      	str	r0, [sp, #104]	; 0x68
 8004af2:	2800      	cmp	r0, #0
 8004af4:	f43f aefe 	beq.w	80048f4 <_strtod_l+0x47c>
 8004af8:	2101      	movs	r1, #1
 8004afa:	4620      	mov	r0, r4
 8004afc:	f002 ff50 	bl	80079a0 <__i2b>
 8004b00:	4683      	mov	fp, r0
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f43f aef6 	beq.w	80048f4 <_strtod_l+0x47c>
 8004b08:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004b0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b0c:	2f00      	cmp	r7, #0
 8004b0e:	bfab      	itete	ge
 8004b10:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8004b12:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004b14:	eb07 0a03 	addge.w	sl, r7, r3
 8004b18:	1bdd      	sublt	r5, r3, r7
 8004b1a:	9b05      	ldr	r3, [sp, #20]
 8004b1c:	bfa8      	it	ge
 8004b1e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004b20:	eba7 0703 	sub.w	r7, r7, r3
 8004b24:	4417      	add	r7, r2
 8004b26:	4b71      	ldr	r3, [pc, #452]	; (8004cec <_strtod_l+0x874>)
 8004b28:	f107 37ff 	add.w	r7, r7, #4294967295
 8004b2c:	bfb8      	it	lt
 8004b2e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8004b32:	429f      	cmp	r7, r3
 8004b34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b38:	f280 80c7 	bge.w	8004cca <_strtod_l+0x852>
 8004b3c:	1bdb      	subs	r3, r3, r7
 8004b3e:	2b1f      	cmp	r3, #31
 8004b40:	f04f 0101 	mov.w	r1, #1
 8004b44:	eba2 0203 	sub.w	r2, r2, r3
 8004b48:	f300 80b3 	bgt.w	8004cb2 <_strtod_l+0x83a>
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b52:	2300      	movs	r3, #0
 8004b54:	9310      	str	r3, [sp, #64]	; 0x40
 8004b56:	eb0a 0702 	add.w	r7, sl, r2
 8004b5a:	9b05      	ldr	r3, [sp, #20]
 8004b5c:	45ba      	cmp	sl, r7
 8004b5e:	4415      	add	r5, r2
 8004b60:	441d      	add	r5, r3
 8004b62:	4653      	mov	r3, sl
 8004b64:	bfa8      	it	ge
 8004b66:	463b      	movge	r3, r7
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	bfa8      	it	ge
 8004b6c:	462b      	movge	r3, r5
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bfc2      	ittt	gt
 8004b72:	1aff      	subgt	r7, r7, r3
 8004b74:	1aed      	subgt	r5, r5, r3
 8004b76:	ebaa 0a03 	subgt.w	sl, sl, r3
 8004b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dd17      	ble.n	8004bb0 <_strtod_l+0x738>
 8004b80:	4659      	mov	r1, fp
 8004b82:	461a      	mov	r2, r3
 8004b84:	4620      	mov	r0, r4
 8004b86:	f002 ffc9 	bl	8007b1c <__pow5mult>
 8004b8a:	4683      	mov	fp, r0
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f43f aeb1 	beq.w	80048f4 <_strtod_l+0x47c>
 8004b92:	4601      	mov	r1, r0
 8004b94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004b96:	4620      	mov	r0, r4
 8004b98:	f002 ff18 	bl	80079cc <__multiply>
 8004b9c:	900a      	str	r0, [sp, #40]	; 0x28
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f43f aea8 	beq.w	80048f4 <_strtod_l+0x47c>
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ba8:	f002 fdfa 	bl	80077a0 <_Bfree>
 8004bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bae:	931a      	str	r3, [sp, #104]	; 0x68
 8004bb0:	2f00      	cmp	r7, #0
 8004bb2:	f300 808f 	bgt.w	8004cd4 <_strtod_l+0x85c>
 8004bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dd08      	ble.n	8004bce <_strtod_l+0x756>
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004bc0:	9908      	ldr	r1, [sp, #32]
 8004bc2:	f002 ffab 	bl	8007b1c <__pow5mult>
 8004bc6:	9008      	str	r0, [sp, #32]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	f43f ae93 	beq.w	80048f4 <_strtod_l+0x47c>
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	dd08      	ble.n	8004be4 <_strtod_l+0x76c>
 8004bd2:	462a      	mov	r2, r5
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	9908      	ldr	r1, [sp, #32]
 8004bd8:	f002 fffa 	bl	8007bd0 <__lshift>
 8004bdc:	9008      	str	r0, [sp, #32]
 8004bde:	2800      	cmp	r0, #0
 8004be0:	f43f ae88 	beq.w	80048f4 <_strtod_l+0x47c>
 8004be4:	f1ba 0f00 	cmp.w	sl, #0
 8004be8:	dd08      	ble.n	8004bfc <_strtod_l+0x784>
 8004bea:	4659      	mov	r1, fp
 8004bec:	4652      	mov	r2, sl
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f002 ffee 	bl	8007bd0 <__lshift>
 8004bf4:	4683      	mov	fp, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f43f ae7c 	beq.w	80048f4 <_strtod_l+0x47c>
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	9a08      	ldr	r2, [sp, #32]
 8004c00:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c02:	f003 f86d 	bl	8007ce0 <__mdiff>
 8004c06:	4606      	mov	r6, r0
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	f43f ae73 	beq.w	80048f4 <_strtod_l+0x47c>
 8004c0e:	2500      	movs	r5, #0
 8004c10:	68c3      	ldr	r3, [r0, #12]
 8004c12:	4659      	mov	r1, fp
 8004c14:	60c5      	str	r5, [r0, #12]
 8004c16:	930a      	str	r3, [sp, #40]	; 0x28
 8004c18:	f003 f846 	bl	8007ca8 <__mcmp>
 8004c1c:	42a8      	cmp	r0, r5
 8004c1e:	da6b      	bge.n	8004cf8 <_strtod_l+0x880>
 8004c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c22:	ea53 0308 	orrs.w	r3, r3, r8
 8004c26:	f040 808f 	bne.w	8004d48 <_strtod_l+0x8d0>
 8004c2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 808a 	bne.w	8004d48 <_strtod_l+0x8d0>
 8004c34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	051b      	lsls	r3, r3, #20
 8004c3c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c40:	f240 8082 	bls.w	8004d48 <_strtod_l+0x8d0>
 8004c44:	6973      	ldr	r3, [r6, #20]
 8004c46:	b913      	cbnz	r3, 8004c4e <_strtod_l+0x7d6>
 8004c48:	6933      	ldr	r3, [r6, #16]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	dd7c      	ble.n	8004d48 <_strtod_l+0x8d0>
 8004c4e:	4631      	mov	r1, r6
 8004c50:	2201      	movs	r2, #1
 8004c52:	4620      	mov	r0, r4
 8004c54:	f002 ffbc 	bl	8007bd0 <__lshift>
 8004c58:	4659      	mov	r1, fp
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	f003 f824 	bl	8007ca8 <__mcmp>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	dd71      	ble.n	8004d48 <_strtod_l+0x8d0>
 8004c64:	9905      	ldr	r1, [sp, #20]
 8004c66:	464b      	mov	r3, r9
 8004c68:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <_strtod_l+0x878>)
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	f000 808d 	beq.w	8004d8a <_strtod_l+0x912>
 8004c70:	ea02 0109 	and.w	r1, r2, r9
 8004c74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004c78:	f300 8087 	bgt.w	8004d8a <_strtod_l+0x912>
 8004c7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004c80:	f77f aea9 	ble.w	80049d6 <_strtod_l+0x55e>
 8004c84:	4640      	mov	r0, r8
 8004c86:	4649      	mov	r1, r9
 8004c88:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <_strtod_l+0x87c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f7fb fc24 	bl	80004d8 <__aeabi_dmul>
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <_strtod_l+0x878>)
 8004c92:	4680      	mov	r8, r0
 8004c94:	400b      	ands	r3, r1
 8004c96:	4689      	mov	r9, r1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f47f ae35 	bne.w	8004908 <_strtod_l+0x490>
 8004c9e:	2322      	movs	r3, #34	; 0x22
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	e631      	b.n	8004908 <_strtod_l+0x490>
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	ea03 0808 	and.w	r8, r3, r8
 8004cb0:	e6de      	b.n	8004a70 <_strtod_l+0x5f8>
 8004cb2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8004cb6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8004cba:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8004cbe:	37e2      	adds	r7, #226	; 0xe2
 8004cc0:	fa01 f307 	lsl.w	r3, r1, r7
 8004cc4:	9310      	str	r3, [sp, #64]	; 0x40
 8004cc6:	9113      	str	r1, [sp, #76]	; 0x4c
 8004cc8:	e745      	b.n	8004b56 <_strtod_l+0x6de>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9310      	str	r3, [sp, #64]	; 0x40
 8004cce:	2301      	movs	r3, #1
 8004cd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cd2:	e740      	b.n	8004b56 <_strtod_l+0x6de>
 8004cd4:	463a      	mov	r2, r7
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004cda:	f002 ff79 	bl	8007bd0 <__lshift>
 8004cde:	901a      	str	r0, [sp, #104]	; 0x68
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f47f af68 	bne.w	8004bb6 <_strtod_l+0x73e>
 8004ce6:	e605      	b.n	80048f4 <_strtod_l+0x47c>
 8004ce8:	08008c88 	.word	0x08008c88
 8004cec:	fffffc02 	.word	0xfffffc02
 8004cf0:	7ff00000 	.word	0x7ff00000
 8004cf4:	39500000 	.word	0x39500000
 8004cf8:	46ca      	mov	sl, r9
 8004cfa:	d165      	bne.n	8004dc8 <_strtod_l+0x950>
 8004cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d02:	b352      	cbz	r2, 8004d5a <_strtod_l+0x8e2>
 8004d04:	4a9e      	ldr	r2, [pc, #632]	; (8004f80 <_strtod_l+0xb08>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d12a      	bne.n	8004d60 <_strtod_l+0x8e8>
 8004d0a:	9b05      	ldr	r3, [sp, #20]
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	b1fb      	cbz	r3, 8004d50 <_strtod_l+0x8d8>
 8004d10:	4b9c      	ldr	r3, [pc, #624]	; (8004f84 <_strtod_l+0xb0c>)
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	ea09 0303 	and.w	r3, r9, r3
 8004d1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d1e:	d81a      	bhi.n	8004d56 <_strtod_l+0x8de>
 8004d20:	0d1b      	lsrs	r3, r3, #20
 8004d22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	4299      	cmp	r1, r3
 8004d2c:	d118      	bne.n	8004d60 <_strtod_l+0x8e8>
 8004d2e:	4b96      	ldr	r3, [pc, #600]	; (8004f88 <_strtod_l+0xb10>)
 8004d30:	459a      	cmp	sl, r3
 8004d32:	d102      	bne.n	8004d3a <_strtod_l+0x8c2>
 8004d34:	3101      	adds	r1, #1
 8004d36:	f43f addd 	beq.w	80048f4 <_strtod_l+0x47c>
 8004d3a:	f04f 0800 	mov.w	r8, #0
 8004d3e:	4b91      	ldr	r3, [pc, #580]	; (8004f84 <_strtod_l+0xb0c>)
 8004d40:	ea0a 0303 	and.w	r3, sl, r3
 8004d44:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8004d48:	9b05      	ldr	r3, [sp, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d19a      	bne.n	8004c84 <_strtod_l+0x80c>
 8004d4e:	e5db      	b.n	8004908 <_strtod_l+0x490>
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
 8004d54:	e7e9      	b.n	8004d2a <_strtod_l+0x8b2>
 8004d56:	4613      	mov	r3, r2
 8004d58:	e7e7      	b.n	8004d2a <_strtod_l+0x8b2>
 8004d5a:	ea53 0308 	orrs.w	r3, r3, r8
 8004d5e:	d081      	beq.n	8004c64 <_strtod_l+0x7ec>
 8004d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d62:	b1e3      	cbz	r3, 8004d9e <_strtod_l+0x926>
 8004d64:	ea13 0f0a 	tst.w	r3, sl
 8004d68:	d0ee      	beq.n	8004d48 <_strtod_l+0x8d0>
 8004d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4649      	mov	r1, r9
 8004d70:	9a05      	ldr	r2, [sp, #20]
 8004d72:	b1c3      	cbz	r3, 8004da6 <_strtod_l+0x92e>
 8004d74:	f7ff fb5f 	bl	8004436 <sulp>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004d7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d80:	f7fb f9f4 	bl	800016c <__adddf3>
 8004d84:	4680      	mov	r8, r0
 8004d86:	4689      	mov	r9, r1
 8004d88:	e7de      	b.n	8004d48 <_strtod_l+0x8d0>
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004d90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004d94:	f04f 38ff 	mov.w	r8, #4294967295
 8004d98:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004d9c:	e7d4      	b.n	8004d48 <_strtod_l+0x8d0>
 8004d9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004da0:	ea13 0f08 	tst.w	r3, r8
 8004da4:	e7e0      	b.n	8004d68 <_strtod_l+0x8f0>
 8004da6:	f7ff fb46 	bl	8004436 <sulp>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004db0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004db2:	f7fb f9d9 	bl	8000168 <__aeabi_dsub>
 8004db6:	2200      	movs	r2, #0
 8004db8:	2300      	movs	r3, #0
 8004dba:	4680      	mov	r8, r0
 8004dbc:	4689      	mov	r9, r1
 8004dbe:	f7fb fdf3 	bl	80009a8 <__aeabi_dcmpeq>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d0c0      	beq.n	8004d48 <_strtod_l+0x8d0>
 8004dc6:	e606      	b.n	80049d6 <_strtod_l+0x55e>
 8004dc8:	4659      	mov	r1, fp
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f003 f8d2 	bl	8007f74 <__ratio>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dde:	f7fb fdf7 	bl	80009d0 <__aeabi_dcmple>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d06f      	beq.n	8004ec6 <_strtod_l+0xa4e>
 8004de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d17c      	bne.n	8004ee6 <_strtod_l+0xa6e>
 8004dec:	f1b8 0f00 	cmp.w	r8, #0
 8004df0:	d159      	bne.n	8004ea6 <_strtod_l+0xa2e>
 8004df2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d17b      	bne.n	8004ef2 <_strtod_l+0xa7a>
 8004dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dfe:	2200      	movs	r2, #0
 8004e00:	4b62      	ldr	r3, [pc, #392]	; (8004f8c <_strtod_l+0xb14>)
 8004e02:	f7fb fddb 	bl	80009bc <__aeabi_dcmplt>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d15a      	bne.n	8004ec0 <_strtod_l+0xa48>
 8004e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4b5f      	ldr	r3, [pc, #380]	; (8004f90 <_strtod_l+0xb18>)
 8004e12:	f7fb fb61 	bl	80004d8 <__aeabi_dmul>
 8004e16:	4605      	mov	r5, r0
 8004e18:	460f      	mov	r7, r1
 8004e1a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004e1e:	9506      	str	r5, [sp, #24]
 8004e20:	9307      	str	r3, [sp, #28]
 8004e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004e2a:	4b56      	ldr	r3, [pc, #344]	; (8004f84 <_strtod_l+0xb0c>)
 8004e2c:	4a55      	ldr	r2, [pc, #340]	; (8004f84 <_strtod_l+0xb0c>)
 8004e2e:	ea0a 0303 	and.w	r3, sl, r3
 8004e32:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e34:	4b57      	ldr	r3, [pc, #348]	; (8004f94 <_strtod_l+0xb1c>)
 8004e36:	ea0a 0202 	and.w	r2, sl, r2
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f040 80b0 	bne.w	8004fa0 <_strtod_l+0xb28>
 8004e40:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8004e44:	4640      	mov	r0, r8
 8004e46:	4649      	mov	r1, r9
 8004e48:	f002 ffd6 	bl	8007df8 <__ulp>
 8004e4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e50:	f7fb fb42 	bl	80004d8 <__aeabi_dmul>
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	f7fb f988 	bl	800016c <__adddf3>
 8004e5c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8004f84 <_strtod_l+0xb0c>
 8004e60:	4a4d      	ldr	r2, [pc, #308]	; (8004f98 <_strtod_l+0xb20>)
 8004e62:	ea01 0a0a 	and.w	sl, r1, sl
 8004e66:	4592      	cmp	sl, r2
 8004e68:	4680      	mov	r8, r0
 8004e6a:	d948      	bls.n	8004efe <_strtod_l+0xa86>
 8004e6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e6e:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <_strtod_l+0xb10>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d103      	bne.n	8004e7c <_strtod_l+0xa04>
 8004e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e76:	3301      	adds	r3, #1
 8004e78:	f43f ad3c 	beq.w	80048f4 <_strtod_l+0x47c>
 8004e7c:	f04f 38ff 	mov.w	r8, #4294967295
 8004e80:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004f88 <_strtod_l+0xb10>
 8004e84:	4620      	mov	r0, r4
 8004e86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e88:	f002 fc8a 	bl	80077a0 <_Bfree>
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	9908      	ldr	r1, [sp, #32]
 8004e90:	f002 fc86 	bl	80077a0 <_Bfree>
 8004e94:	4659      	mov	r1, fp
 8004e96:	4620      	mov	r0, r4
 8004e98:	f002 fc82 	bl	80077a0 <_Bfree>
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f002 fc7e 	bl	80077a0 <_Bfree>
 8004ea4:	e605      	b.n	8004ab2 <_strtod_l+0x63a>
 8004ea6:	f1b8 0f01 	cmp.w	r8, #1
 8004eaa:	d103      	bne.n	8004eb4 <_strtod_l+0xa3c>
 8004eac:	f1b9 0f00 	cmp.w	r9, #0
 8004eb0:	f43f ad91 	beq.w	80049d6 <_strtod_l+0x55e>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4b39      	ldr	r3, [pc, #228]	; (8004f9c <_strtod_l+0xb24>)
 8004eb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004eba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ebe:	e016      	b.n	8004eee <_strtod_l+0xa76>
 8004ec0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004ec2:	4f33      	ldr	r7, [pc, #204]	; (8004f90 <_strtod_l+0xb18>)
 8004ec4:	e7a9      	b.n	8004e1a <_strtod_l+0x9a2>
 8004ec6:	4b32      	ldr	r3, [pc, #200]	; (8004f90 <_strtod_l+0xb18>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ece:	f7fb fb03 	bl	80004d8 <__aeabi_dmul>
 8004ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	460f      	mov	r7, r1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d09e      	beq.n	8004e1a <_strtod_l+0x9a2>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ee4:	e79d      	b.n	8004e22 <_strtod_l+0x9aa>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <_strtod_l+0xb14>)
 8004eea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004eee:	4f27      	ldr	r7, [pc, #156]	; (8004f8c <_strtod_l+0xb14>)
 8004ef0:	e797      	b.n	8004e22 <_strtod_l+0x9aa>
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <_strtod_l+0xb24>)
 8004ef6:	4645      	mov	r5, r8
 8004ef8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004efc:	e7f7      	b.n	8004eee <_strtod_l+0xa76>
 8004efe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8004f02:	9b05      	ldr	r3, [sp, #20]
 8004f04:	46ca      	mov	sl, r9
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1bc      	bne.n	8004e84 <_strtod_l+0xa0c>
 8004f0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f10:	0d1b      	lsrs	r3, r3, #20
 8004f12:	051b      	lsls	r3, r3, #20
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1b5      	bne.n	8004e84 <_strtod_l+0xa0c>
 8004f18:	4628      	mov	r0, r5
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	f7fb ff32 	bl	8000d84 <__aeabi_d2lz>
 8004f20:	f7fb faac 	bl	800047c <__aeabi_l2d>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4628      	mov	r0, r5
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb f91c 	bl	8000168 <__aeabi_dsub>
 8004f30:	460b      	mov	r3, r1
 8004f32:	4602      	mov	r2, r0
 8004f34:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8004f38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f3e:	ea4a 0a08 	orr.w	sl, sl, r8
 8004f42:	ea5a 0a03 	orrs.w	sl, sl, r3
 8004f46:	d06c      	beq.n	8005022 <_strtod_l+0xbaa>
 8004f48:	a309      	add	r3, pc, #36	; (adr r3, 8004f70 <_strtod_l+0xaf8>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb fd35 	bl	80009bc <__aeabi_dcmplt>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f47f acd8 	bne.w	8004908 <_strtod_l+0x490>
 8004f58:	a307      	add	r3, pc, #28	; (adr r3, 8004f78 <_strtod_l+0xb00>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f62:	f7fb fd49 	bl	80009f8 <__aeabi_dcmpgt>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d08c      	beq.n	8004e84 <_strtod_l+0xa0c>
 8004f6a:	e4cd      	b.n	8004908 <_strtod_l+0x490>
 8004f6c:	f3af 8000 	nop.w
 8004f70:	94a03595 	.word	0x94a03595
 8004f74:	3fdfffff 	.word	0x3fdfffff
 8004f78:	35afe535 	.word	0x35afe535
 8004f7c:	3fe00000 	.word	0x3fe00000
 8004f80:	000fffff 	.word	0x000fffff
 8004f84:	7ff00000 	.word	0x7ff00000
 8004f88:	7fefffff 	.word	0x7fefffff
 8004f8c:	3ff00000 	.word	0x3ff00000
 8004f90:	3fe00000 	.word	0x3fe00000
 8004f94:	7fe00000 	.word	0x7fe00000
 8004f98:	7c9fffff 	.word	0x7c9fffff
 8004f9c:	bff00000 	.word	0xbff00000
 8004fa0:	9b05      	ldr	r3, [sp, #20]
 8004fa2:	b333      	cbz	r3, 8004ff2 <_strtod_l+0xb7a>
 8004fa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fa6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004faa:	d822      	bhi.n	8004ff2 <_strtod_l+0xb7a>
 8004fac:	a328      	add	r3, pc, #160	; (adr r3, 8005050 <_strtod_l+0xbd8>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	f7fb fd0b 	bl	80009d0 <__aeabi_dcmple>
 8004fba:	b1a0      	cbz	r0, 8004fe6 <_strtod_l+0xb6e>
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f7fb fd62 	bl	8000a88 <__aeabi_d2uiz>
 8004fc4:	2801      	cmp	r0, #1
 8004fc6:	bf38      	it	cc
 8004fc8:	2001      	movcc	r0, #1
 8004fca:	f7fb fa0b 	bl	80003e4 <__aeabi_ui2d>
 8004fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	460f      	mov	r7, r1
 8004fd4:	bb03      	cbnz	r3, 8005018 <_strtod_l+0xba0>
 8004fd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fda:	9014      	str	r0, [sp, #80]	; 0x50
 8004fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8004fde:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004fe2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fea:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	9311      	str	r3, [sp, #68]	; 0x44
 8004ff2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ff6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8004ffa:	f002 fefd 	bl	8007df8 <__ulp>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4640      	mov	r0, r8
 8005004:	4649      	mov	r1, r9
 8005006:	f7fb fa67 	bl	80004d8 <__aeabi_dmul>
 800500a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800500c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800500e:	f7fb f8ad 	bl	800016c <__adddf3>
 8005012:	4680      	mov	r8, r0
 8005014:	4689      	mov	r9, r1
 8005016:	e774      	b.n	8004f02 <_strtod_l+0xa8a>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005020:	e7dd      	b.n	8004fde <_strtod_l+0xb66>
 8005022:	a30d      	add	r3, pc, #52	; (adr r3, 8005058 <_strtod_l+0xbe0>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb fcc8 	bl	80009bc <__aeabi_dcmplt>
 800502c:	e79b      	b.n	8004f66 <_strtod_l+0xaee>
 800502e:	2300      	movs	r3, #0
 8005030:	930e      	str	r3, [sp, #56]	; 0x38
 8005032:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005034:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	f7ff ba5b 	b.w	80044f2 <_strtod_l+0x7a>
 800503c:	2a65      	cmp	r2, #101	; 0x65
 800503e:	f43f ab52 	beq.w	80046e6 <_strtod_l+0x26e>
 8005042:	2a45      	cmp	r2, #69	; 0x45
 8005044:	f43f ab4f 	beq.w	80046e6 <_strtod_l+0x26e>
 8005048:	2301      	movs	r3, #1
 800504a:	f7ff bb87 	b.w	800475c <_strtod_l+0x2e4>
 800504e:	bf00      	nop
 8005050:	ffc00000 	.word	0xffc00000
 8005054:	41dfffff 	.word	0x41dfffff
 8005058:	94a03595 	.word	0x94a03595
 800505c:	3fcfffff 	.word	0x3fcfffff

08005060 <_strtod_r>:
 8005060:	4b01      	ldr	r3, [pc, #4]	; (8005068 <_strtod_r+0x8>)
 8005062:	f7ff ba09 	b.w	8004478 <_strtod_l>
 8005066:	bf00      	nop
 8005068:	20000018 	.word	0x20000018

0800506c <strtod>:
 800506c:	460a      	mov	r2, r1
 800506e:	4601      	mov	r1, r0
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <strtod+0x10>)
 8005072:	4b03      	ldr	r3, [pc, #12]	; (8005080 <strtod+0x14>)
 8005074:	6800      	ldr	r0, [r0, #0]
 8005076:	f7ff b9ff 	b.w	8004478 <_strtod_l>
 800507a:	bf00      	nop
 800507c:	200001d0 	.word	0x200001d0
 8005080:	20000018 	.word	0x20000018

08005084 <__cvt>:
 8005084:	2b00      	cmp	r3, #0
 8005086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508a:	461f      	mov	r7, r3
 800508c:	bfbb      	ittet	lt
 800508e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005092:	461f      	movlt	r7, r3
 8005094:	2300      	movge	r3, #0
 8005096:	232d      	movlt	r3, #45	; 0x2d
 8005098:	b088      	sub	sp, #32
 800509a:	4614      	mov	r4, r2
 800509c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800509e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050a0:	7013      	strb	r3, [r2, #0]
 80050a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050a8:	f023 0820 	bic.w	r8, r3, #32
 80050ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050b0:	d005      	beq.n	80050be <__cvt+0x3a>
 80050b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050b6:	d100      	bne.n	80050ba <__cvt+0x36>
 80050b8:	3501      	adds	r5, #1
 80050ba:	2302      	movs	r3, #2
 80050bc:	e000      	b.n	80050c0 <__cvt+0x3c>
 80050be:	2303      	movs	r3, #3
 80050c0:	aa07      	add	r2, sp, #28
 80050c2:	9204      	str	r2, [sp, #16]
 80050c4:	aa06      	add	r2, sp, #24
 80050c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050ca:	e9cd 3500 	strd	r3, r5, [sp]
 80050ce:	4622      	mov	r2, r4
 80050d0:	463b      	mov	r3, r7
 80050d2:	f001 f8d9 	bl	8006288 <_dtoa_r>
 80050d6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050da:	4606      	mov	r6, r0
 80050dc:	d102      	bne.n	80050e4 <__cvt+0x60>
 80050de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050e0:	07db      	lsls	r3, r3, #31
 80050e2:	d522      	bpl.n	800512a <__cvt+0xa6>
 80050e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050e8:	eb06 0905 	add.w	r9, r6, r5
 80050ec:	d110      	bne.n	8005110 <__cvt+0x8c>
 80050ee:	7833      	ldrb	r3, [r6, #0]
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d10a      	bne.n	800510a <__cvt+0x86>
 80050f4:	2200      	movs	r2, #0
 80050f6:	2300      	movs	r3, #0
 80050f8:	4620      	mov	r0, r4
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb fc54 	bl	80009a8 <__aeabi_dcmpeq>
 8005100:	b918      	cbnz	r0, 800510a <__cvt+0x86>
 8005102:	f1c5 0501 	rsb	r5, r5, #1
 8005106:	f8ca 5000 	str.w	r5, [sl]
 800510a:	f8da 3000 	ldr.w	r3, [sl]
 800510e:	4499      	add	r9, r3
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	4620      	mov	r0, r4
 8005116:	4639      	mov	r1, r7
 8005118:	f7fb fc46 	bl	80009a8 <__aeabi_dcmpeq>
 800511c:	b108      	cbz	r0, 8005122 <__cvt+0x9e>
 800511e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005122:	2230      	movs	r2, #48	; 0x30
 8005124:	9b07      	ldr	r3, [sp, #28]
 8005126:	454b      	cmp	r3, r9
 8005128:	d307      	bcc.n	800513a <__cvt+0xb6>
 800512a:	4630      	mov	r0, r6
 800512c:	9b07      	ldr	r3, [sp, #28]
 800512e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005130:	1b9b      	subs	r3, r3, r6
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	b008      	add	sp, #32
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	1c59      	adds	r1, r3, #1
 800513c:	9107      	str	r1, [sp, #28]
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e7f0      	b.n	8005124 <__cvt+0xa0>

08005142 <__exponent>:
 8005142:	4603      	mov	r3, r0
 8005144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005146:	2900      	cmp	r1, #0
 8005148:	f803 2b02 	strb.w	r2, [r3], #2
 800514c:	bfb6      	itet	lt
 800514e:	222d      	movlt	r2, #45	; 0x2d
 8005150:	222b      	movge	r2, #43	; 0x2b
 8005152:	4249      	neglt	r1, r1
 8005154:	2909      	cmp	r1, #9
 8005156:	7042      	strb	r2, [r0, #1]
 8005158:	dd2a      	ble.n	80051b0 <__exponent+0x6e>
 800515a:	f10d 0207 	add.w	r2, sp, #7
 800515e:	4617      	mov	r7, r2
 8005160:	260a      	movs	r6, #10
 8005162:	fb91 f5f6 	sdiv	r5, r1, r6
 8005166:	4694      	mov	ip, r2
 8005168:	fb06 1415 	mls	r4, r6, r5, r1
 800516c:	3430      	adds	r4, #48	; 0x30
 800516e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005172:	460c      	mov	r4, r1
 8005174:	2c63      	cmp	r4, #99	; 0x63
 8005176:	4629      	mov	r1, r5
 8005178:	f102 32ff 	add.w	r2, r2, #4294967295
 800517c:	dcf1      	bgt.n	8005162 <__exponent+0x20>
 800517e:	3130      	adds	r1, #48	; 0x30
 8005180:	f1ac 0402 	sub.w	r4, ip, #2
 8005184:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005188:	4622      	mov	r2, r4
 800518a:	1c41      	adds	r1, r0, #1
 800518c:	42ba      	cmp	r2, r7
 800518e:	d30a      	bcc.n	80051a6 <__exponent+0x64>
 8005190:	f10d 0209 	add.w	r2, sp, #9
 8005194:	eba2 020c 	sub.w	r2, r2, ip
 8005198:	42bc      	cmp	r4, r7
 800519a:	bf88      	it	hi
 800519c:	2200      	movhi	r2, #0
 800519e:	4413      	add	r3, r2
 80051a0:	1a18      	subs	r0, r3, r0
 80051a2:	b003      	add	sp, #12
 80051a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80051aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80051ae:	e7ed      	b.n	800518c <__exponent+0x4a>
 80051b0:	2330      	movs	r3, #48	; 0x30
 80051b2:	3130      	adds	r1, #48	; 0x30
 80051b4:	7083      	strb	r3, [r0, #2]
 80051b6:	70c1      	strb	r1, [r0, #3]
 80051b8:	1d03      	adds	r3, r0, #4
 80051ba:	e7f1      	b.n	80051a0 <__exponent+0x5e>

080051bc <_printf_float>:
 80051bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	b091      	sub	sp, #68	; 0x44
 80051c2:	460c      	mov	r4, r1
 80051c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80051c8:	4616      	mov	r6, r2
 80051ca:	461f      	mov	r7, r3
 80051cc:	4605      	mov	r5, r0
 80051ce:	f000 ff33 	bl	8006038 <_localeconv_r>
 80051d2:	6803      	ldr	r3, [r0, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	f7fa ffba 	bl	8000150 <strlen>
 80051dc:	2300      	movs	r3, #0
 80051de:	930e      	str	r3, [sp, #56]	; 0x38
 80051e0:	f8d8 3000 	ldr.w	r3, [r8]
 80051e4:	900a      	str	r0, [sp, #40]	; 0x28
 80051e6:	3307      	adds	r3, #7
 80051e8:	f023 0307 	bic.w	r3, r3, #7
 80051ec:	f103 0208 	add.w	r2, r3, #8
 80051f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80051f4:	f8d4 b000 	ldr.w	fp, [r4]
 80051f8:	f8c8 2000 	str.w	r2, [r8]
 80051fc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005200:	4652      	mov	r2, sl
 8005202:	4643      	mov	r3, r8
 8005204:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005208:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800520c:	930b      	str	r3, [sp, #44]	; 0x2c
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
 8005212:	4650      	mov	r0, sl
 8005214:	4b9c      	ldr	r3, [pc, #624]	; (8005488 <_printf_float+0x2cc>)
 8005216:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005218:	f7fb fbf8 	bl	8000a0c <__aeabi_dcmpun>
 800521c:	bb70      	cbnz	r0, 800527c <_printf_float+0xc0>
 800521e:	f04f 32ff 	mov.w	r2, #4294967295
 8005222:	4650      	mov	r0, sl
 8005224:	4b98      	ldr	r3, [pc, #608]	; (8005488 <_printf_float+0x2cc>)
 8005226:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005228:	f7fb fbd2 	bl	80009d0 <__aeabi_dcmple>
 800522c:	bb30      	cbnz	r0, 800527c <_printf_float+0xc0>
 800522e:	2200      	movs	r2, #0
 8005230:	2300      	movs	r3, #0
 8005232:	4650      	mov	r0, sl
 8005234:	4641      	mov	r1, r8
 8005236:	f7fb fbc1 	bl	80009bc <__aeabi_dcmplt>
 800523a:	b110      	cbz	r0, 8005242 <_printf_float+0x86>
 800523c:	232d      	movs	r3, #45	; 0x2d
 800523e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005242:	4a92      	ldr	r2, [pc, #584]	; (800548c <_printf_float+0x2d0>)
 8005244:	4b92      	ldr	r3, [pc, #584]	; (8005490 <_printf_float+0x2d4>)
 8005246:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800524a:	bf94      	ite	ls
 800524c:	4690      	movls	r8, r2
 800524e:	4698      	movhi	r8, r3
 8005250:	2303      	movs	r3, #3
 8005252:	f04f 0a00 	mov.w	sl, #0
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	f02b 0304 	bic.w	r3, fp, #4
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	4633      	mov	r3, r6
 8005260:	4621      	mov	r1, r4
 8005262:	4628      	mov	r0, r5
 8005264:	9700      	str	r7, [sp, #0]
 8005266:	aa0f      	add	r2, sp, #60	; 0x3c
 8005268:	f000 f9d6 	bl	8005618 <_printf_common>
 800526c:	3001      	adds	r0, #1
 800526e:	f040 8090 	bne.w	8005392 <_printf_float+0x1d6>
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	b011      	add	sp, #68	; 0x44
 8005278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527c:	4652      	mov	r2, sl
 800527e:	4643      	mov	r3, r8
 8005280:	4650      	mov	r0, sl
 8005282:	4641      	mov	r1, r8
 8005284:	f7fb fbc2 	bl	8000a0c <__aeabi_dcmpun>
 8005288:	b148      	cbz	r0, 800529e <_printf_float+0xe2>
 800528a:	f1b8 0f00 	cmp.w	r8, #0
 800528e:	bfb8      	it	lt
 8005290:	232d      	movlt	r3, #45	; 0x2d
 8005292:	4a80      	ldr	r2, [pc, #512]	; (8005494 <_printf_float+0x2d8>)
 8005294:	bfb8      	it	lt
 8005296:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800529a:	4b7f      	ldr	r3, [pc, #508]	; (8005498 <_printf_float+0x2dc>)
 800529c:	e7d3      	b.n	8005246 <_printf_float+0x8a>
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	d142      	bne.n	800532e <_printf_float+0x172>
 80052a8:	2306      	movs	r3, #6
 80052aa:	6063      	str	r3, [r4, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	9206      	str	r2, [sp, #24]
 80052b0:	aa0e      	add	r2, sp, #56	; 0x38
 80052b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80052b6:	aa0d      	add	r2, sp, #52	; 0x34
 80052b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	4652      	mov	r2, sl
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4628      	mov	r0, r5
 80052d0:	4643      	mov	r3, r8
 80052d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80052d4:	f7ff fed6 	bl	8005084 <__cvt>
 80052d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052da:	4680      	mov	r8, r0
 80052dc:	2947      	cmp	r1, #71	; 0x47
 80052de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052e0:	d108      	bne.n	80052f4 <_printf_float+0x138>
 80052e2:	1cc8      	adds	r0, r1, #3
 80052e4:	db02      	blt.n	80052ec <_printf_float+0x130>
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	4299      	cmp	r1, r3
 80052ea:	dd40      	ble.n	800536e <_printf_float+0x1b2>
 80052ec:	f1a9 0902 	sub.w	r9, r9, #2
 80052f0:	fa5f f989 	uxtb.w	r9, r9
 80052f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052f8:	d81f      	bhi.n	800533a <_printf_float+0x17e>
 80052fa:	464a      	mov	r2, r9
 80052fc:	3901      	subs	r1, #1
 80052fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005302:	910d      	str	r1, [sp, #52]	; 0x34
 8005304:	f7ff ff1d 	bl	8005142 <__exponent>
 8005308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800530a:	4682      	mov	sl, r0
 800530c:	1813      	adds	r3, r2, r0
 800530e:	2a01      	cmp	r2, #1
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	dc02      	bgt.n	800531a <_printf_float+0x15e>
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	07d2      	lsls	r2, r2, #31
 8005318:	d501      	bpl.n	800531e <_printf_float+0x162>
 800531a:	3301      	adds	r3, #1
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005322:	2b00      	cmp	r3, #0
 8005324:	d09b      	beq.n	800525e <_printf_float+0xa2>
 8005326:	232d      	movs	r3, #45	; 0x2d
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532c:	e797      	b.n	800525e <_printf_float+0xa2>
 800532e:	2947      	cmp	r1, #71	; 0x47
 8005330:	d1bc      	bne.n	80052ac <_printf_float+0xf0>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1ba      	bne.n	80052ac <_printf_float+0xf0>
 8005336:	2301      	movs	r3, #1
 8005338:	e7b7      	b.n	80052aa <_printf_float+0xee>
 800533a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800533e:	d118      	bne.n	8005372 <_printf_float+0x1b6>
 8005340:	2900      	cmp	r1, #0
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	dd0b      	ble.n	800535e <_printf_float+0x1a2>
 8005346:	6121      	str	r1, [r4, #16]
 8005348:	b913      	cbnz	r3, 8005350 <_printf_float+0x194>
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	07d0      	lsls	r0, r2, #31
 800534e:	d502      	bpl.n	8005356 <_printf_float+0x19a>
 8005350:	3301      	adds	r3, #1
 8005352:	440b      	add	r3, r1
 8005354:	6123      	str	r3, [r4, #16]
 8005356:	f04f 0a00 	mov.w	sl, #0
 800535a:	65a1      	str	r1, [r4, #88]	; 0x58
 800535c:	e7df      	b.n	800531e <_printf_float+0x162>
 800535e:	b913      	cbnz	r3, 8005366 <_printf_float+0x1aa>
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	07d2      	lsls	r2, r2, #31
 8005364:	d501      	bpl.n	800536a <_printf_float+0x1ae>
 8005366:	3302      	adds	r3, #2
 8005368:	e7f4      	b.n	8005354 <_printf_float+0x198>
 800536a:	2301      	movs	r3, #1
 800536c:	e7f2      	b.n	8005354 <_printf_float+0x198>
 800536e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005374:	4299      	cmp	r1, r3
 8005376:	db05      	blt.n	8005384 <_printf_float+0x1c8>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	6121      	str	r1, [r4, #16]
 800537c:	07d8      	lsls	r0, r3, #31
 800537e:	d5ea      	bpl.n	8005356 <_printf_float+0x19a>
 8005380:	1c4b      	adds	r3, r1, #1
 8005382:	e7e7      	b.n	8005354 <_printf_float+0x198>
 8005384:	2900      	cmp	r1, #0
 8005386:	bfcc      	ite	gt
 8005388:	2201      	movgt	r2, #1
 800538a:	f1c1 0202 	rsble	r2, r1, #2
 800538e:	4413      	add	r3, r2
 8005390:	e7e0      	b.n	8005354 <_printf_float+0x198>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	055a      	lsls	r2, r3, #21
 8005396:	d407      	bmi.n	80053a8 <_printf_float+0x1ec>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	4642      	mov	r2, r8
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	d12b      	bne.n	80053fe <_printf_float+0x242>
 80053a6:	e764      	b.n	8005272 <_printf_float+0xb6>
 80053a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053ac:	f240 80dd 	bls.w	800556a <_printf_float+0x3ae>
 80053b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053b4:	2200      	movs	r2, #0
 80053b6:	2300      	movs	r3, #0
 80053b8:	f7fb faf6 	bl	80009a8 <__aeabi_dcmpeq>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d033      	beq.n	8005428 <_printf_float+0x26c>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	4a35      	ldr	r2, [pc, #212]	; (800549c <_printf_float+0x2e0>)
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f af51 	beq.w	8005272 <_printf_float+0xb6>
 80053d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053d4:	429a      	cmp	r2, r3
 80053d6:	db02      	blt.n	80053de <_printf_float+0x222>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	07d8      	lsls	r0, r3, #31
 80053dc:	d50f      	bpl.n	80053fe <_printf_float+0x242>
 80053de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	f43f af42 	beq.w	8005272 <_printf_float+0xb6>
 80053ee:	f04f 0800 	mov.w	r8, #0
 80053f2:	f104 091a 	add.w	r9, r4, #26
 80053f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053f8:	3b01      	subs	r3, #1
 80053fa:	4543      	cmp	r3, r8
 80053fc:	dc09      	bgt.n	8005412 <_printf_float+0x256>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	079b      	lsls	r3, r3, #30
 8005402:	f100 8104 	bmi.w	800560e <_printf_float+0x452>
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800540a:	4298      	cmp	r0, r3
 800540c:	bfb8      	it	lt
 800540e:	4618      	movlt	r0, r3
 8005410:	e731      	b.n	8005276 <_printf_float+0xba>
 8005412:	2301      	movs	r3, #1
 8005414:	464a      	mov	r2, r9
 8005416:	4631      	mov	r1, r6
 8005418:	4628      	mov	r0, r5
 800541a:	47b8      	blx	r7
 800541c:	3001      	adds	r0, #1
 800541e:	f43f af28 	beq.w	8005272 <_printf_float+0xb6>
 8005422:	f108 0801 	add.w	r8, r8, #1
 8005426:	e7e6      	b.n	80053f6 <_printf_float+0x23a>
 8005428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800542a:	2b00      	cmp	r3, #0
 800542c:	dc38      	bgt.n	80054a0 <_printf_float+0x2e4>
 800542e:	2301      	movs	r3, #1
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <_printf_float+0x2e0>)
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f af1a 	beq.w	8005272 <_printf_float+0xb6>
 800543e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005442:	4313      	orrs	r3, r2
 8005444:	d102      	bne.n	800544c <_printf_float+0x290>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	07d9      	lsls	r1, r3, #31
 800544a:	d5d8      	bpl.n	80053fe <_printf_float+0x242>
 800544c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005450:	4631      	mov	r1, r6
 8005452:	4628      	mov	r0, r5
 8005454:	47b8      	blx	r7
 8005456:	3001      	adds	r0, #1
 8005458:	f43f af0b 	beq.w	8005272 <_printf_float+0xb6>
 800545c:	f04f 0900 	mov.w	r9, #0
 8005460:	f104 0a1a 	add.w	sl, r4, #26
 8005464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005466:	425b      	negs	r3, r3
 8005468:	454b      	cmp	r3, r9
 800546a:	dc01      	bgt.n	8005470 <_printf_float+0x2b4>
 800546c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546e:	e794      	b.n	800539a <_printf_float+0x1de>
 8005470:	2301      	movs	r3, #1
 8005472:	4652      	mov	r2, sl
 8005474:	4631      	mov	r1, r6
 8005476:	4628      	mov	r0, r5
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	f43f aef9 	beq.w	8005272 <_printf_float+0xb6>
 8005480:	f109 0901 	add.w	r9, r9, #1
 8005484:	e7ee      	b.n	8005464 <_printf_float+0x2a8>
 8005486:	bf00      	nop
 8005488:	7fefffff 	.word	0x7fefffff
 800548c:	08008cb0 	.word	0x08008cb0
 8005490:	08008cb4 	.word	0x08008cb4
 8005494:	08008cb8 	.word	0x08008cb8
 8005498:	08008cbc 	.word	0x08008cbc
 800549c:	08008cc0 	.word	0x08008cc0
 80054a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054a4:	429a      	cmp	r2, r3
 80054a6:	bfa8      	it	ge
 80054a8:	461a      	movge	r2, r3
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	4691      	mov	r9, r2
 80054ae:	dc37      	bgt.n	8005520 <_printf_float+0x364>
 80054b0:	f04f 0b00 	mov.w	fp, #0
 80054b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054b8:	f104 021a 	add.w	r2, r4, #26
 80054bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80054c0:	ebaa 0309 	sub.w	r3, sl, r9
 80054c4:	455b      	cmp	r3, fp
 80054c6:	dc33      	bgt.n	8005530 <_printf_float+0x374>
 80054c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054cc:	429a      	cmp	r2, r3
 80054ce:	db3b      	blt.n	8005548 <_printf_float+0x38c>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	07da      	lsls	r2, r3, #31
 80054d4:	d438      	bmi.n	8005548 <_printf_float+0x38c>
 80054d6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80054da:	eba2 0903 	sub.w	r9, r2, r3
 80054de:	eba2 020a 	sub.w	r2, r2, sl
 80054e2:	4591      	cmp	r9, r2
 80054e4:	bfa8      	it	ge
 80054e6:	4691      	movge	r9, r2
 80054e8:	f1b9 0f00 	cmp.w	r9, #0
 80054ec:	dc34      	bgt.n	8005558 <_printf_float+0x39c>
 80054ee:	f04f 0800 	mov.w	r8, #0
 80054f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054f6:	f104 0a1a 	add.w	sl, r4, #26
 80054fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	eba3 0309 	sub.w	r3, r3, r9
 8005504:	4543      	cmp	r3, r8
 8005506:	f77f af7a 	ble.w	80053fe <_printf_float+0x242>
 800550a:	2301      	movs	r3, #1
 800550c:	4652      	mov	r2, sl
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f aeac 	beq.w	8005272 <_printf_float+0xb6>
 800551a:	f108 0801 	add.w	r8, r8, #1
 800551e:	e7ec      	b.n	80054fa <_printf_float+0x33e>
 8005520:	4613      	mov	r3, r2
 8005522:	4631      	mov	r1, r6
 8005524:	4642      	mov	r2, r8
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	d1c0      	bne.n	80054b0 <_printf_float+0x2f4>
 800552e:	e6a0      	b.n	8005272 <_printf_float+0xb6>
 8005530:	2301      	movs	r3, #1
 8005532:	4631      	mov	r1, r6
 8005534:	4628      	mov	r0, r5
 8005536:	920b      	str	r2, [sp, #44]	; 0x2c
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f ae99 	beq.w	8005272 <_printf_float+0xb6>
 8005540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005542:	f10b 0b01 	add.w	fp, fp, #1
 8005546:	e7b9      	b.n	80054bc <_printf_float+0x300>
 8005548:	4631      	mov	r1, r6
 800554a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	d1bf      	bne.n	80054d6 <_printf_float+0x31a>
 8005556:	e68c      	b.n	8005272 <_printf_float+0xb6>
 8005558:	464b      	mov	r3, r9
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	eb08 020a 	add.w	r2, r8, sl
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	d1c2      	bne.n	80054ee <_printf_float+0x332>
 8005568:	e683      	b.n	8005272 <_printf_float+0xb6>
 800556a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800556c:	2a01      	cmp	r2, #1
 800556e:	dc01      	bgt.n	8005574 <_printf_float+0x3b8>
 8005570:	07db      	lsls	r3, r3, #31
 8005572:	d539      	bpl.n	80055e8 <_printf_float+0x42c>
 8005574:	2301      	movs	r3, #1
 8005576:	4642      	mov	r2, r8
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	f43f ae77 	beq.w	8005272 <_printf_float+0xb6>
 8005584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f ae6f 	beq.w	8005272 <_printf_float+0xb6>
 8005594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80055a0:	f7fb fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80055a4:	b9d8      	cbnz	r0, 80055de <_printf_float+0x422>
 80055a6:	f109 33ff 	add.w	r3, r9, #4294967295
 80055aa:	f108 0201 	add.w	r2, r8, #1
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	d10e      	bne.n	80055d6 <_printf_float+0x41a>
 80055b8:	e65b      	b.n	8005272 <_printf_float+0xb6>
 80055ba:	2301      	movs	r3, #1
 80055bc:	464a      	mov	r2, r9
 80055be:	4631      	mov	r1, r6
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b8      	blx	r7
 80055c4:	3001      	adds	r0, #1
 80055c6:	f43f ae54 	beq.w	8005272 <_printf_float+0xb6>
 80055ca:	f108 0801 	add.w	r8, r8, #1
 80055ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d0:	3b01      	subs	r3, #1
 80055d2:	4543      	cmp	r3, r8
 80055d4:	dcf1      	bgt.n	80055ba <_printf_float+0x3fe>
 80055d6:	4653      	mov	r3, sl
 80055d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055dc:	e6de      	b.n	800539c <_printf_float+0x1e0>
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	f104 091a 	add.w	r9, r4, #26
 80055e6:	e7f2      	b.n	80055ce <_printf_float+0x412>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4642      	mov	r2, r8
 80055ec:	e7df      	b.n	80055ae <_printf_float+0x3f2>
 80055ee:	2301      	movs	r3, #1
 80055f0:	464a      	mov	r2, r9
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f ae3a 	beq.w	8005272 <_printf_float+0xb6>
 80055fe:	f108 0801 	add.w	r8, r8, #1
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005606:	1a5b      	subs	r3, r3, r1
 8005608:	4543      	cmp	r3, r8
 800560a:	dcf0      	bgt.n	80055ee <_printf_float+0x432>
 800560c:	e6fb      	b.n	8005406 <_printf_float+0x24a>
 800560e:	f04f 0800 	mov.w	r8, #0
 8005612:	f104 0919 	add.w	r9, r4, #25
 8005616:	e7f4      	b.n	8005602 <_printf_float+0x446>

08005618 <_printf_common>:
 8005618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	4616      	mov	r6, r2
 800561e:	4699      	mov	r9, r3
 8005620:	688a      	ldr	r2, [r1, #8]
 8005622:	690b      	ldr	r3, [r1, #16]
 8005624:	4607      	mov	r7, r0
 8005626:	4293      	cmp	r3, r2
 8005628:	bfb8      	it	lt
 800562a:	4613      	movlt	r3, r2
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005632:	460c      	mov	r4, r1
 8005634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005638:	b10a      	cbz	r2, 800563e <_printf_common+0x26>
 800563a:	3301      	adds	r3, #1
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	0699      	lsls	r1, r3, #26
 8005642:	bf42      	ittt	mi
 8005644:	6833      	ldrmi	r3, [r6, #0]
 8005646:	3302      	addmi	r3, #2
 8005648:	6033      	strmi	r3, [r6, #0]
 800564a:	6825      	ldr	r5, [r4, #0]
 800564c:	f015 0506 	ands.w	r5, r5, #6
 8005650:	d106      	bne.n	8005660 <_printf_common+0x48>
 8005652:	f104 0a19 	add.w	sl, r4, #25
 8005656:	68e3      	ldr	r3, [r4, #12]
 8005658:	6832      	ldr	r2, [r6, #0]
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	42ab      	cmp	r3, r5
 800565e:	dc2b      	bgt.n	80056b8 <_printf_common+0xa0>
 8005660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005664:	1e13      	subs	r3, r2, #0
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	bf18      	it	ne
 800566a:	2301      	movne	r3, #1
 800566c:	0692      	lsls	r2, r2, #26
 800566e:	d430      	bmi.n	80056d2 <_printf_common+0xba>
 8005670:	4649      	mov	r1, r9
 8005672:	4638      	mov	r0, r7
 8005674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005678:	47c0      	blx	r8
 800567a:	3001      	adds	r0, #1
 800567c:	d023      	beq.n	80056c6 <_printf_common+0xae>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	6922      	ldr	r2, [r4, #16]
 8005682:	f003 0306 	and.w	r3, r3, #6
 8005686:	2b04      	cmp	r3, #4
 8005688:	bf14      	ite	ne
 800568a:	2500      	movne	r5, #0
 800568c:	6833      	ldreq	r3, [r6, #0]
 800568e:	f04f 0600 	mov.w	r6, #0
 8005692:	bf08      	it	eq
 8005694:	68e5      	ldreq	r5, [r4, #12]
 8005696:	f104 041a 	add.w	r4, r4, #26
 800569a:	bf08      	it	eq
 800569c:	1aed      	subeq	r5, r5, r3
 800569e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80056a2:	bf08      	it	eq
 80056a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfc4      	itt	gt
 80056ac:	1a9b      	subgt	r3, r3, r2
 80056ae:	18ed      	addgt	r5, r5, r3
 80056b0:	42b5      	cmp	r5, r6
 80056b2:	d11a      	bne.n	80056ea <_printf_common+0xd2>
 80056b4:	2000      	movs	r0, #0
 80056b6:	e008      	b.n	80056ca <_printf_common+0xb2>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4652      	mov	r2, sl
 80056bc:	4649      	mov	r1, r9
 80056be:	4638      	mov	r0, r7
 80056c0:	47c0      	blx	r8
 80056c2:	3001      	adds	r0, #1
 80056c4:	d103      	bne.n	80056ce <_printf_common+0xb6>
 80056c6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	3501      	adds	r5, #1
 80056d0:	e7c1      	b.n	8005656 <_printf_common+0x3e>
 80056d2:	2030      	movs	r0, #48	; 0x30
 80056d4:	18e1      	adds	r1, r4, r3
 80056d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e0:	4422      	add	r2, r4
 80056e2:	3302      	adds	r3, #2
 80056e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e8:	e7c2      	b.n	8005670 <_printf_common+0x58>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4622      	mov	r2, r4
 80056ee:	4649      	mov	r1, r9
 80056f0:	4638      	mov	r0, r7
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d0e6      	beq.n	80056c6 <_printf_common+0xae>
 80056f8:	3601      	adds	r6, #1
 80056fa:	e7d9      	b.n	80056b0 <_printf_common+0x98>

080056fc <_printf_i>:
 80056fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	7e0f      	ldrb	r7, [r1, #24]
 8005702:	4691      	mov	r9, r2
 8005704:	2f78      	cmp	r7, #120	; 0x78
 8005706:	4680      	mov	r8, r0
 8005708:	460c      	mov	r4, r1
 800570a:	469a      	mov	sl, r3
 800570c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800570e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005712:	d807      	bhi.n	8005724 <_printf_i+0x28>
 8005714:	2f62      	cmp	r7, #98	; 0x62
 8005716:	d80a      	bhi.n	800572e <_printf_i+0x32>
 8005718:	2f00      	cmp	r7, #0
 800571a:	f000 80d5 	beq.w	80058c8 <_printf_i+0x1cc>
 800571e:	2f58      	cmp	r7, #88	; 0x58
 8005720:	f000 80c1 	beq.w	80058a6 <_printf_i+0x1aa>
 8005724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800572c:	e03a      	b.n	80057a4 <_printf_i+0xa8>
 800572e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005732:	2b15      	cmp	r3, #21
 8005734:	d8f6      	bhi.n	8005724 <_printf_i+0x28>
 8005736:	a101      	add	r1, pc, #4	; (adr r1, 800573c <_printf_i+0x40>)
 8005738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800573c:	08005795 	.word	0x08005795
 8005740:	080057a9 	.word	0x080057a9
 8005744:	08005725 	.word	0x08005725
 8005748:	08005725 	.word	0x08005725
 800574c:	08005725 	.word	0x08005725
 8005750:	08005725 	.word	0x08005725
 8005754:	080057a9 	.word	0x080057a9
 8005758:	08005725 	.word	0x08005725
 800575c:	08005725 	.word	0x08005725
 8005760:	08005725 	.word	0x08005725
 8005764:	08005725 	.word	0x08005725
 8005768:	080058af 	.word	0x080058af
 800576c:	080057d5 	.word	0x080057d5
 8005770:	08005869 	.word	0x08005869
 8005774:	08005725 	.word	0x08005725
 8005778:	08005725 	.word	0x08005725
 800577c:	080058d1 	.word	0x080058d1
 8005780:	08005725 	.word	0x08005725
 8005784:	080057d5 	.word	0x080057d5
 8005788:	08005725 	.word	0x08005725
 800578c:	08005725 	.word	0x08005725
 8005790:	08005871 	.word	0x08005871
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0a0      	b.n	80058ea <_printf_i+0x1ee>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	682b      	ldr	r3, [r5, #0]
 80057ac:	0607      	lsls	r7, r0, #24
 80057ae:	f103 0104 	add.w	r1, r3, #4
 80057b2:	6029      	str	r1, [r5, #0]
 80057b4:	d501      	bpl.n	80057ba <_printf_i+0xbe>
 80057b6:	681e      	ldr	r6, [r3, #0]
 80057b8:	e003      	b.n	80057c2 <_printf_i+0xc6>
 80057ba:	0646      	lsls	r6, r0, #25
 80057bc:	d5fb      	bpl.n	80057b6 <_printf_i+0xba>
 80057be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	da03      	bge.n	80057ce <_printf_i+0xd2>
 80057c6:	232d      	movs	r3, #45	; 0x2d
 80057c8:	4276      	negs	r6, r6
 80057ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ce:	230a      	movs	r3, #10
 80057d0:	4859      	ldr	r0, [pc, #356]	; (8005938 <_printf_i+0x23c>)
 80057d2:	e012      	b.n	80057fa <_printf_i+0xfe>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	6820      	ldr	r0, [r4, #0]
 80057d8:	1d19      	adds	r1, r3, #4
 80057da:	6029      	str	r1, [r5, #0]
 80057dc:	0605      	lsls	r5, r0, #24
 80057de:	d501      	bpl.n	80057e4 <_printf_i+0xe8>
 80057e0:	681e      	ldr	r6, [r3, #0]
 80057e2:	e002      	b.n	80057ea <_printf_i+0xee>
 80057e4:	0641      	lsls	r1, r0, #25
 80057e6:	d5fb      	bpl.n	80057e0 <_printf_i+0xe4>
 80057e8:	881e      	ldrh	r6, [r3, #0]
 80057ea:	2f6f      	cmp	r7, #111	; 0x6f
 80057ec:	bf0c      	ite	eq
 80057ee:	2308      	moveq	r3, #8
 80057f0:	230a      	movne	r3, #10
 80057f2:	4851      	ldr	r0, [pc, #324]	; (8005938 <_printf_i+0x23c>)
 80057f4:	2100      	movs	r1, #0
 80057f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057fa:	6865      	ldr	r5, [r4, #4]
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	bfa8      	it	ge
 8005800:	6821      	ldrge	r1, [r4, #0]
 8005802:	60a5      	str	r5, [r4, #8]
 8005804:	bfa4      	itt	ge
 8005806:	f021 0104 	bicge.w	r1, r1, #4
 800580a:	6021      	strge	r1, [r4, #0]
 800580c:	b90e      	cbnz	r6, 8005812 <_printf_i+0x116>
 800580e:	2d00      	cmp	r5, #0
 8005810:	d04b      	beq.n	80058aa <_printf_i+0x1ae>
 8005812:	4615      	mov	r5, r2
 8005814:	fbb6 f1f3 	udiv	r1, r6, r3
 8005818:	fb03 6711 	mls	r7, r3, r1, r6
 800581c:	5dc7      	ldrb	r7, [r0, r7]
 800581e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005822:	4637      	mov	r7, r6
 8005824:	42bb      	cmp	r3, r7
 8005826:	460e      	mov	r6, r1
 8005828:	d9f4      	bls.n	8005814 <_printf_i+0x118>
 800582a:	2b08      	cmp	r3, #8
 800582c:	d10b      	bne.n	8005846 <_printf_i+0x14a>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	07de      	lsls	r6, r3, #31
 8005832:	d508      	bpl.n	8005846 <_printf_i+0x14a>
 8005834:	6923      	ldr	r3, [r4, #16]
 8005836:	6861      	ldr	r1, [r4, #4]
 8005838:	4299      	cmp	r1, r3
 800583a:	bfde      	ittt	le
 800583c:	2330      	movle	r3, #48	; 0x30
 800583e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005842:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005846:	1b52      	subs	r2, r2, r5
 8005848:	6122      	str	r2, [r4, #16]
 800584a:	464b      	mov	r3, r9
 800584c:	4621      	mov	r1, r4
 800584e:	4640      	mov	r0, r8
 8005850:	f8cd a000 	str.w	sl, [sp]
 8005854:	aa03      	add	r2, sp, #12
 8005856:	f7ff fedf 	bl	8005618 <_printf_common>
 800585a:	3001      	adds	r0, #1
 800585c:	d14a      	bne.n	80058f4 <_printf_i+0x1f8>
 800585e:	f04f 30ff 	mov.w	r0, #4294967295
 8005862:	b004      	add	sp, #16
 8005864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	f043 0320 	orr.w	r3, r3, #32
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	2778      	movs	r7, #120	; 0x78
 8005872:	4832      	ldr	r0, [pc, #200]	; (800593c <_printf_i+0x240>)
 8005874:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	6829      	ldr	r1, [r5, #0]
 800587c:	061f      	lsls	r7, r3, #24
 800587e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005882:	d402      	bmi.n	800588a <_printf_i+0x18e>
 8005884:	065f      	lsls	r7, r3, #25
 8005886:	bf48      	it	mi
 8005888:	b2b6      	uxthmi	r6, r6
 800588a:	07df      	lsls	r7, r3, #31
 800588c:	bf48      	it	mi
 800588e:	f043 0320 	orrmi.w	r3, r3, #32
 8005892:	6029      	str	r1, [r5, #0]
 8005894:	bf48      	it	mi
 8005896:	6023      	strmi	r3, [r4, #0]
 8005898:	b91e      	cbnz	r6, 80058a2 <_printf_i+0x1a6>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f023 0320 	bic.w	r3, r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	2310      	movs	r3, #16
 80058a4:	e7a6      	b.n	80057f4 <_printf_i+0xf8>
 80058a6:	4824      	ldr	r0, [pc, #144]	; (8005938 <_printf_i+0x23c>)
 80058a8:	e7e4      	b.n	8005874 <_printf_i+0x178>
 80058aa:	4615      	mov	r5, r2
 80058ac:	e7bd      	b.n	800582a <_printf_i+0x12e>
 80058ae:	682b      	ldr	r3, [r5, #0]
 80058b0:	6826      	ldr	r6, [r4, #0]
 80058b2:	1d18      	adds	r0, r3, #4
 80058b4:	6961      	ldr	r1, [r4, #20]
 80058b6:	6028      	str	r0, [r5, #0]
 80058b8:	0635      	lsls	r5, r6, #24
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	d501      	bpl.n	80058c2 <_printf_i+0x1c6>
 80058be:	6019      	str	r1, [r3, #0]
 80058c0:	e002      	b.n	80058c8 <_printf_i+0x1cc>
 80058c2:	0670      	lsls	r0, r6, #25
 80058c4:	d5fb      	bpl.n	80058be <_printf_i+0x1c2>
 80058c6:	8019      	strh	r1, [r3, #0]
 80058c8:	2300      	movs	r3, #0
 80058ca:	4615      	mov	r5, r2
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	e7bc      	b.n	800584a <_printf_i+0x14e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	2100      	movs	r1, #0
 80058d4:	1d1a      	adds	r2, r3, #4
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	681d      	ldr	r5, [r3, #0]
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 fc22 	bl	8006126 <memchr>
 80058e2:	b108      	cbz	r0, 80058e8 <_printf_i+0x1ec>
 80058e4:	1b40      	subs	r0, r0, r5
 80058e6:	6060      	str	r0, [r4, #4]
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	2300      	movs	r3, #0
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f2:	e7aa      	b.n	800584a <_printf_i+0x14e>
 80058f4:	462a      	mov	r2, r5
 80058f6:	4649      	mov	r1, r9
 80058f8:	4640      	mov	r0, r8
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	47d0      	blx	sl
 80058fe:	3001      	adds	r0, #1
 8005900:	d0ad      	beq.n	800585e <_printf_i+0x162>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	079b      	lsls	r3, r3, #30
 8005906:	d413      	bmi.n	8005930 <_printf_i+0x234>
 8005908:	68e0      	ldr	r0, [r4, #12]
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	4298      	cmp	r0, r3
 800590e:	bfb8      	it	lt
 8005910:	4618      	movlt	r0, r3
 8005912:	e7a6      	b.n	8005862 <_printf_i+0x166>
 8005914:	2301      	movs	r3, #1
 8005916:	4632      	mov	r2, r6
 8005918:	4649      	mov	r1, r9
 800591a:	4640      	mov	r0, r8
 800591c:	47d0      	blx	sl
 800591e:	3001      	adds	r0, #1
 8005920:	d09d      	beq.n	800585e <_printf_i+0x162>
 8005922:	3501      	adds	r5, #1
 8005924:	68e3      	ldr	r3, [r4, #12]
 8005926:	9903      	ldr	r1, [sp, #12]
 8005928:	1a5b      	subs	r3, r3, r1
 800592a:	42ab      	cmp	r3, r5
 800592c:	dcf2      	bgt.n	8005914 <_printf_i+0x218>
 800592e:	e7eb      	b.n	8005908 <_printf_i+0x20c>
 8005930:	2500      	movs	r5, #0
 8005932:	f104 0619 	add.w	r6, r4, #25
 8005936:	e7f5      	b.n	8005924 <_printf_i+0x228>
 8005938:	08008cc2 	.word	0x08008cc2
 800593c:	08008cd3 	.word	0x08008cd3

08005940 <_scanf_float>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	b087      	sub	sp, #28
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	688b      	ldr	r3, [r1, #8]
 800594a:	4617      	mov	r7, r2
 800594c:	1e5a      	subs	r2, r3, #1
 800594e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005952:	bf85      	ittet	hi
 8005954:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005958:	195b      	addhi	r3, r3, r5
 800595a:	2300      	movls	r3, #0
 800595c:	9302      	strhi	r3, [sp, #8]
 800595e:	bf88      	it	hi
 8005960:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005964:	468b      	mov	fp, r1
 8005966:	f04f 0500 	mov.w	r5, #0
 800596a:	bf8c      	ite	hi
 800596c:	608b      	strhi	r3, [r1, #8]
 800596e:	9302      	strls	r3, [sp, #8]
 8005970:	680b      	ldr	r3, [r1, #0]
 8005972:	4680      	mov	r8, r0
 8005974:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005978:	f84b 3b1c 	str.w	r3, [fp], #28
 800597c:	460c      	mov	r4, r1
 800597e:	465e      	mov	r6, fp
 8005980:	46aa      	mov	sl, r5
 8005982:	46a9      	mov	r9, r5
 8005984:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005988:	9501      	str	r5, [sp, #4]
 800598a:	68a2      	ldr	r2, [r4, #8]
 800598c:	b152      	cbz	r2, 80059a4 <_scanf_float+0x64>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b4e      	cmp	r3, #78	; 0x4e
 8005994:	d864      	bhi.n	8005a60 <_scanf_float+0x120>
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d83c      	bhi.n	8005a14 <_scanf_float+0xd4>
 800599a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800599e:	b2c8      	uxtb	r0, r1
 80059a0:	280e      	cmp	r0, #14
 80059a2:	d93a      	bls.n	8005a1a <_scanf_float+0xda>
 80059a4:	f1b9 0f00 	cmp.w	r9, #0
 80059a8:	d003      	beq.n	80059b2 <_scanf_float+0x72>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059b6:	f1ba 0f01 	cmp.w	sl, #1
 80059ba:	f200 8113 	bhi.w	8005be4 <_scanf_float+0x2a4>
 80059be:	455e      	cmp	r6, fp
 80059c0:	f200 8105 	bhi.w	8005bce <_scanf_float+0x28e>
 80059c4:	2501      	movs	r5, #1
 80059c6:	4628      	mov	r0, r5
 80059c8:	b007      	add	sp, #28
 80059ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80059d2:	2a0d      	cmp	r2, #13
 80059d4:	d8e6      	bhi.n	80059a4 <_scanf_float+0x64>
 80059d6:	a101      	add	r1, pc, #4	; (adr r1, 80059dc <_scanf_float+0x9c>)
 80059d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059dc:	08005b1b 	.word	0x08005b1b
 80059e0:	080059a5 	.word	0x080059a5
 80059e4:	080059a5 	.word	0x080059a5
 80059e8:	080059a5 	.word	0x080059a5
 80059ec:	08005b7b 	.word	0x08005b7b
 80059f0:	08005b53 	.word	0x08005b53
 80059f4:	080059a5 	.word	0x080059a5
 80059f8:	080059a5 	.word	0x080059a5
 80059fc:	08005b29 	.word	0x08005b29
 8005a00:	080059a5 	.word	0x080059a5
 8005a04:	080059a5 	.word	0x080059a5
 8005a08:	080059a5 	.word	0x080059a5
 8005a0c:	080059a5 	.word	0x080059a5
 8005a10:	08005ae1 	.word	0x08005ae1
 8005a14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a18:	e7db      	b.n	80059d2 <_scanf_float+0x92>
 8005a1a:	290e      	cmp	r1, #14
 8005a1c:	d8c2      	bhi.n	80059a4 <_scanf_float+0x64>
 8005a1e:	a001      	add	r0, pc, #4	; (adr r0, 8005a24 <_scanf_float+0xe4>)
 8005a20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a24:	08005ad3 	.word	0x08005ad3
 8005a28:	080059a5 	.word	0x080059a5
 8005a2c:	08005ad3 	.word	0x08005ad3
 8005a30:	08005b67 	.word	0x08005b67
 8005a34:	080059a5 	.word	0x080059a5
 8005a38:	08005a81 	.word	0x08005a81
 8005a3c:	08005abd 	.word	0x08005abd
 8005a40:	08005abd 	.word	0x08005abd
 8005a44:	08005abd 	.word	0x08005abd
 8005a48:	08005abd 	.word	0x08005abd
 8005a4c:	08005abd 	.word	0x08005abd
 8005a50:	08005abd 	.word	0x08005abd
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005abd 	.word	0x08005abd
 8005a5c:	08005abd 	.word	0x08005abd
 8005a60:	2b6e      	cmp	r3, #110	; 0x6e
 8005a62:	d809      	bhi.n	8005a78 <_scanf_float+0x138>
 8005a64:	2b60      	cmp	r3, #96	; 0x60
 8005a66:	d8b2      	bhi.n	80059ce <_scanf_float+0x8e>
 8005a68:	2b54      	cmp	r3, #84	; 0x54
 8005a6a:	d077      	beq.n	8005b5c <_scanf_float+0x21c>
 8005a6c:	2b59      	cmp	r3, #89	; 0x59
 8005a6e:	d199      	bne.n	80059a4 <_scanf_float+0x64>
 8005a70:	2d07      	cmp	r5, #7
 8005a72:	d197      	bne.n	80059a4 <_scanf_float+0x64>
 8005a74:	2508      	movs	r5, #8
 8005a76:	e029      	b.n	8005acc <_scanf_float+0x18c>
 8005a78:	2b74      	cmp	r3, #116	; 0x74
 8005a7a:	d06f      	beq.n	8005b5c <_scanf_float+0x21c>
 8005a7c:	2b79      	cmp	r3, #121	; 0x79
 8005a7e:	e7f6      	b.n	8005a6e <_scanf_float+0x12e>
 8005a80:	6821      	ldr	r1, [r4, #0]
 8005a82:	05c8      	lsls	r0, r1, #23
 8005a84:	d51a      	bpl.n	8005abc <_scanf_float+0x17c>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a8c:	6021      	str	r1, [r4, #0]
 8005a8e:	f109 0901 	add.w	r9, r9, #1
 8005a92:	b11b      	cbz	r3, 8005a9c <_scanf_float+0x15c>
 8005a94:	3b01      	subs	r3, #1
 8005a96:	3201      	adds	r2, #1
 8005a98:	9302      	str	r3, [sp, #8]
 8005a9a:	60a2      	str	r2, [r4, #8]
 8005a9c:	68a3      	ldr	r3, [r4, #8]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60a3      	str	r3, [r4, #8]
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	607b      	str	r3, [r7, #4]
 8005ab0:	f340 8084 	ble.w	8005bbc <_scanf_float+0x27c>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	e766      	b.n	800598a <_scanf_float+0x4a>
 8005abc:	eb1a 0f05 	cmn.w	sl, r5
 8005ac0:	f47f af70 	bne.w	80059a4 <_scanf_float+0x64>
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	f806 3b01 	strb.w	r3, [r6], #1
 8005ad0:	e7e4      	b.n	8005a9c <_scanf_float+0x15c>
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	0610      	lsls	r0, r2, #24
 8005ad6:	f57f af65 	bpl.w	80059a4 <_scanf_float+0x64>
 8005ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ade:	e7f4      	b.n	8005aca <_scanf_float+0x18a>
 8005ae0:	f1ba 0f00 	cmp.w	sl, #0
 8005ae4:	d10e      	bne.n	8005b04 <_scanf_float+0x1c4>
 8005ae6:	f1b9 0f00 	cmp.w	r9, #0
 8005aea:	d10e      	bne.n	8005b0a <_scanf_float+0x1ca>
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005af2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005af6:	d108      	bne.n	8005b0a <_scanf_float+0x1ca>
 8005af8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005afc:	f04f 0a01 	mov.w	sl, #1
 8005b00:	6022      	str	r2, [r4, #0]
 8005b02:	e7e3      	b.n	8005acc <_scanf_float+0x18c>
 8005b04:	f1ba 0f02 	cmp.w	sl, #2
 8005b08:	d055      	beq.n	8005bb6 <_scanf_float+0x276>
 8005b0a:	2d01      	cmp	r5, #1
 8005b0c:	d002      	beq.n	8005b14 <_scanf_float+0x1d4>
 8005b0e:	2d04      	cmp	r5, #4
 8005b10:	f47f af48 	bne.w	80059a4 <_scanf_float+0x64>
 8005b14:	3501      	adds	r5, #1
 8005b16:	b2ed      	uxtb	r5, r5
 8005b18:	e7d8      	b.n	8005acc <_scanf_float+0x18c>
 8005b1a:	f1ba 0f01 	cmp.w	sl, #1
 8005b1e:	f47f af41 	bne.w	80059a4 <_scanf_float+0x64>
 8005b22:	f04f 0a02 	mov.w	sl, #2
 8005b26:	e7d1      	b.n	8005acc <_scanf_float+0x18c>
 8005b28:	b97d      	cbnz	r5, 8005b4a <_scanf_float+0x20a>
 8005b2a:	f1b9 0f00 	cmp.w	r9, #0
 8005b2e:	f47f af3c 	bne.w	80059aa <_scanf_float+0x6a>
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b3c:	f47f af39 	bne.w	80059b2 <_scanf_float+0x72>
 8005b40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b44:	2501      	movs	r5, #1
 8005b46:	6022      	str	r2, [r4, #0]
 8005b48:	e7c0      	b.n	8005acc <_scanf_float+0x18c>
 8005b4a:	2d03      	cmp	r5, #3
 8005b4c:	d0e2      	beq.n	8005b14 <_scanf_float+0x1d4>
 8005b4e:	2d05      	cmp	r5, #5
 8005b50:	e7de      	b.n	8005b10 <_scanf_float+0x1d0>
 8005b52:	2d02      	cmp	r5, #2
 8005b54:	f47f af26 	bne.w	80059a4 <_scanf_float+0x64>
 8005b58:	2503      	movs	r5, #3
 8005b5a:	e7b7      	b.n	8005acc <_scanf_float+0x18c>
 8005b5c:	2d06      	cmp	r5, #6
 8005b5e:	f47f af21 	bne.w	80059a4 <_scanf_float+0x64>
 8005b62:	2507      	movs	r5, #7
 8005b64:	e7b2      	b.n	8005acc <_scanf_float+0x18c>
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	0591      	lsls	r1, r2, #22
 8005b6a:	f57f af1b 	bpl.w	80059a4 <_scanf_float+0x64>
 8005b6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b72:	6022      	str	r2, [r4, #0]
 8005b74:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b78:	e7a8      	b.n	8005acc <_scanf_float+0x18c>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b84:	d006      	beq.n	8005b94 <_scanf_float+0x254>
 8005b86:	0550      	lsls	r0, r2, #21
 8005b88:	f57f af0c 	bpl.w	80059a4 <_scanf_float+0x64>
 8005b8c:	f1b9 0f00 	cmp.w	r9, #0
 8005b90:	f43f af0f 	beq.w	80059b2 <_scanf_float+0x72>
 8005b94:	0591      	lsls	r1, r2, #22
 8005b96:	bf58      	it	pl
 8005b98:	9901      	ldrpl	r1, [sp, #4]
 8005b9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b9e:	bf58      	it	pl
 8005ba0:	eba9 0101 	subpl.w	r1, r9, r1
 8005ba4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ba8:	f04f 0900 	mov.w	r9, #0
 8005bac:	bf58      	it	pl
 8005bae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	e78a      	b.n	8005acc <_scanf_float+0x18c>
 8005bb6:	f04f 0a03 	mov.w	sl, #3
 8005bba:	e787      	b.n	8005acc <_scanf_float+0x18c>
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bc4:	4798      	blx	r3
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	f43f aedf 	beq.w	800598a <_scanf_float+0x4a>
 8005bcc:	e6ea      	b.n	80059a4 <_scanf_float+0x64>
 8005bce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bd2:	463a      	mov	r2, r7
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bda:	4798      	blx	r3
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	e6ec      	b.n	80059be <_scanf_float+0x7e>
 8005be4:	1e6b      	subs	r3, r5, #1
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d825      	bhi.n	8005c36 <_scanf_float+0x2f6>
 8005bea:	2d02      	cmp	r5, #2
 8005bec:	d836      	bhi.n	8005c5c <_scanf_float+0x31c>
 8005bee:	455e      	cmp	r6, fp
 8005bf0:	f67f aee8 	bls.w	80059c4 <_scanf_float+0x84>
 8005bf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bf8:	463a      	mov	r2, r7
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c00:	4798      	blx	r3
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	6123      	str	r3, [r4, #16]
 8005c08:	e7f1      	b.n	8005bee <_scanf_float+0x2ae>
 8005c0a:	9802      	ldr	r0, [sp, #8]
 8005c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c14:	463a      	mov	r2, r7
 8005c16:	9002      	str	r0, [sp, #8]
 8005c18:	4640      	mov	r0, r8
 8005c1a:	4798      	blx	r3
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	6123      	str	r3, [r4, #16]
 8005c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c26:	fa5f fa8a 	uxtb.w	sl, sl
 8005c2a:	f1ba 0f02 	cmp.w	sl, #2
 8005c2e:	d1ec      	bne.n	8005c0a <_scanf_float+0x2ca>
 8005c30:	3d03      	subs	r5, #3
 8005c32:	b2ed      	uxtb	r5, r5
 8005c34:	1b76      	subs	r6, r6, r5
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	05da      	lsls	r2, r3, #23
 8005c3a:	d52f      	bpl.n	8005c9c <_scanf_float+0x35c>
 8005c3c:	055b      	lsls	r3, r3, #21
 8005c3e:	d510      	bpl.n	8005c62 <_scanf_float+0x322>
 8005c40:	455e      	cmp	r6, fp
 8005c42:	f67f aebf 	bls.w	80059c4 <_scanf_float+0x84>
 8005c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c4a:	463a      	mov	r2, r7
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c52:	4798      	blx	r3
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	6123      	str	r3, [r4, #16]
 8005c5a:	e7f1      	b.n	8005c40 <_scanf_float+0x300>
 8005c5c:	46aa      	mov	sl, r5
 8005c5e:	9602      	str	r6, [sp, #8]
 8005c60:	e7df      	b.n	8005c22 <_scanf_float+0x2e2>
 8005c62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	2965      	cmp	r1, #101	; 0x65
 8005c6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c72:	6123      	str	r3, [r4, #16]
 8005c74:	d00c      	beq.n	8005c90 <_scanf_float+0x350>
 8005c76:	2945      	cmp	r1, #69	; 0x45
 8005c78:	d00a      	beq.n	8005c90 <_scanf_float+0x350>
 8005c7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c7e:	463a      	mov	r2, r7
 8005c80:	4640      	mov	r0, r8
 8005c82:	4798      	blx	r3
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	1eb5      	subs	r5, r6, #2
 8005c8e:	6123      	str	r3, [r4, #16]
 8005c90:	463a      	mov	r2, r7
 8005c92:	4640      	mov	r0, r8
 8005c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c98:	4798      	blx	r3
 8005c9a:	462e      	mov	r6, r5
 8005c9c:	6825      	ldr	r5, [r4, #0]
 8005c9e:	f015 0510 	ands.w	r5, r5, #16
 8005ca2:	d155      	bne.n	8005d50 <_scanf_float+0x410>
 8005ca4:	7035      	strb	r5, [r6, #0]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb0:	d11d      	bne.n	8005cee <_scanf_float+0x3ae>
 8005cb2:	9b01      	ldr	r3, [sp, #4]
 8005cb4:	454b      	cmp	r3, r9
 8005cb6:	eba3 0209 	sub.w	r2, r3, r9
 8005cba:	d125      	bne.n	8005d08 <_scanf_float+0x3c8>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4659      	mov	r1, fp
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	f7ff f9cd 	bl	8005060 <_strtod_r>
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	f8d4 c000 	ldr.w	ip, [r4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f01c 0f02 	tst.w	ip, #2
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	f103 0204 	add.w	r2, r3, #4
 8005cda:	d020      	beq.n	8005d1e <_scanf_float+0x3de>
 8005cdc:	9903      	ldr	r1, [sp, #12]
 8005cde:	600a      	str	r2, [r1, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	e9c3 6700 	strd	r6, r7, [r3]
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60e3      	str	r3, [r4, #12]
 8005cec:	e66b      	b.n	80059c6 <_scanf_float+0x86>
 8005cee:	9b04      	ldr	r3, [sp, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0e3      	beq.n	8005cbc <_scanf_float+0x37c>
 8005cf4:	9905      	ldr	r1, [sp, #20]
 8005cf6:	230a      	movs	r3, #10
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	3101      	adds	r1, #1
 8005cfe:	f002 fa29 	bl	8008154 <_strtol_r>
 8005d02:	9b04      	ldr	r3, [sp, #16]
 8005d04:	9e05      	ldr	r6, [sp, #20]
 8005d06:	1ac2      	subs	r2, r0, r3
 8005d08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d0c:	429e      	cmp	r6, r3
 8005d0e:	bf28      	it	cs
 8005d10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d14:	4630      	mov	r0, r6
 8005d16:	490f      	ldr	r1, [pc, #60]	; (8005d54 <_scanf_float+0x414>)
 8005d18:	f000 f8e2 	bl	8005ee0 <siprintf>
 8005d1c:	e7ce      	b.n	8005cbc <_scanf_float+0x37c>
 8005d1e:	f01c 0f04 	tst.w	ip, #4
 8005d22:	d1db      	bne.n	8005cdc <_scanf_float+0x39c>
 8005d24:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005d28:	f8cc 2000 	str.w	r2, [ip]
 8005d2c:	f8d3 8000 	ldr.w	r8, [r3]
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	f7fa fe6a 	bl	8000a0c <__aeabi_dcmpun>
 8005d38:	b128      	cbz	r0, 8005d46 <_scanf_float+0x406>
 8005d3a:	4807      	ldr	r0, [pc, #28]	; (8005d58 <_scanf_float+0x418>)
 8005d3c:	f000 fa16 	bl	800616c <nanf>
 8005d40:	f8c8 0000 	str.w	r0, [r8]
 8005d44:	e7cf      	b.n	8005ce6 <_scanf_float+0x3a6>
 8005d46:	4630      	mov	r0, r6
 8005d48:	4639      	mov	r1, r7
 8005d4a:	f7fa febd 	bl	8000ac8 <__aeabi_d2f>
 8005d4e:	e7f7      	b.n	8005d40 <_scanf_float+0x400>
 8005d50:	2500      	movs	r5, #0
 8005d52:	e638      	b.n	80059c6 <_scanf_float+0x86>
 8005d54:	08008ce4 	.word	0x08008ce4
 8005d58:	08009081 	.word	0x08009081

08005d5c <std>:
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	4604      	mov	r4, r0
 8005d62:	e9c0 3300 	strd	r3, r3, [r0]
 8005d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d6a:	6083      	str	r3, [r0, #8]
 8005d6c:	8181      	strh	r1, [r0, #12]
 8005d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d70:	81c2      	strh	r2, [r0, #14]
 8005d72:	6183      	str	r3, [r0, #24]
 8005d74:	4619      	mov	r1, r3
 8005d76:	2208      	movs	r2, #8
 8005d78:	305c      	adds	r0, #92	; 0x5c
 8005d7a:	f000 f935 	bl	8005fe8 <memset>
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <std+0x58>)
 8005d80:	6224      	str	r4, [r4, #32]
 8005d82:	6263      	str	r3, [r4, #36]	; 0x24
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <std+0x5c>)
 8005d86:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <std+0x60>)
 8005d8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <std+0x64>)
 8005d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <std+0x68>)
 8005d92:	429c      	cmp	r4, r3
 8005d94:	d006      	beq.n	8005da4 <std+0x48>
 8005d96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d9a:	4294      	cmp	r4, r2
 8005d9c:	d002      	beq.n	8005da4 <std+0x48>
 8005d9e:	33d0      	adds	r3, #208	; 0xd0
 8005da0:	429c      	cmp	r4, r3
 8005da2:	d105      	bne.n	8005db0 <std+0x54>
 8005da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	f000 b9b8 	b.w	8006120 <__retarget_lock_init_recursive>
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	bf00      	nop
 8005db4:	08005f21 	.word	0x08005f21
 8005db8:	08005f43 	.word	0x08005f43
 8005dbc:	08005f7b 	.word	0x08005f7b
 8005dc0:	08005f9f 	.word	0x08005f9f
 8005dc4:	20000338 	.word	0x20000338

08005dc8 <stdio_exit_handler>:
 8005dc8:	4a02      	ldr	r2, [pc, #8]	; (8005dd4 <stdio_exit_handler+0xc>)
 8005dca:	4903      	ldr	r1, [pc, #12]	; (8005dd8 <stdio_exit_handler+0x10>)
 8005dcc:	4803      	ldr	r0, [pc, #12]	; (8005ddc <stdio_exit_handler+0x14>)
 8005dce:	f000 b869 	b.w	8005ea4 <_fwalk_sglue>
 8005dd2:	bf00      	nop
 8005dd4:	2000000c 	.word	0x2000000c
 8005dd8:	08008529 	.word	0x08008529
 8005ddc:	20000184 	.word	0x20000184

08005de0 <cleanup_stdio>:
 8005de0:	6841      	ldr	r1, [r0, #4]
 8005de2:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <cleanup_stdio+0x34>)
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4299      	cmp	r1, r3
 8005de8:	4604      	mov	r4, r0
 8005dea:	d001      	beq.n	8005df0 <cleanup_stdio+0x10>
 8005dec:	f002 fb9c 	bl	8008528 <_fflush_r>
 8005df0:	68a1      	ldr	r1, [r4, #8]
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <cleanup_stdio+0x38>)
 8005df4:	4299      	cmp	r1, r3
 8005df6:	d002      	beq.n	8005dfe <cleanup_stdio+0x1e>
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f002 fb95 	bl	8008528 <_fflush_r>
 8005dfe:	68e1      	ldr	r1, [r4, #12]
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <cleanup_stdio+0x3c>)
 8005e02:	4299      	cmp	r1, r3
 8005e04:	d004      	beq.n	8005e10 <cleanup_stdio+0x30>
 8005e06:	4620      	mov	r0, r4
 8005e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0c:	f002 bb8c 	b.w	8008528 <_fflush_r>
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	bf00      	nop
 8005e14:	20000338 	.word	0x20000338
 8005e18:	200003a0 	.word	0x200003a0
 8005e1c:	20000408 	.word	0x20000408

08005e20 <global_stdio_init.part.0>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <global_stdio_init.part.0+0x30>)
 8005e24:	4c0b      	ldr	r4, [pc, #44]	; (8005e54 <global_stdio_init.part.0+0x34>)
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <global_stdio_init.part.0+0x38>)
 8005e28:	4620      	mov	r0, r4
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	2104      	movs	r1, #4
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f7ff ff94 	bl	8005d5c <std>
 8005e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e38:	2201      	movs	r2, #1
 8005e3a:	2109      	movs	r1, #9
 8005e3c:	f7ff ff8e 	bl	8005d5c <std>
 8005e40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e44:	2202      	movs	r2, #2
 8005e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4a:	2112      	movs	r1, #18
 8005e4c:	f7ff bf86 	b.w	8005d5c <std>
 8005e50:	20000470 	.word	0x20000470
 8005e54:	20000338 	.word	0x20000338
 8005e58:	08005dc9 	.word	0x08005dc9

08005e5c <__sfp_lock_acquire>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	; (8005e64 <__sfp_lock_acquire+0x8>)
 8005e5e:	f000 b960 	b.w	8006122 <__retarget_lock_acquire_recursive>
 8005e62:	bf00      	nop
 8005e64:	20000479 	.word	0x20000479

08005e68 <__sfp_lock_release>:
 8005e68:	4801      	ldr	r0, [pc, #4]	; (8005e70 <__sfp_lock_release+0x8>)
 8005e6a:	f000 b95b 	b.w	8006124 <__retarget_lock_release_recursive>
 8005e6e:	bf00      	nop
 8005e70:	20000479 	.word	0x20000479

08005e74 <__sinit>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4604      	mov	r4, r0
 8005e78:	f7ff fff0 	bl	8005e5c <__sfp_lock_acquire>
 8005e7c:	6a23      	ldr	r3, [r4, #32]
 8005e7e:	b11b      	cbz	r3, 8005e88 <__sinit+0x14>
 8005e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e84:	f7ff bff0 	b.w	8005e68 <__sfp_lock_release>
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <__sinit+0x28>)
 8005e8a:	6223      	str	r3, [r4, #32]
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <__sinit+0x2c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f5      	bne.n	8005e80 <__sinit+0xc>
 8005e94:	f7ff ffc4 	bl	8005e20 <global_stdio_init.part.0>
 8005e98:	e7f2      	b.n	8005e80 <__sinit+0xc>
 8005e9a:	bf00      	nop
 8005e9c:	08005de1 	.word	0x08005de1
 8005ea0:	20000470 	.word	0x20000470

08005ea4 <_fwalk_sglue>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	4688      	mov	r8, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	2600      	movs	r6, #0
 8005eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb8:	d505      	bpl.n	8005ec6 <_fwalk_sglue+0x22>
 8005eba:	6824      	ldr	r4, [r4, #0]
 8005ebc:	2c00      	cmp	r4, #0
 8005ebe:	d1f7      	bne.n	8005eb0 <_fwalk_sglue+0xc>
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d907      	bls.n	8005edc <_fwalk_sglue+0x38>
 8005ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	d003      	beq.n	8005edc <_fwalk_sglue+0x38>
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	4306      	orrs	r6, r0
 8005edc:	3568      	adds	r5, #104	; 0x68
 8005ede:	e7e9      	b.n	8005eb4 <_fwalk_sglue+0x10>

08005ee0 <siprintf>:
 8005ee0:	b40e      	push	{r1, r2, r3}
 8005ee2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ee6:	b500      	push	{lr}
 8005ee8:	b09c      	sub	sp, #112	; 0x70
 8005eea:	ab1d      	add	r3, sp, #116	; 0x74
 8005eec:	9002      	str	r0, [sp, #8]
 8005eee:	9006      	str	r0, [sp, #24]
 8005ef0:	9107      	str	r1, [sp, #28]
 8005ef2:	9104      	str	r1, [sp, #16]
 8005ef4:	4808      	ldr	r0, [pc, #32]	; (8005f18 <siprintf+0x38>)
 8005ef6:	4909      	ldr	r1, [pc, #36]	; (8005f1c <siprintf+0x3c>)
 8005ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efc:	9105      	str	r1, [sp, #20]
 8005efe:	6800      	ldr	r0, [r0, #0]
 8005f00:	a902      	add	r1, sp, #8
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	f002 f990 	bl	8008228 <_svfiprintf_r>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	9b02      	ldr	r3, [sp, #8]
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	b01c      	add	sp, #112	; 0x70
 8005f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f14:	b003      	add	sp, #12
 8005f16:	4770      	bx	lr
 8005f18:	200001d0 	.word	0x200001d0
 8005f1c:	ffff0208 	.word	0xffff0208

08005f20 <__sread>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	460c      	mov	r4, r1
 8005f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f28:	f000 f8ac 	bl	8006084 <_read_r>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	bfab      	itete	ge
 8005f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f32:	89a3      	ldrhlt	r3, [r4, #12]
 8005f34:	181b      	addge	r3, r3, r0
 8005f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f3a:	bfac      	ite	ge
 8005f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f3e:	81a3      	strhlt	r3, [r4, #12]
 8005f40:	bd10      	pop	{r4, pc}

08005f42 <__swrite>:
 8005f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f46:	461f      	mov	r7, r3
 8005f48:	898b      	ldrh	r3, [r1, #12]
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	05db      	lsls	r3, r3, #23
 8005f4e:	460c      	mov	r4, r1
 8005f50:	4616      	mov	r6, r2
 8005f52:	d505      	bpl.n	8005f60 <__swrite+0x1e>
 8005f54:	2302      	movs	r3, #2
 8005f56:	2200      	movs	r2, #0
 8005f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f5c:	f000 f880 	bl	8006060 <_lseek_r>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	4632      	mov	r2, r6
 8005f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f76:	f000 b897 	b.w	80060a8 <_write_r>

08005f7a <__sseek>:
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f82:	f000 f86d 	bl	8006060 <_lseek_r>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	bf15      	itete	ne
 8005f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f96:	81a3      	strheq	r3, [r4, #12]
 8005f98:	bf18      	it	ne
 8005f9a:	81a3      	strhne	r3, [r4, #12]
 8005f9c:	bd10      	pop	{r4, pc}

08005f9e <__sclose>:
 8005f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa2:	f000 b84d 	b.w	8006040 <_close_r>
	...

08005fa8 <_vsiprintf_r>:
 8005fa8:	b500      	push	{lr}
 8005faa:	b09b      	sub	sp, #108	; 0x6c
 8005fac:	9100      	str	r1, [sp, #0]
 8005fae:	9104      	str	r1, [sp, #16]
 8005fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fb4:	9105      	str	r1, [sp, #20]
 8005fb6:	9102      	str	r1, [sp, #8]
 8005fb8:	4905      	ldr	r1, [pc, #20]	; (8005fd0 <_vsiprintf_r+0x28>)
 8005fba:	9103      	str	r1, [sp, #12]
 8005fbc:	4669      	mov	r1, sp
 8005fbe:	f002 f933 	bl	8008228 <_svfiprintf_r>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	9b00      	ldr	r3, [sp, #0]
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	b01b      	add	sp, #108	; 0x6c
 8005fca:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fce:	bf00      	nop
 8005fd0:	ffff0208 	.word	0xffff0208

08005fd4 <vsiprintf>:
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	4601      	mov	r1, r0
 8005fda:	4802      	ldr	r0, [pc, #8]	; (8005fe4 <vsiprintf+0x10>)
 8005fdc:	6800      	ldr	r0, [r0, #0]
 8005fde:	f7ff bfe3 	b.w	8005fa8 <_vsiprintf_r>
 8005fe2:	bf00      	nop
 8005fe4:	200001d0 	.word	0x200001d0

08005fe8 <memset>:
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4402      	add	r2, r0
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <memset+0xa>
 8005ff0:	4770      	bx	lr
 8005ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff6:	e7f9      	b.n	8005fec <memset+0x4>

08005ff8 <strchr>:
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b2c9      	uxtb	r1, r1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006002:	b112      	cbz	r2, 800600a <strchr+0x12>
 8006004:	428a      	cmp	r2, r1
 8006006:	d1f9      	bne.n	8005ffc <strchr+0x4>
 8006008:	4770      	bx	lr
 800600a:	2900      	cmp	r1, #0
 800600c:	bf18      	it	ne
 800600e:	2000      	movne	r0, #0
 8006010:	4770      	bx	lr

08006012 <strncmp>:
 8006012:	b510      	push	{r4, lr}
 8006014:	b16a      	cbz	r2, 8006032 <strncmp+0x20>
 8006016:	3901      	subs	r1, #1
 8006018:	1884      	adds	r4, r0, r2
 800601a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800601e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006022:	429a      	cmp	r2, r3
 8006024:	d103      	bne.n	800602e <strncmp+0x1c>
 8006026:	42a0      	cmp	r0, r4
 8006028:	d001      	beq.n	800602e <strncmp+0x1c>
 800602a:	2a00      	cmp	r2, #0
 800602c:	d1f5      	bne.n	800601a <strncmp+0x8>
 800602e:	1ad0      	subs	r0, r2, r3
 8006030:	bd10      	pop	{r4, pc}
 8006032:	4610      	mov	r0, r2
 8006034:	e7fc      	b.n	8006030 <strncmp+0x1e>
	...

08006038 <_localeconv_r>:
 8006038:	4800      	ldr	r0, [pc, #0]	; (800603c <_localeconv_r+0x4>)
 800603a:	4770      	bx	lr
 800603c:	20000108 	.word	0x20000108

08006040 <_close_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	2300      	movs	r3, #0
 8006044:	4d05      	ldr	r5, [pc, #20]	; (800605c <_close_r+0x1c>)
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fb f860 	bl	8001110 <_close>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_close_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_close_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	20000474 	.word	0x20000474

08006060 <_lseek_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	2200      	movs	r2, #0
 800606a:	4d05      	ldr	r5, [pc, #20]	; (8006080 <_lseek_r+0x20>)
 800606c:	602a      	str	r2, [r5, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f7fb f872 	bl	8001158 <_lseek>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_lseek_r+0x1e>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_lseek_r+0x1e>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20000474 	.word	0x20000474

08006084 <_read_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4604      	mov	r4, r0
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	2200      	movs	r2, #0
 800608e:	4d05      	ldr	r5, [pc, #20]	; (80060a4 <_read_r+0x20>)
 8006090:	602a      	str	r2, [r5, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	f7fb f803 	bl	800109e <_read>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_read_r+0x1e>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_read_r+0x1e>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	20000474 	.word	0x20000474

080060a8 <_write_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4604      	mov	r4, r0
 80060ac:	4608      	mov	r0, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	2200      	movs	r2, #0
 80060b2:	4d05      	ldr	r5, [pc, #20]	; (80060c8 <_write_r+0x20>)
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7fb f80e 	bl	80010d8 <_write>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_write_r+0x1e>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_write_r+0x1e>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20000474 	.word	0x20000474

080060cc <__errno>:
 80060cc:	4b01      	ldr	r3, [pc, #4]	; (80060d4 <__errno+0x8>)
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	200001d0 	.word	0x200001d0

080060d8 <__libc_init_array>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	2600      	movs	r6, #0
 80060dc:	4d0c      	ldr	r5, [pc, #48]	; (8006110 <__libc_init_array+0x38>)
 80060de:	4c0d      	ldr	r4, [pc, #52]	; (8006114 <__libc_init_array+0x3c>)
 80060e0:	1b64      	subs	r4, r4, r5
 80060e2:	10a4      	asrs	r4, r4, #2
 80060e4:	42a6      	cmp	r6, r4
 80060e6:	d109      	bne.n	80060fc <__libc_init_array+0x24>
 80060e8:	f002 fd92 	bl	8008c10 <_init>
 80060ec:	2600      	movs	r6, #0
 80060ee:	4d0a      	ldr	r5, [pc, #40]	; (8006118 <__libc_init_array+0x40>)
 80060f0:	4c0a      	ldr	r4, [pc, #40]	; (800611c <__libc_init_array+0x44>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	42a6      	cmp	r6, r4
 80060f8:	d105      	bne.n	8006106 <__libc_init_array+0x2e>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006100:	4798      	blx	r3
 8006102:	3601      	adds	r6, #1
 8006104:	e7ee      	b.n	80060e4 <__libc_init_array+0xc>
 8006106:	f855 3b04 	ldr.w	r3, [r5], #4
 800610a:	4798      	blx	r3
 800610c:	3601      	adds	r6, #1
 800610e:	e7f2      	b.n	80060f6 <__libc_init_array+0x1e>
 8006110:	08009084 	.word	0x08009084
 8006114:	08009084 	.word	0x08009084
 8006118:	08009084 	.word	0x08009084
 800611c:	08009088 	.word	0x08009088

08006120 <__retarget_lock_init_recursive>:
 8006120:	4770      	bx	lr

08006122 <__retarget_lock_acquire_recursive>:
 8006122:	4770      	bx	lr

08006124 <__retarget_lock_release_recursive>:
 8006124:	4770      	bx	lr

08006126 <memchr>:
 8006126:	4603      	mov	r3, r0
 8006128:	b510      	push	{r4, lr}
 800612a:	b2c9      	uxtb	r1, r1
 800612c:	4402      	add	r2, r0
 800612e:	4293      	cmp	r3, r2
 8006130:	4618      	mov	r0, r3
 8006132:	d101      	bne.n	8006138 <memchr+0x12>
 8006134:	2000      	movs	r0, #0
 8006136:	e003      	b.n	8006140 <memchr+0x1a>
 8006138:	7804      	ldrb	r4, [r0, #0]
 800613a:	3301      	adds	r3, #1
 800613c:	428c      	cmp	r4, r1
 800613e:	d1f6      	bne.n	800612e <memchr+0x8>
 8006140:	bd10      	pop	{r4, pc}

08006142 <memcpy>:
 8006142:	440a      	add	r2, r1
 8006144:	4291      	cmp	r1, r2
 8006146:	f100 33ff 	add.w	r3, r0, #4294967295
 800614a:	d100      	bne.n	800614e <memcpy+0xc>
 800614c:	4770      	bx	lr
 800614e:	b510      	push	{r4, lr}
 8006150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006154:	4291      	cmp	r1, r2
 8006156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800615a:	d1f9      	bne.n	8006150 <memcpy+0xe>
 800615c:	bd10      	pop	{r4, pc}
	...

08006160 <nan>:
 8006160:	2000      	movs	r0, #0
 8006162:	4901      	ldr	r1, [pc, #4]	; (8006168 <nan+0x8>)
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	7ff80000 	.word	0x7ff80000

0800616c <nanf>:
 800616c:	4800      	ldr	r0, [pc, #0]	; (8006170 <nanf+0x4>)
 800616e:	4770      	bx	lr
 8006170:	7fc00000 	.word	0x7fc00000

08006174 <quorem>:
 8006174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	6903      	ldr	r3, [r0, #16]
 800617a:	690c      	ldr	r4, [r1, #16]
 800617c:	4607      	mov	r7, r0
 800617e:	42a3      	cmp	r3, r4
 8006180:	db7f      	blt.n	8006282 <quorem+0x10e>
 8006182:	3c01      	subs	r4, #1
 8006184:	f100 0514 	add.w	r5, r0, #20
 8006188:	f101 0814 	add.w	r8, r1, #20
 800618c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800619a:	3301      	adds	r3, #1
 800619c:	429a      	cmp	r2, r3
 800619e:	fbb2 f6f3 	udiv	r6, r2, r3
 80061a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061aa:	d331      	bcc.n	8006210 <quorem+0x9c>
 80061ac:	f04f 0e00 	mov.w	lr, #0
 80061b0:	4640      	mov	r0, r8
 80061b2:	46ac      	mov	ip, r5
 80061b4:	46f2      	mov	sl, lr
 80061b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80061ba:	b293      	uxth	r3, r2
 80061bc:	fb06 e303 	mla	r3, r6, r3, lr
 80061c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061c4:	0c1a      	lsrs	r2, r3, #16
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	fb06 220e 	mla	r2, r6, lr, r2
 80061cc:	ebaa 0303 	sub.w	r3, sl, r3
 80061d0:	f8dc a000 	ldr.w	sl, [ip]
 80061d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061d8:	fa1f fa8a 	uxth.w	sl, sl
 80061dc:	4453      	add	r3, sl
 80061de:	f8dc a000 	ldr.w	sl, [ip]
 80061e2:	b292      	uxth	r2, r2
 80061e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061f2:	4581      	cmp	r9, r0
 80061f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061f8:	f84c 3b04 	str.w	r3, [ip], #4
 80061fc:	d2db      	bcs.n	80061b6 <quorem+0x42>
 80061fe:	f855 300b 	ldr.w	r3, [r5, fp]
 8006202:	b92b      	cbnz	r3, 8006210 <quorem+0x9c>
 8006204:	9b01      	ldr	r3, [sp, #4]
 8006206:	3b04      	subs	r3, #4
 8006208:	429d      	cmp	r5, r3
 800620a:	461a      	mov	r2, r3
 800620c:	d32d      	bcc.n	800626a <quorem+0xf6>
 800620e:	613c      	str	r4, [r7, #16]
 8006210:	4638      	mov	r0, r7
 8006212:	f001 fd49 	bl	8007ca8 <__mcmp>
 8006216:	2800      	cmp	r0, #0
 8006218:	db23      	blt.n	8006262 <quorem+0xee>
 800621a:	4629      	mov	r1, r5
 800621c:	2000      	movs	r0, #0
 800621e:	3601      	adds	r6, #1
 8006220:	f858 2b04 	ldr.w	r2, [r8], #4
 8006224:	f8d1 c000 	ldr.w	ip, [r1]
 8006228:	b293      	uxth	r3, r2
 800622a:	1ac3      	subs	r3, r0, r3
 800622c:	0c12      	lsrs	r2, r2, #16
 800622e:	fa1f f08c 	uxth.w	r0, ip
 8006232:	4403      	add	r3, r0
 8006234:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800623c:	b29b      	uxth	r3, r3
 800623e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006242:	45c1      	cmp	r9, r8
 8006244:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006248:	f841 3b04 	str.w	r3, [r1], #4
 800624c:	d2e8      	bcs.n	8006220 <quorem+0xac>
 800624e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006256:	b922      	cbnz	r2, 8006262 <quorem+0xee>
 8006258:	3b04      	subs	r3, #4
 800625a:	429d      	cmp	r5, r3
 800625c:	461a      	mov	r2, r3
 800625e:	d30a      	bcc.n	8006276 <quorem+0x102>
 8006260:	613c      	str	r4, [r7, #16]
 8006262:	4630      	mov	r0, r6
 8006264:	b003      	add	sp, #12
 8006266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	3b04      	subs	r3, #4
 800626e:	2a00      	cmp	r2, #0
 8006270:	d1cd      	bne.n	800620e <quorem+0x9a>
 8006272:	3c01      	subs	r4, #1
 8006274:	e7c8      	b.n	8006208 <quorem+0x94>
 8006276:	6812      	ldr	r2, [r2, #0]
 8006278:	3b04      	subs	r3, #4
 800627a:	2a00      	cmp	r2, #0
 800627c:	d1f0      	bne.n	8006260 <quorem+0xec>
 800627e:	3c01      	subs	r4, #1
 8006280:	e7eb      	b.n	800625a <quorem+0xe6>
 8006282:	2000      	movs	r0, #0
 8006284:	e7ee      	b.n	8006264 <quorem+0xf0>
	...

08006288 <_dtoa_r>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	4616      	mov	r6, r2
 800628e:	461f      	mov	r7, r3
 8006290:	69c4      	ldr	r4, [r0, #28]
 8006292:	b099      	sub	sp, #100	; 0x64
 8006294:	4605      	mov	r5, r0
 8006296:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800629a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800629e:	b974      	cbnz	r4, 80062be <_dtoa_r+0x36>
 80062a0:	2010      	movs	r0, #16
 80062a2:	f001 f977 	bl	8007594 <malloc>
 80062a6:	4602      	mov	r2, r0
 80062a8:	61e8      	str	r0, [r5, #28]
 80062aa:	b920      	cbnz	r0, 80062b6 <_dtoa_r+0x2e>
 80062ac:	21ef      	movs	r1, #239	; 0xef
 80062ae:	4bac      	ldr	r3, [pc, #688]	; (8006560 <_dtoa_r+0x2d8>)
 80062b0:	48ac      	ldr	r0, [pc, #688]	; (8006564 <_dtoa_r+0x2dc>)
 80062b2:	f002 f98b 	bl	80085cc <__assert_func>
 80062b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062ba:	6004      	str	r4, [r0, #0]
 80062bc:	60c4      	str	r4, [r0, #12]
 80062be:	69eb      	ldr	r3, [r5, #28]
 80062c0:	6819      	ldr	r1, [r3, #0]
 80062c2:	b151      	cbz	r1, 80062da <_dtoa_r+0x52>
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	2301      	movs	r3, #1
 80062c8:	4093      	lsls	r3, r2
 80062ca:	604a      	str	r2, [r1, #4]
 80062cc:	608b      	str	r3, [r1, #8]
 80062ce:	4628      	mov	r0, r5
 80062d0:	f001 fa66 	bl	80077a0 <_Bfree>
 80062d4:	2200      	movs	r2, #0
 80062d6:	69eb      	ldr	r3, [r5, #28]
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	1e3b      	subs	r3, r7, #0
 80062dc:	bfaf      	iteee	ge
 80062de:	2300      	movge	r3, #0
 80062e0:	2201      	movlt	r2, #1
 80062e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062e6:	9305      	strlt	r3, [sp, #20]
 80062e8:	bfa8      	it	ge
 80062ea:	f8c8 3000 	strge.w	r3, [r8]
 80062ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80062f2:	4b9d      	ldr	r3, [pc, #628]	; (8006568 <_dtoa_r+0x2e0>)
 80062f4:	bfb8      	it	lt
 80062f6:	f8c8 2000 	strlt.w	r2, [r8]
 80062fa:	ea33 0309 	bics.w	r3, r3, r9
 80062fe:	d119      	bne.n	8006334 <_dtoa_r+0xac>
 8006300:	f242 730f 	movw	r3, #9999	; 0x270f
 8006304:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800630c:	4333      	orrs	r3, r6
 800630e:	f000 8589 	beq.w	8006e24 <_dtoa_r+0xb9c>
 8006312:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006314:	b953      	cbnz	r3, 800632c <_dtoa_r+0xa4>
 8006316:	4b95      	ldr	r3, [pc, #596]	; (800656c <_dtoa_r+0x2e4>)
 8006318:	e023      	b.n	8006362 <_dtoa_r+0xda>
 800631a:	4b95      	ldr	r3, [pc, #596]	; (8006570 <_dtoa_r+0x2e8>)
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	3308      	adds	r3, #8
 8006320:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	9803      	ldr	r0, [sp, #12]
 8006326:	b019      	add	sp, #100	; 0x64
 8006328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632c:	4b8f      	ldr	r3, [pc, #572]	; (800656c <_dtoa_r+0x2e4>)
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	3303      	adds	r3, #3
 8006332:	e7f5      	b.n	8006320 <_dtoa_r+0x98>
 8006334:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006338:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800633c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	f7fa fb30 	bl	80009a8 <__aeabi_dcmpeq>
 8006348:	4680      	mov	r8, r0
 800634a:	b160      	cbz	r0, 8006366 <_dtoa_r+0xde>
 800634c:	2301      	movs	r3, #1
 800634e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8562 	beq.w	8006e1e <_dtoa_r+0xb96>
 800635a:	4b86      	ldr	r3, [pc, #536]	; (8006574 <_dtoa_r+0x2ec>)
 800635c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	3b01      	subs	r3, #1
 8006362:	9303      	str	r3, [sp, #12]
 8006364:	e7de      	b.n	8006324 <_dtoa_r+0x9c>
 8006366:	ab16      	add	r3, sp, #88	; 0x58
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	ab17      	add	r3, sp, #92	; 0x5c
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4628      	mov	r0, r5
 8006370:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006374:	f001 fda8 	bl	8007ec8 <__d2b>
 8006378:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800637c:	4682      	mov	sl, r0
 800637e:	2c00      	cmp	r4, #0
 8006380:	d07e      	beq.n	8006480 <_dtoa_r+0x1f8>
 8006382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006388:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800638c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006390:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006394:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006398:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800639c:	4619      	mov	r1, r3
 800639e:	2200      	movs	r2, #0
 80063a0:	4b75      	ldr	r3, [pc, #468]	; (8006578 <_dtoa_r+0x2f0>)
 80063a2:	f7f9 fee1 	bl	8000168 <__aeabi_dsub>
 80063a6:	a368      	add	r3, pc, #416	; (adr r3, 8006548 <_dtoa_r+0x2c0>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7fa f894 	bl	80004d8 <__aeabi_dmul>
 80063b0:	a367      	add	r3, pc, #412	; (adr r3, 8006550 <_dtoa_r+0x2c8>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f7f9 fed9 	bl	800016c <__adddf3>
 80063ba:	4606      	mov	r6, r0
 80063bc:	4620      	mov	r0, r4
 80063be:	460f      	mov	r7, r1
 80063c0:	f7fa f820 	bl	8000404 <__aeabi_i2d>
 80063c4:	a364      	add	r3, pc, #400	; (adr r3, 8006558 <_dtoa_r+0x2d0>)
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	f7fa f885 	bl	80004d8 <__aeabi_dmul>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4630      	mov	r0, r6
 80063d4:	4639      	mov	r1, r7
 80063d6:	f7f9 fec9 	bl	800016c <__adddf3>
 80063da:	4606      	mov	r6, r0
 80063dc:	460f      	mov	r7, r1
 80063de:	f7fa fb2b 	bl	8000a38 <__aeabi_d2iz>
 80063e2:	2200      	movs	r2, #0
 80063e4:	4683      	mov	fp, r0
 80063e6:	2300      	movs	r3, #0
 80063e8:	4630      	mov	r0, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7fa fae6 	bl	80009bc <__aeabi_dcmplt>
 80063f0:	b148      	cbz	r0, 8006406 <_dtoa_r+0x17e>
 80063f2:	4658      	mov	r0, fp
 80063f4:	f7fa f806 	bl	8000404 <__aeabi_i2d>
 80063f8:	4632      	mov	r2, r6
 80063fa:	463b      	mov	r3, r7
 80063fc:	f7fa fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8006400:	b908      	cbnz	r0, 8006406 <_dtoa_r+0x17e>
 8006402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006406:	f1bb 0f16 	cmp.w	fp, #22
 800640a:	d857      	bhi.n	80064bc <_dtoa_r+0x234>
 800640c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006410:	4b5a      	ldr	r3, [pc, #360]	; (800657c <_dtoa_r+0x2f4>)
 8006412:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f7fa facf 	bl	80009bc <__aeabi_dcmplt>
 800641e:	2800      	cmp	r0, #0
 8006420:	d04e      	beq.n	80064c0 <_dtoa_r+0x238>
 8006422:	2300      	movs	r3, #0
 8006424:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006428:	930f      	str	r3, [sp, #60]	; 0x3c
 800642a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800642c:	1b1b      	subs	r3, r3, r4
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	bf46      	itte	mi
 8006432:	f1c3 0901 	rsbmi	r9, r3, #1
 8006436:	2300      	movmi	r3, #0
 8006438:	f04f 0900 	movpl.w	r9, #0
 800643c:	9209      	str	r2, [sp, #36]	; 0x24
 800643e:	bf48      	it	mi
 8006440:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006442:	f1bb 0f00 	cmp.w	fp, #0
 8006446:	db3d      	blt.n	80064c4 <_dtoa_r+0x23c>
 8006448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800644e:	445b      	add	r3, fp
 8006450:	9309      	str	r3, [sp, #36]	; 0x24
 8006452:	2300      	movs	r3, #0
 8006454:	930a      	str	r3, [sp, #40]	; 0x28
 8006456:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006458:	2b09      	cmp	r3, #9
 800645a:	d867      	bhi.n	800652c <_dtoa_r+0x2a4>
 800645c:	2b05      	cmp	r3, #5
 800645e:	bfc4      	itt	gt
 8006460:	3b04      	subgt	r3, #4
 8006462:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006466:	bfc8      	it	gt
 8006468:	2400      	movgt	r4, #0
 800646a:	f1a3 0302 	sub.w	r3, r3, #2
 800646e:	bfd8      	it	le
 8006470:	2401      	movle	r4, #1
 8006472:	2b03      	cmp	r3, #3
 8006474:	f200 8086 	bhi.w	8006584 <_dtoa_r+0x2fc>
 8006478:	e8df f003 	tbb	[pc, r3]
 800647c:	5637392c 	.word	0x5637392c
 8006480:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006484:	441c      	add	r4, r3
 8006486:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800648a:	2b20      	cmp	r3, #32
 800648c:	bfc1      	itttt	gt
 800648e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006492:	fa09 f903 	lslgt.w	r9, r9, r3
 8006496:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800649a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800649e:	bfd6      	itet	le
 80064a0:	f1c3 0320 	rsble	r3, r3, #32
 80064a4:	ea49 0003 	orrgt.w	r0, r9, r3
 80064a8:	fa06 f003 	lslle.w	r0, r6, r3
 80064ac:	f7f9 ff9a 	bl	80003e4 <__aeabi_ui2d>
 80064b0:	2201      	movs	r2, #1
 80064b2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80064b6:	3c01      	subs	r4, #1
 80064b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80064ba:	e76f      	b.n	800639c <_dtoa_r+0x114>
 80064bc:	2301      	movs	r3, #1
 80064be:	e7b3      	b.n	8006428 <_dtoa_r+0x1a0>
 80064c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80064c2:	e7b2      	b.n	800642a <_dtoa_r+0x1a2>
 80064c4:	f1cb 0300 	rsb	r3, fp, #0
 80064c8:	930a      	str	r3, [sp, #40]	; 0x28
 80064ca:	2300      	movs	r3, #0
 80064cc:	eba9 090b 	sub.w	r9, r9, fp
 80064d0:	930e      	str	r3, [sp, #56]	; 0x38
 80064d2:	e7c0      	b.n	8006456 <_dtoa_r+0x1ce>
 80064d4:	2300      	movs	r3, #0
 80064d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80064d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dc55      	bgt.n	800658a <_dtoa_r+0x302>
 80064de:	2301      	movs	r3, #1
 80064e0:	461a      	mov	r2, r3
 80064e2:	9306      	str	r3, [sp, #24]
 80064e4:	9308      	str	r3, [sp, #32]
 80064e6:	9223      	str	r2, [sp, #140]	; 0x8c
 80064e8:	e00b      	b.n	8006502 <_dtoa_r+0x27a>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e7f3      	b.n	80064d6 <_dtoa_r+0x24e>
 80064ee:	2300      	movs	r3, #0
 80064f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064f4:	445b      	add	r3, fp
 80064f6:	9306      	str	r3, [sp, #24]
 80064f8:	3301      	adds	r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	bfb8      	it	lt
 8006500:	2301      	movlt	r3, #1
 8006502:	2100      	movs	r1, #0
 8006504:	2204      	movs	r2, #4
 8006506:	69e8      	ldr	r0, [r5, #28]
 8006508:	f102 0614 	add.w	r6, r2, #20
 800650c:	429e      	cmp	r6, r3
 800650e:	d940      	bls.n	8006592 <_dtoa_r+0x30a>
 8006510:	6041      	str	r1, [r0, #4]
 8006512:	4628      	mov	r0, r5
 8006514:	f001 f904 	bl	8007720 <_Balloc>
 8006518:	9003      	str	r0, [sp, #12]
 800651a:	2800      	cmp	r0, #0
 800651c:	d13c      	bne.n	8006598 <_dtoa_r+0x310>
 800651e:	4602      	mov	r2, r0
 8006520:	f240 11af 	movw	r1, #431	; 0x1af
 8006524:	4b16      	ldr	r3, [pc, #88]	; (8006580 <_dtoa_r+0x2f8>)
 8006526:	e6c3      	b.n	80062b0 <_dtoa_r+0x28>
 8006528:	2301      	movs	r3, #1
 800652a:	e7e1      	b.n	80064f0 <_dtoa_r+0x268>
 800652c:	2401      	movs	r4, #1
 800652e:	2300      	movs	r3, #0
 8006530:	940b      	str	r4, [sp, #44]	; 0x2c
 8006532:	9322      	str	r3, [sp, #136]	; 0x88
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	2200      	movs	r2, #0
 800653a:	9306      	str	r3, [sp, #24]
 800653c:	9308      	str	r3, [sp, #32]
 800653e:	2312      	movs	r3, #18
 8006540:	e7d1      	b.n	80064e6 <_dtoa_r+0x25e>
 8006542:	bf00      	nop
 8006544:	f3af 8000 	nop.w
 8006548:	636f4361 	.word	0x636f4361
 800654c:	3fd287a7 	.word	0x3fd287a7
 8006550:	8b60c8b3 	.word	0x8b60c8b3
 8006554:	3fc68a28 	.word	0x3fc68a28
 8006558:	509f79fb 	.word	0x509f79fb
 800655c:	3fd34413 	.word	0x3fd34413
 8006560:	08008cfe 	.word	0x08008cfe
 8006564:	08008d15 	.word	0x08008d15
 8006568:	7ff00000 	.word	0x7ff00000
 800656c:	08008cfa 	.word	0x08008cfa
 8006570:	08008cf1 	.word	0x08008cf1
 8006574:	08008cc1 	.word	0x08008cc1
 8006578:	3ff80000 	.word	0x3ff80000
 800657c:	08008e60 	.word	0x08008e60
 8006580:	08008d6d 	.word	0x08008d6d
 8006584:	2301      	movs	r3, #1
 8006586:	930b      	str	r3, [sp, #44]	; 0x2c
 8006588:	e7d4      	b.n	8006534 <_dtoa_r+0x2ac>
 800658a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800658c:	9306      	str	r3, [sp, #24]
 800658e:	9308      	str	r3, [sp, #32]
 8006590:	e7b7      	b.n	8006502 <_dtoa_r+0x27a>
 8006592:	3101      	adds	r1, #1
 8006594:	0052      	lsls	r2, r2, #1
 8006596:	e7b7      	b.n	8006508 <_dtoa_r+0x280>
 8006598:	69eb      	ldr	r3, [r5, #28]
 800659a:	9a03      	ldr	r2, [sp, #12]
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	9b08      	ldr	r3, [sp, #32]
 80065a0:	2b0e      	cmp	r3, #14
 80065a2:	f200 80a8 	bhi.w	80066f6 <_dtoa_r+0x46e>
 80065a6:	2c00      	cmp	r4, #0
 80065a8:	f000 80a5 	beq.w	80066f6 <_dtoa_r+0x46e>
 80065ac:	f1bb 0f00 	cmp.w	fp, #0
 80065b0:	dd34      	ble.n	800661c <_dtoa_r+0x394>
 80065b2:	4b9a      	ldr	r3, [pc, #616]	; (800681c <_dtoa_r+0x594>)
 80065b4:	f00b 020f 	and.w	r2, fp, #15
 80065b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065c8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80065cc:	d016      	beq.n	80065fc <_dtoa_r+0x374>
 80065ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065d2:	4b93      	ldr	r3, [pc, #588]	; (8006820 <_dtoa_r+0x598>)
 80065d4:	2703      	movs	r7, #3
 80065d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065da:	f7fa f8a7 	bl	800072c <__aeabi_ddiv>
 80065de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065e2:	f004 040f 	and.w	r4, r4, #15
 80065e6:	4e8e      	ldr	r6, [pc, #568]	; (8006820 <_dtoa_r+0x598>)
 80065e8:	b954      	cbnz	r4, 8006600 <_dtoa_r+0x378>
 80065ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065f2:	f7fa f89b 	bl	800072c <__aeabi_ddiv>
 80065f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065fa:	e029      	b.n	8006650 <_dtoa_r+0x3c8>
 80065fc:	2702      	movs	r7, #2
 80065fe:	e7f2      	b.n	80065e6 <_dtoa_r+0x35e>
 8006600:	07e1      	lsls	r1, r4, #31
 8006602:	d508      	bpl.n	8006616 <_dtoa_r+0x38e>
 8006604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006608:	e9d6 2300 	ldrd	r2, r3, [r6]
 800660c:	f7f9 ff64 	bl	80004d8 <__aeabi_dmul>
 8006610:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006614:	3701      	adds	r7, #1
 8006616:	1064      	asrs	r4, r4, #1
 8006618:	3608      	adds	r6, #8
 800661a:	e7e5      	b.n	80065e8 <_dtoa_r+0x360>
 800661c:	f000 80a5 	beq.w	800676a <_dtoa_r+0x4e2>
 8006620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006624:	f1cb 0400 	rsb	r4, fp, #0
 8006628:	4b7c      	ldr	r3, [pc, #496]	; (800681c <_dtoa_r+0x594>)
 800662a:	f004 020f 	and.w	r2, r4, #15
 800662e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f7f9 ff4f 	bl	80004d8 <__aeabi_dmul>
 800663a:	2702      	movs	r7, #2
 800663c:	2300      	movs	r3, #0
 800663e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006642:	4e77      	ldr	r6, [pc, #476]	; (8006820 <_dtoa_r+0x598>)
 8006644:	1124      	asrs	r4, r4, #4
 8006646:	2c00      	cmp	r4, #0
 8006648:	f040 8084 	bne.w	8006754 <_dtoa_r+0x4cc>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1d2      	bne.n	80065f6 <_dtoa_r+0x36e>
 8006650:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006654:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8087 	beq.w	800676e <_dtoa_r+0x4e6>
 8006660:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006664:	2200      	movs	r2, #0
 8006666:	4b6f      	ldr	r3, [pc, #444]	; (8006824 <_dtoa_r+0x59c>)
 8006668:	f7fa f9a8 	bl	80009bc <__aeabi_dcmplt>
 800666c:	2800      	cmp	r0, #0
 800666e:	d07e      	beq.n	800676e <_dtoa_r+0x4e6>
 8006670:	9b08      	ldr	r3, [sp, #32]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d07b      	beq.n	800676e <_dtoa_r+0x4e6>
 8006676:	9b06      	ldr	r3, [sp, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	dd38      	ble.n	80066ee <_dtoa_r+0x466>
 800667c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006680:	2200      	movs	r2, #0
 8006682:	4b69      	ldr	r3, [pc, #420]	; (8006828 <_dtoa_r+0x5a0>)
 8006684:	f7f9 ff28 	bl	80004d8 <__aeabi_dmul>
 8006688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800668c:	9c06      	ldr	r4, [sp, #24]
 800668e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006692:	3701      	adds	r7, #1
 8006694:	4638      	mov	r0, r7
 8006696:	f7f9 feb5 	bl	8000404 <__aeabi_i2d>
 800669a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	2200      	movs	r2, #0
 80066a4:	4b61      	ldr	r3, [pc, #388]	; (800682c <_dtoa_r+0x5a4>)
 80066a6:	f7f9 fd61 	bl	800016c <__adddf3>
 80066aa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066b2:	9611      	str	r6, [sp, #68]	; 0x44
 80066b4:	2c00      	cmp	r4, #0
 80066b6:	d15d      	bne.n	8006774 <_dtoa_r+0x4ec>
 80066b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066bc:	2200      	movs	r2, #0
 80066be:	4b5c      	ldr	r3, [pc, #368]	; (8006830 <_dtoa_r+0x5a8>)
 80066c0:	f7f9 fd52 	bl	8000168 <__aeabi_dsub>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066cc:	4633      	mov	r3, r6
 80066ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066d0:	f7fa f992 	bl	80009f8 <__aeabi_dcmpgt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f040 8295 	bne.w	8006c04 <_dtoa_r+0x97c>
 80066da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066e4:	f7fa f96a 	bl	80009bc <__aeabi_dcmplt>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	f040 8289 	bne.w	8006c00 <_dtoa_r+0x978>
 80066ee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80066f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f2c0 8151 	blt.w	80069a0 <_dtoa_r+0x718>
 80066fe:	f1bb 0f0e 	cmp.w	fp, #14
 8006702:	f300 814d 	bgt.w	80069a0 <_dtoa_r+0x718>
 8006706:	4b45      	ldr	r3, [pc, #276]	; (800681c <_dtoa_r+0x594>)
 8006708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800670c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006710:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006714:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006716:	2b00      	cmp	r3, #0
 8006718:	f280 80da 	bge.w	80068d0 <_dtoa_r+0x648>
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f300 80d6 	bgt.w	80068d0 <_dtoa_r+0x648>
 8006724:	f040 826b 	bne.w	8006bfe <_dtoa_r+0x976>
 8006728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800672c:	2200      	movs	r2, #0
 800672e:	4b40      	ldr	r3, [pc, #256]	; (8006830 <_dtoa_r+0x5a8>)
 8006730:	f7f9 fed2 	bl	80004d8 <__aeabi_dmul>
 8006734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006738:	f7fa f954 	bl	80009e4 <__aeabi_dcmpge>
 800673c:	9c08      	ldr	r4, [sp, #32]
 800673e:	4626      	mov	r6, r4
 8006740:	2800      	cmp	r0, #0
 8006742:	f040 8241 	bne.w	8006bc8 <_dtoa_r+0x940>
 8006746:	2331      	movs	r3, #49	; 0x31
 8006748:	9f03      	ldr	r7, [sp, #12]
 800674a:	f10b 0b01 	add.w	fp, fp, #1
 800674e:	f807 3b01 	strb.w	r3, [r7], #1
 8006752:	e23d      	b.n	8006bd0 <_dtoa_r+0x948>
 8006754:	07e2      	lsls	r2, r4, #31
 8006756:	d505      	bpl.n	8006764 <_dtoa_r+0x4dc>
 8006758:	e9d6 2300 	ldrd	r2, r3, [r6]
 800675c:	f7f9 febc 	bl	80004d8 <__aeabi_dmul>
 8006760:	2301      	movs	r3, #1
 8006762:	3701      	adds	r7, #1
 8006764:	1064      	asrs	r4, r4, #1
 8006766:	3608      	adds	r6, #8
 8006768:	e76d      	b.n	8006646 <_dtoa_r+0x3be>
 800676a:	2702      	movs	r7, #2
 800676c:	e770      	b.n	8006650 <_dtoa_r+0x3c8>
 800676e:	46d8      	mov	r8, fp
 8006770:	9c08      	ldr	r4, [sp, #32]
 8006772:	e78f      	b.n	8006694 <_dtoa_r+0x40c>
 8006774:	9903      	ldr	r1, [sp, #12]
 8006776:	4b29      	ldr	r3, [pc, #164]	; (800681c <_dtoa_r+0x594>)
 8006778:	4421      	add	r1, r4
 800677a:	9112      	str	r1, [sp, #72]	; 0x48
 800677c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800677e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006782:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006786:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800678a:	2900      	cmp	r1, #0
 800678c:	d054      	beq.n	8006838 <_dtoa_r+0x5b0>
 800678e:	2000      	movs	r0, #0
 8006790:	4928      	ldr	r1, [pc, #160]	; (8006834 <_dtoa_r+0x5ac>)
 8006792:	f7f9 ffcb 	bl	800072c <__aeabi_ddiv>
 8006796:	463b      	mov	r3, r7
 8006798:	4632      	mov	r2, r6
 800679a:	f7f9 fce5 	bl	8000168 <__aeabi_dsub>
 800679e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067a2:	9f03      	ldr	r7, [sp, #12]
 80067a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a8:	f7fa f946 	bl	8000a38 <__aeabi_d2iz>
 80067ac:	4604      	mov	r4, r0
 80067ae:	f7f9 fe29 	bl	8000404 <__aeabi_i2d>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ba:	f7f9 fcd5 	bl	8000168 <__aeabi_dsub>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	3430      	adds	r4, #48	; 0x30
 80067c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067cc:	f807 4b01 	strb.w	r4, [r7], #1
 80067d0:	f7fa f8f4 	bl	80009bc <__aeabi_dcmplt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d173      	bne.n	80068c0 <_dtoa_r+0x638>
 80067d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067dc:	2000      	movs	r0, #0
 80067de:	4911      	ldr	r1, [pc, #68]	; (8006824 <_dtoa_r+0x59c>)
 80067e0:	f7f9 fcc2 	bl	8000168 <__aeabi_dsub>
 80067e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067e8:	f7fa f8e8 	bl	80009bc <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 80b6 	bne.w	800695e <_dtoa_r+0x6d6>
 80067f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067f4:	429f      	cmp	r7, r3
 80067f6:	f43f af7a 	beq.w	80066ee <_dtoa_r+0x466>
 80067fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067fe:	2200      	movs	r2, #0
 8006800:	4b09      	ldr	r3, [pc, #36]	; (8006828 <_dtoa_r+0x5a0>)
 8006802:	f7f9 fe69 	bl	80004d8 <__aeabi_dmul>
 8006806:	2200      	movs	r2, #0
 8006808:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800680c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <_dtoa_r+0x5a0>)
 8006812:	f7f9 fe61 	bl	80004d8 <__aeabi_dmul>
 8006816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800681a:	e7c3      	b.n	80067a4 <_dtoa_r+0x51c>
 800681c:	08008e60 	.word	0x08008e60
 8006820:	08008e38 	.word	0x08008e38
 8006824:	3ff00000 	.word	0x3ff00000
 8006828:	40240000 	.word	0x40240000
 800682c:	401c0000 	.word	0x401c0000
 8006830:	40140000 	.word	0x40140000
 8006834:	3fe00000 	.word	0x3fe00000
 8006838:	4630      	mov	r0, r6
 800683a:	4639      	mov	r1, r7
 800683c:	f7f9 fe4c 	bl	80004d8 <__aeabi_dmul>
 8006840:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006842:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006846:	9c03      	ldr	r4, [sp, #12]
 8006848:	9314      	str	r3, [sp, #80]	; 0x50
 800684a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800684e:	f7fa f8f3 	bl	8000a38 <__aeabi_d2iz>
 8006852:	9015      	str	r0, [sp, #84]	; 0x54
 8006854:	f7f9 fdd6 	bl	8000404 <__aeabi_i2d>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006860:	f7f9 fc82 	bl	8000168 <__aeabi_dsub>
 8006864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006866:	4606      	mov	r6, r0
 8006868:	3330      	adds	r3, #48	; 0x30
 800686a:	f804 3b01 	strb.w	r3, [r4], #1
 800686e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006870:	460f      	mov	r7, r1
 8006872:	429c      	cmp	r4, r3
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	d124      	bne.n	80068c4 <_dtoa_r+0x63c>
 800687a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800687e:	4baf      	ldr	r3, [pc, #700]	; (8006b3c <_dtoa_r+0x8b4>)
 8006880:	f7f9 fc74 	bl	800016c <__adddf3>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7fa f8b4 	bl	80009f8 <__aeabi_dcmpgt>
 8006890:	2800      	cmp	r0, #0
 8006892:	d163      	bne.n	800695c <_dtoa_r+0x6d4>
 8006894:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006898:	2000      	movs	r0, #0
 800689a:	49a8      	ldr	r1, [pc, #672]	; (8006b3c <_dtoa_r+0x8b4>)
 800689c:	f7f9 fc64 	bl	8000168 <__aeabi_dsub>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4630      	mov	r0, r6
 80068a6:	4639      	mov	r1, r7
 80068a8:	f7fa f888 	bl	80009bc <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	f43f af1e 	beq.w	80066ee <_dtoa_r+0x466>
 80068b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80068b4:	1e7b      	subs	r3, r7, #1
 80068b6:	9314      	str	r3, [sp, #80]	; 0x50
 80068b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80068bc:	2b30      	cmp	r3, #48	; 0x30
 80068be:	d0f8      	beq.n	80068b2 <_dtoa_r+0x62a>
 80068c0:	46c3      	mov	fp, r8
 80068c2:	e03b      	b.n	800693c <_dtoa_r+0x6b4>
 80068c4:	4b9e      	ldr	r3, [pc, #632]	; (8006b40 <_dtoa_r+0x8b8>)
 80068c6:	f7f9 fe07 	bl	80004d8 <__aeabi_dmul>
 80068ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ce:	e7bc      	b.n	800684a <_dtoa_r+0x5c2>
 80068d0:	9f03      	ldr	r7, [sp, #12]
 80068d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80068d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7f9 ff25 	bl	800072c <__aeabi_ddiv>
 80068e2:	f7fa f8a9 	bl	8000a38 <__aeabi_d2iz>
 80068e6:	4604      	mov	r4, r0
 80068e8:	f7f9 fd8c 	bl	8000404 <__aeabi_i2d>
 80068ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068f0:	f7f9 fdf2 	bl	80004d8 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4640      	mov	r0, r8
 80068fa:	4649      	mov	r1, r9
 80068fc:	f7f9 fc34 	bl	8000168 <__aeabi_dsub>
 8006900:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006904:	f807 6b01 	strb.w	r6, [r7], #1
 8006908:	9e03      	ldr	r6, [sp, #12]
 800690a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800690e:	1bbe      	subs	r6, r7, r6
 8006910:	45b4      	cmp	ip, r6
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	d136      	bne.n	8006986 <_dtoa_r+0x6fe>
 8006918:	f7f9 fc28 	bl	800016c <__adddf3>
 800691c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006920:	4680      	mov	r8, r0
 8006922:	4689      	mov	r9, r1
 8006924:	f7fa f868 	bl	80009f8 <__aeabi_dcmpgt>
 8006928:	bb58      	cbnz	r0, 8006982 <_dtoa_r+0x6fa>
 800692a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800692e:	4640      	mov	r0, r8
 8006930:	4649      	mov	r1, r9
 8006932:	f7fa f839 	bl	80009a8 <__aeabi_dcmpeq>
 8006936:	b108      	cbz	r0, 800693c <_dtoa_r+0x6b4>
 8006938:	07e3      	lsls	r3, r4, #31
 800693a:	d422      	bmi.n	8006982 <_dtoa_r+0x6fa>
 800693c:	4651      	mov	r1, sl
 800693e:	4628      	mov	r0, r5
 8006940:	f000 ff2e 	bl	80077a0 <_Bfree>
 8006944:	2300      	movs	r3, #0
 8006946:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006948:	703b      	strb	r3, [r7, #0]
 800694a:	f10b 0301 	add.w	r3, fp, #1
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006952:	2b00      	cmp	r3, #0
 8006954:	f43f ace6 	beq.w	8006324 <_dtoa_r+0x9c>
 8006958:	601f      	str	r7, [r3, #0]
 800695a:	e4e3      	b.n	8006324 <_dtoa_r+0x9c>
 800695c:	4627      	mov	r7, r4
 800695e:	463b      	mov	r3, r7
 8006960:	461f      	mov	r7, r3
 8006962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006966:	2a39      	cmp	r2, #57	; 0x39
 8006968:	d107      	bne.n	800697a <_dtoa_r+0x6f2>
 800696a:	9a03      	ldr	r2, [sp, #12]
 800696c:	429a      	cmp	r2, r3
 800696e:	d1f7      	bne.n	8006960 <_dtoa_r+0x6d8>
 8006970:	2230      	movs	r2, #48	; 0x30
 8006972:	9903      	ldr	r1, [sp, #12]
 8006974:	f108 0801 	add.w	r8, r8, #1
 8006978:	700a      	strb	r2, [r1, #0]
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	3201      	adds	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e79e      	b.n	80068c0 <_dtoa_r+0x638>
 8006982:	46d8      	mov	r8, fp
 8006984:	e7eb      	b.n	800695e <_dtoa_r+0x6d6>
 8006986:	2200      	movs	r2, #0
 8006988:	4b6d      	ldr	r3, [pc, #436]	; (8006b40 <_dtoa_r+0x8b8>)
 800698a:	f7f9 fda5 	bl	80004d8 <__aeabi_dmul>
 800698e:	2200      	movs	r2, #0
 8006990:	2300      	movs	r3, #0
 8006992:	4680      	mov	r8, r0
 8006994:	4689      	mov	r9, r1
 8006996:	f7fa f807 	bl	80009a8 <__aeabi_dcmpeq>
 800699a:	2800      	cmp	r0, #0
 800699c:	d09b      	beq.n	80068d6 <_dtoa_r+0x64e>
 800699e:	e7cd      	b.n	800693c <_dtoa_r+0x6b4>
 80069a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	f000 80c4 	beq.w	8006b30 <_dtoa_r+0x8a8>
 80069a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069aa:	2a01      	cmp	r2, #1
 80069ac:	f300 80a8 	bgt.w	8006b00 <_dtoa_r+0x878>
 80069b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	f000 80a0 	beq.w	8006af8 <_dtoa_r+0x870>
 80069b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069bc:	464f      	mov	r7, r9
 80069be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069c2:	2101      	movs	r1, #1
 80069c4:	441a      	add	r2, r3
 80069c6:	4628      	mov	r0, r5
 80069c8:	4499      	add	r9, r3
 80069ca:	9209      	str	r2, [sp, #36]	; 0x24
 80069cc:	f000 ffe8 	bl	80079a0 <__i2b>
 80069d0:	4606      	mov	r6, r0
 80069d2:	b15f      	cbz	r7, 80069ec <_dtoa_r+0x764>
 80069d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd08      	ble.n	80069ec <_dtoa_r+0x764>
 80069da:	42bb      	cmp	r3, r7
 80069dc:	bfa8      	it	ge
 80069de:	463b      	movge	r3, r7
 80069e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e2:	eba9 0903 	sub.w	r9, r9, r3
 80069e6:	1aff      	subs	r7, r7, r3
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	9309      	str	r3, [sp, #36]	; 0x24
 80069ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ee:	b1f3      	cbz	r3, 8006a2e <_dtoa_r+0x7a6>
 80069f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 80a0 	beq.w	8006b38 <_dtoa_r+0x8b0>
 80069f8:	2c00      	cmp	r4, #0
 80069fa:	dd10      	ble.n	8006a1e <_dtoa_r+0x796>
 80069fc:	4631      	mov	r1, r6
 80069fe:	4622      	mov	r2, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f001 f88b 	bl	8007b1c <__pow5mult>
 8006a06:	4652      	mov	r2, sl
 8006a08:	4601      	mov	r1, r0
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 ffdd 	bl	80079cc <__multiply>
 8006a12:	4680      	mov	r8, r0
 8006a14:	4651      	mov	r1, sl
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 fec2 	bl	80077a0 <_Bfree>
 8006a1c:	46c2      	mov	sl, r8
 8006a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a20:	1b1a      	subs	r2, r3, r4
 8006a22:	d004      	beq.n	8006a2e <_dtoa_r+0x7a6>
 8006a24:	4651      	mov	r1, sl
 8006a26:	4628      	mov	r0, r5
 8006a28:	f001 f878 	bl	8007b1c <__pow5mult>
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4628      	mov	r0, r5
 8006a32:	f000 ffb5 	bl	80079a0 <__i2b>
 8006a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a38:	4604      	mov	r4, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f340 8082 	ble.w	8006b44 <_dtoa_r+0x8bc>
 8006a40:	461a      	mov	r2, r3
 8006a42:	4601      	mov	r1, r0
 8006a44:	4628      	mov	r0, r5
 8006a46:	f001 f869 	bl	8007b1c <__pow5mult>
 8006a4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	dd7b      	ble.n	8006b4a <_dtoa_r+0x8c2>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a5c:	6918      	ldr	r0, [r3, #16]
 8006a5e:	f000 ff51 	bl	8007904 <__hi0bits>
 8006a62:	f1c0 0020 	rsb	r0, r0, #32
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	4418      	add	r0, r3
 8006a6a:	f010 001f 	ands.w	r0, r0, #31
 8006a6e:	f000 8092 	beq.w	8006b96 <_dtoa_r+0x90e>
 8006a72:	f1c0 0320 	rsb	r3, r0, #32
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	f340 8085 	ble.w	8006b86 <_dtoa_r+0x8fe>
 8006a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7e:	f1c0 001c 	rsb	r0, r0, #28
 8006a82:	4403      	add	r3, r0
 8006a84:	4481      	add	r9, r0
 8006a86:	4407      	add	r7, r0
 8006a88:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8a:	f1b9 0f00 	cmp.w	r9, #0
 8006a8e:	dd05      	ble.n	8006a9c <_dtoa_r+0x814>
 8006a90:	4651      	mov	r1, sl
 8006a92:	464a      	mov	r2, r9
 8006a94:	4628      	mov	r0, r5
 8006a96:	f001 f89b 	bl	8007bd0 <__lshift>
 8006a9a:	4682      	mov	sl, r0
 8006a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dd05      	ble.n	8006aae <_dtoa_r+0x826>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f001 f892 	bl	8007bd0 <__lshift>
 8006aac:	4604      	mov	r4, r0
 8006aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d072      	beq.n	8006b9a <_dtoa_r+0x912>
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4650      	mov	r0, sl
 8006ab8:	f001 f8f6 	bl	8007ca8 <__mcmp>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	da6c      	bge.n	8006b9a <_dtoa_r+0x912>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	220a      	movs	r2, #10
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 fe8c 	bl	80077e4 <__multadd>
 8006acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ace:	4682      	mov	sl, r0
 8006ad0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 81ac 	beq.w	8006e32 <_dtoa_r+0xbaa>
 8006ada:	2300      	movs	r3, #0
 8006adc:	4631      	mov	r1, r6
 8006ade:	220a      	movs	r2, #10
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f000 fe7f 	bl	80077e4 <__multadd>
 8006ae6:	9b06      	ldr	r3, [sp, #24]
 8006ae8:	4606      	mov	r6, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f300 8093 	bgt.w	8006c16 <_dtoa_r+0x98e>
 8006af0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	dc59      	bgt.n	8006baa <_dtoa_r+0x922>
 8006af6:	e08e      	b.n	8006c16 <_dtoa_r+0x98e>
 8006af8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006afa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006afe:	e75d      	b.n	80069bc <_dtoa_r+0x734>
 8006b00:	9b08      	ldr	r3, [sp, #32]
 8006b02:	1e5c      	subs	r4, r3, #1
 8006b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	bfbf      	itttt	lt
 8006b0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b0c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b0e:	1ae3      	sublt	r3, r4, r3
 8006b10:	18d2      	addlt	r2, r2, r3
 8006b12:	bfa8      	it	ge
 8006b14:	1b1c      	subge	r4, r3, r4
 8006b16:	9b08      	ldr	r3, [sp, #32]
 8006b18:	bfbe      	ittt	lt
 8006b1a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b1c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b1e:	2400      	movlt	r4, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bfb5      	itete	lt
 8006b24:	eba9 0703 	sublt.w	r7, r9, r3
 8006b28:	464f      	movge	r7, r9
 8006b2a:	2300      	movlt	r3, #0
 8006b2c:	9b08      	ldrge	r3, [sp, #32]
 8006b2e:	e747      	b.n	80069c0 <_dtoa_r+0x738>
 8006b30:	464f      	mov	r7, r9
 8006b32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b36:	e74c      	b.n	80069d2 <_dtoa_r+0x74a>
 8006b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b3a:	e773      	b.n	8006a24 <_dtoa_r+0x79c>
 8006b3c:	3fe00000 	.word	0x3fe00000
 8006b40:	40240000 	.word	0x40240000
 8006b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	dc18      	bgt.n	8006b7c <_dtoa_r+0x8f4>
 8006b4a:	9b04      	ldr	r3, [sp, #16]
 8006b4c:	b9b3      	cbnz	r3, 8006b7c <_dtoa_r+0x8f4>
 8006b4e:	9b05      	ldr	r3, [sp, #20]
 8006b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b54:	b993      	cbnz	r3, 8006b7c <_dtoa_r+0x8f4>
 8006b56:	9b05      	ldr	r3, [sp, #20]
 8006b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b5c:	0d1b      	lsrs	r3, r3, #20
 8006b5e:	051b      	lsls	r3, r3, #20
 8006b60:	b17b      	cbz	r3, 8006b82 <_dtoa_r+0x8fa>
 8006b62:	f04f 0801 	mov.w	r8, #1
 8006b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b68:	f109 0901 	add.w	r9, r9, #1
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f47f af6f 	bne.w	8006a56 <_dtoa_r+0x7ce>
 8006b78:	2001      	movs	r0, #1
 8006b7a:	e774      	b.n	8006a66 <_dtoa_r+0x7de>
 8006b7c:	f04f 0800 	mov.w	r8, #0
 8006b80:	e7f6      	b.n	8006b70 <_dtoa_r+0x8e8>
 8006b82:	4698      	mov	r8, r3
 8006b84:	e7f4      	b.n	8006b70 <_dtoa_r+0x8e8>
 8006b86:	d080      	beq.n	8006a8a <_dtoa_r+0x802>
 8006b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b8a:	331c      	adds	r3, #28
 8006b8c:	441a      	add	r2, r3
 8006b8e:	4499      	add	r9, r3
 8006b90:	441f      	add	r7, r3
 8006b92:	9209      	str	r2, [sp, #36]	; 0x24
 8006b94:	e779      	b.n	8006a8a <_dtoa_r+0x802>
 8006b96:	4603      	mov	r3, r0
 8006b98:	e7f6      	b.n	8006b88 <_dtoa_r+0x900>
 8006b9a:	9b08      	ldr	r3, [sp, #32]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dc34      	bgt.n	8006c0a <_dtoa_r+0x982>
 8006ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	dd31      	ble.n	8006c0a <_dtoa_r+0x982>
 8006ba6:	9b08      	ldr	r3, [sp, #32]
 8006ba8:	9306      	str	r3, [sp, #24]
 8006baa:	9b06      	ldr	r3, [sp, #24]
 8006bac:	b963      	cbnz	r3, 8006bc8 <_dtoa_r+0x940>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	2205      	movs	r2, #5
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 fe16 	bl	80077e4 <__multadd>
 8006bb8:	4601      	mov	r1, r0
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	f001 f873 	bl	8007ca8 <__mcmp>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f73f adbf 	bgt.w	8006746 <_dtoa_r+0x4be>
 8006bc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bca:	9f03      	ldr	r7, [sp, #12]
 8006bcc:	ea6f 0b03 	mvn.w	fp, r3
 8006bd0:	f04f 0800 	mov.w	r8, #0
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 fde2 	bl	80077a0 <_Bfree>
 8006bdc:	2e00      	cmp	r6, #0
 8006bde:	f43f aead 	beq.w	800693c <_dtoa_r+0x6b4>
 8006be2:	f1b8 0f00 	cmp.w	r8, #0
 8006be6:	d005      	beq.n	8006bf4 <_dtoa_r+0x96c>
 8006be8:	45b0      	cmp	r8, r6
 8006bea:	d003      	beq.n	8006bf4 <_dtoa_r+0x96c>
 8006bec:	4641      	mov	r1, r8
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 fdd6 	bl	80077a0 <_Bfree>
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 fdd2 	bl	80077a0 <_Bfree>
 8006bfc:	e69e      	b.n	800693c <_dtoa_r+0x6b4>
 8006bfe:	2400      	movs	r4, #0
 8006c00:	4626      	mov	r6, r4
 8006c02:	e7e1      	b.n	8006bc8 <_dtoa_r+0x940>
 8006c04:	46c3      	mov	fp, r8
 8006c06:	4626      	mov	r6, r4
 8006c08:	e59d      	b.n	8006746 <_dtoa_r+0x4be>
 8006c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80c8 	beq.w	8006da2 <_dtoa_r+0xb1a>
 8006c12:	9b08      	ldr	r3, [sp, #32]
 8006c14:	9306      	str	r3, [sp, #24]
 8006c16:	2f00      	cmp	r7, #0
 8006c18:	dd05      	ble.n	8006c26 <_dtoa_r+0x99e>
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	463a      	mov	r2, r7
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 ffd6 	bl	8007bd0 <__lshift>
 8006c24:	4606      	mov	r6, r0
 8006c26:	f1b8 0f00 	cmp.w	r8, #0
 8006c2a:	d05b      	beq.n	8006ce4 <_dtoa_r+0xa5c>
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	6871      	ldr	r1, [r6, #4]
 8006c30:	f000 fd76 	bl	8007720 <_Balloc>
 8006c34:	4607      	mov	r7, r0
 8006c36:	b928      	cbnz	r0, 8006c44 <_dtoa_r+0x9bc>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c3e:	4b81      	ldr	r3, [pc, #516]	; (8006e44 <_dtoa_r+0xbbc>)
 8006c40:	f7ff bb36 	b.w	80062b0 <_dtoa_r+0x28>
 8006c44:	6932      	ldr	r2, [r6, #16]
 8006c46:	f106 010c 	add.w	r1, r6, #12
 8006c4a:	3202      	adds	r2, #2
 8006c4c:	0092      	lsls	r2, r2, #2
 8006c4e:	300c      	adds	r0, #12
 8006c50:	f7ff fa77 	bl	8006142 <memcpy>
 8006c54:	2201      	movs	r2, #1
 8006c56:	4639      	mov	r1, r7
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 ffb9 	bl	8007bd0 <__lshift>
 8006c5e:	46b0      	mov	r8, r6
 8006c60:	4606      	mov	r6, r0
 8006c62:	9b03      	ldr	r3, [sp, #12]
 8006c64:	9a03      	ldr	r2, [sp, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	9308      	str	r3, [sp, #32]
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c70:	9b04      	ldr	r3, [sp, #16]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	930a      	str	r3, [sp, #40]	; 0x28
 8006c78:	9b08      	ldr	r3, [sp, #32]
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	4650      	mov	r0, sl
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	f7ff fa77 	bl	8006174 <quorem>
 8006c86:	4641      	mov	r1, r8
 8006c88:	9006      	str	r0, [sp, #24]
 8006c8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c8e:	4650      	mov	r0, sl
 8006c90:	f001 f80a 	bl	8007ca8 <__mcmp>
 8006c94:	4632      	mov	r2, r6
 8006c96:	9009      	str	r0, [sp, #36]	; 0x24
 8006c98:	4621      	mov	r1, r4
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f001 f820 	bl	8007ce0 <__mdiff>
 8006ca0:	68c2      	ldr	r2, [r0, #12]
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	bb02      	cbnz	r2, 8006ce8 <_dtoa_r+0xa60>
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	4650      	mov	r0, sl
 8006caa:	f000 fffd 	bl	8007ca8 <__mcmp>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	920c      	str	r2, [sp, #48]	; 0x30
 8006cb6:	f000 fd73 	bl	80077a0 <_Bfree>
 8006cba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cbe:	9f08      	ldr	r7, [sp, #32]
 8006cc0:	ea43 0102 	orr.w	r1, r3, r2
 8006cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc6:	4319      	orrs	r1, r3
 8006cc8:	d110      	bne.n	8006cec <_dtoa_r+0xa64>
 8006cca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cce:	d029      	beq.n	8006d24 <_dtoa_r+0xa9c>
 8006cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd02      	ble.n	8006cdc <_dtoa_r+0xa54>
 8006cd6:	9b06      	ldr	r3, [sp, #24]
 8006cd8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006cdc:	9b04      	ldr	r3, [sp, #16]
 8006cde:	f883 9000 	strb.w	r9, [r3]
 8006ce2:	e777      	b.n	8006bd4 <_dtoa_r+0x94c>
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	e7ba      	b.n	8006c5e <_dtoa_r+0x9d6>
 8006ce8:	2201      	movs	r2, #1
 8006cea:	e7e1      	b.n	8006cb0 <_dtoa_r+0xa28>
 8006cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	db04      	blt.n	8006cfc <_dtoa_r+0xa74>
 8006cf2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	d120      	bne.n	8006d3e <_dtoa_r+0xab6>
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	dded      	ble.n	8006cdc <_dtoa_r+0xa54>
 8006d00:	4651      	mov	r1, sl
 8006d02:	2201      	movs	r2, #1
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 ff63 	bl	8007bd0 <__lshift>
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	f000 ffcb 	bl	8007ca8 <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	dc03      	bgt.n	8006d1e <_dtoa_r+0xa96>
 8006d16:	d1e1      	bne.n	8006cdc <_dtoa_r+0xa54>
 8006d18:	f019 0f01 	tst.w	r9, #1
 8006d1c:	d0de      	beq.n	8006cdc <_dtoa_r+0xa54>
 8006d1e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d22:	d1d8      	bne.n	8006cd6 <_dtoa_r+0xa4e>
 8006d24:	2339      	movs	r3, #57	; 0x39
 8006d26:	9a04      	ldr	r2, [sp, #16]
 8006d28:	7013      	strb	r3, [r2, #0]
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	461f      	mov	r7, r3
 8006d2e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	2a39      	cmp	r2, #57	; 0x39
 8006d36:	d06b      	beq.n	8006e10 <_dtoa_r+0xb88>
 8006d38:	3201      	adds	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	e74a      	b.n	8006bd4 <_dtoa_r+0x94c>
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	dd07      	ble.n	8006d52 <_dtoa_r+0xaca>
 8006d42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d46:	d0ed      	beq.n	8006d24 <_dtoa_r+0xa9c>
 8006d48:	9a04      	ldr	r2, [sp, #16]
 8006d4a:	f109 0301 	add.w	r3, r9, #1
 8006d4e:	7013      	strb	r3, [r2, #0]
 8006d50:	e740      	b.n	8006bd4 <_dtoa_r+0x94c>
 8006d52:	9b08      	ldr	r3, [sp, #32]
 8006d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d56:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d042      	beq.n	8006de4 <_dtoa_r+0xb5c>
 8006d5e:	4651      	mov	r1, sl
 8006d60:	2300      	movs	r3, #0
 8006d62:	220a      	movs	r2, #10
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 fd3d 	bl	80077e4 <__multadd>
 8006d6a:	45b0      	cmp	r8, r6
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	f04f 020a 	mov.w	r2, #10
 8006d76:	4641      	mov	r1, r8
 8006d78:	4628      	mov	r0, r5
 8006d7a:	d107      	bne.n	8006d8c <_dtoa_r+0xb04>
 8006d7c:	f000 fd32 	bl	80077e4 <__multadd>
 8006d80:	4680      	mov	r8, r0
 8006d82:	4606      	mov	r6, r0
 8006d84:	9b08      	ldr	r3, [sp, #32]
 8006d86:	3301      	adds	r3, #1
 8006d88:	9308      	str	r3, [sp, #32]
 8006d8a:	e775      	b.n	8006c78 <_dtoa_r+0x9f0>
 8006d8c:	f000 fd2a 	bl	80077e4 <__multadd>
 8006d90:	4631      	mov	r1, r6
 8006d92:	4680      	mov	r8, r0
 8006d94:	2300      	movs	r3, #0
 8006d96:	220a      	movs	r2, #10
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 fd23 	bl	80077e4 <__multadd>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	e7f0      	b.n	8006d84 <_dtoa_r+0xafc>
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	9306      	str	r3, [sp, #24]
 8006da6:	9f03      	ldr	r7, [sp, #12]
 8006da8:	4621      	mov	r1, r4
 8006daa:	4650      	mov	r0, sl
 8006dac:	f7ff f9e2 	bl	8006174 <quorem>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006db6:	f807 9b01 	strb.w	r9, [r7], #1
 8006dba:	1afa      	subs	r2, r7, r3
 8006dbc:	9b06      	ldr	r3, [sp, #24]
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	dd07      	ble.n	8006dd2 <_dtoa_r+0xb4a>
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	220a      	movs	r2, #10
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 fd0b 	bl	80077e4 <__multadd>
 8006dce:	4682      	mov	sl, r0
 8006dd0:	e7ea      	b.n	8006da8 <_dtoa_r+0xb20>
 8006dd2:	9b06      	ldr	r3, [sp, #24]
 8006dd4:	f04f 0800 	mov.w	r8, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bfcc      	ite	gt
 8006ddc:	461f      	movgt	r7, r3
 8006dde:	2701      	movle	r7, #1
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	441f      	add	r7, r3
 8006de4:	4651      	mov	r1, sl
 8006de6:	2201      	movs	r2, #1
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 fef1 	bl	8007bd0 <__lshift>
 8006dee:	4621      	mov	r1, r4
 8006df0:	4682      	mov	sl, r0
 8006df2:	f000 ff59 	bl	8007ca8 <__mcmp>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	dc97      	bgt.n	8006d2a <_dtoa_r+0xaa2>
 8006dfa:	d102      	bne.n	8006e02 <_dtoa_r+0xb7a>
 8006dfc:	f019 0f01 	tst.w	r9, #1
 8006e00:	d193      	bne.n	8006d2a <_dtoa_r+0xaa2>
 8006e02:	463b      	mov	r3, r7
 8006e04:	461f      	mov	r7, r3
 8006e06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e0a:	2a30      	cmp	r2, #48	; 0x30
 8006e0c:	d0fa      	beq.n	8006e04 <_dtoa_r+0xb7c>
 8006e0e:	e6e1      	b.n	8006bd4 <_dtoa_r+0x94c>
 8006e10:	9a03      	ldr	r2, [sp, #12]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d18a      	bne.n	8006d2c <_dtoa_r+0xaa4>
 8006e16:	2331      	movs	r3, #49	; 0x31
 8006e18:	f10b 0b01 	add.w	fp, fp, #1
 8006e1c:	e797      	b.n	8006d4e <_dtoa_r+0xac6>
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <_dtoa_r+0xbc0>)
 8006e20:	f7ff ba9f 	b.w	8006362 <_dtoa_r+0xda>
 8006e24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f47f aa77 	bne.w	800631a <_dtoa_r+0x92>
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <_dtoa_r+0xbc4>)
 8006e2e:	f7ff ba98 	b.w	8006362 <_dtoa_r+0xda>
 8006e32:	9b06      	ldr	r3, [sp, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dcb6      	bgt.n	8006da6 <_dtoa_r+0xb1e>
 8006e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	f73f aeb5 	bgt.w	8006baa <_dtoa_r+0x922>
 8006e40:	e7b1      	b.n	8006da6 <_dtoa_r+0xb1e>
 8006e42:	bf00      	nop
 8006e44:	08008d6d 	.word	0x08008d6d
 8006e48:	08008cc0 	.word	0x08008cc0
 8006e4c:	08008cf1 	.word	0x08008cf1

08006e50 <_free_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4605      	mov	r5, r0
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d040      	beq.n	8006eda <_free_r+0x8a>
 8006e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5c:	1f0c      	subs	r4, r1, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfb8      	it	lt
 8006e62:	18e4      	addlt	r4, r4, r3
 8006e64:	f000 fc50 	bl	8007708 <__malloc_lock>
 8006e68:	4a1c      	ldr	r2, [pc, #112]	; (8006edc <_free_r+0x8c>)
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	b933      	cbnz	r3, 8006e7c <_free_r+0x2c>
 8006e6e:	6063      	str	r3, [r4, #4]
 8006e70:	6014      	str	r4, [r2, #0]
 8006e72:	4628      	mov	r0, r5
 8006e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e78:	f000 bc4c 	b.w	8007714 <__malloc_unlock>
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d908      	bls.n	8006e92 <_free_r+0x42>
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	1821      	adds	r1, r4, r0
 8006e84:	428b      	cmp	r3, r1
 8006e86:	bf01      	itttt	eq
 8006e88:	6819      	ldreq	r1, [r3, #0]
 8006e8a:	685b      	ldreq	r3, [r3, #4]
 8006e8c:	1809      	addeq	r1, r1, r0
 8006e8e:	6021      	streq	r1, [r4, #0]
 8006e90:	e7ed      	b.n	8006e6e <_free_r+0x1e>
 8006e92:	461a      	mov	r2, r3
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	b10b      	cbz	r3, 8006e9c <_free_r+0x4c>
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d9fa      	bls.n	8006e92 <_free_r+0x42>
 8006e9c:	6811      	ldr	r1, [r2, #0]
 8006e9e:	1850      	adds	r0, r2, r1
 8006ea0:	42a0      	cmp	r0, r4
 8006ea2:	d10b      	bne.n	8006ebc <_free_r+0x6c>
 8006ea4:	6820      	ldr	r0, [r4, #0]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	1850      	adds	r0, r2, r1
 8006eaa:	4283      	cmp	r3, r0
 8006eac:	6011      	str	r1, [r2, #0]
 8006eae:	d1e0      	bne.n	8006e72 <_free_r+0x22>
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	4408      	add	r0, r1
 8006eb6:	6010      	str	r0, [r2, #0]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	e7da      	b.n	8006e72 <_free_r+0x22>
 8006ebc:	d902      	bls.n	8006ec4 <_free_r+0x74>
 8006ebe:	230c      	movs	r3, #12
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	e7d6      	b.n	8006e72 <_free_r+0x22>
 8006ec4:	6820      	ldr	r0, [r4, #0]
 8006ec6:	1821      	adds	r1, r4, r0
 8006ec8:	428b      	cmp	r3, r1
 8006eca:	bf01      	itttt	eq
 8006ecc:	6819      	ldreq	r1, [r3, #0]
 8006ece:	685b      	ldreq	r3, [r3, #4]
 8006ed0:	1809      	addeq	r1, r1, r0
 8006ed2:	6021      	streq	r1, [r4, #0]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	6054      	str	r4, [r2, #4]
 8006ed8:	e7cb      	b.n	8006e72 <_free_r+0x22>
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	2000047c 	.word	0x2000047c

08006ee0 <rshift>:
 8006ee0:	6903      	ldr	r3, [r0, #16]
 8006ee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ee6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006eea:	f100 0414 	add.w	r4, r0, #20
 8006eee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006ef2:	dd46      	ble.n	8006f82 <rshift+0xa2>
 8006ef4:	f011 011f 	ands.w	r1, r1, #31
 8006ef8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006efc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f00:	d10c      	bne.n	8006f1c <rshift+0x3c>
 8006f02:	4629      	mov	r1, r5
 8006f04:	f100 0710 	add.w	r7, r0, #16
 8006f08:	42b1      	cmp	r1, r6
 8006f0a:	d335      	bcc.n	8006f78 <rshift+0x98>
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	1eea      	subs	r2, r5, #3
 8006f12:	4296      	cmp	r6, r2
 8006f14:	bf38      	it	cc
 8006f16:	2300      	movcc	r3, #0
 8006f18:	4423      	add	r3, r4
 8006f1a:	e015      	b.n	8006f48 <rshift+0x68>
 8006f1c:	46a1      	mov	r9, r4
 8006f1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006f22:	f1c1 0820 	rsb	r8, r1, #32
 8006f26:	40cf      	lsrs	r7, r1
 8006f28:	f105 0e04 	add.w	lr, r5, #4
 8006f2c:	4576      	cmp	r6, lr
 8006f2e:	46f4      	mov	ip, lr
 8006f30:	d816      	bhi.n	8006f60 <rshift+0x80>
 8006f32:	1a9a      	subs	r2, r3, r2
 8006f34:	0092      	lsls	r2, r2, #2
 8006f36:	3a04      	subs	r2, #4
 8006f38:	3501      	adds	r5, #1
 8006f3a:	42ae      	cmp	r6, r5
 8006f3c:	bf38      	it	cc
 8006f3e:	2200      	movcc	r2, #0
 8006f40:	18a3      	adds	r3, r4, r2
 8006f42:	50a7      	str	r7, [r4, r2]
 8006f44:	b107      	cbz	r7, 8006f48 <rshift+0x68>
 8006f46:	3304      	adds	r3, #4
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	eba3 0204 	sub.w	r2, r3, r4
 8006f4e:	bf08      	it	eq
 8006f50:	2300      	moveq	r3, #0
 8006f52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006f56:	6102      	str	r2, [r0, #16]
 8006f58:	bf08      	it	eq
 8006f5a:	6143      	streq	r3, [r0, #20]
 8006f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f60:	f8dc c000 	ldr.w	ip, [ip]
 8006f64:	fa0c fc08 	lsl.w	ip, ip, r8
 8006f68:	ea4c 0707 	orr.w	r7, ip, r7
 8006f6c:	f849 7b04 	str.w	r7, [r9], #4
 8006f70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f74:	40cf      	lsrs	r7, r1
 8006f76:	e7d9      	b.n	8006f2c <rshift+0x4c>
 8006f78:	f851 cb04 	ldr.w	ip, [r1], #4
 8006f7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006f80:	e7c2      	b.n	8006f08 <rshift+0x28>
 8006f82:	4623      	mov	r3, r4
 8006f84:	e7e0      	b.n	8006f48 <rshift+0x68>

08006f86 <__hexdig_fun>:
 8006f86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006f8a:	2b09      	cmp	r3, #9
 8006f8c:	d802      	bhi.n	8006f94 <__hexdig_fun+0xe>
 8006f8e:	3820      	subs	r0, #32
 8006f90:	b2c0      	uxtb	r0, r0
 8006f92:	4770      	bx	lr
 8006f94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	d801      	bhi.n	8006fa0 <__hexdig_fun+0x1a>
 8006f9c:	3847      	subs	r0, #71	; 0x47
 8006f9e:	e7f7      	b.n	8006f90 <__hexdig_fun+0xa>
 8006fa0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006fa4:	2b05      	cmp	r3, #5
 8006fa6:	d801      	bhi.n	8006fac <__hexdig_fun+0x26>
 8006fa8:	3827      	subs	r0, #39	; 0x27
 8006faa:	e7f1      	b.n	8006f90 <__hexdig_fun+0xa>
 8006fac:	2000      	movs	r0, #0
 8006fae:	4770      	bx	lr

08006fb0 <__gethex>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	4681      	mov	r9, r0
 8006fb6:	468a      	mov	sl, r1
 8006fb8:	4617      	mov	r7, r2
 8006fba:	680a      	ldr	r2, [r1, #0]
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	f102 0b02 	add.w	fp, r2, #2
 8006fc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006fc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	32fe      	adds	r2, #254	; 0xfe
 8006fce:	eb02 030b 	add.w	r3, r2, fp
 8006fd2:	46d8      	mov	r8, fp
 8006fd4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	2830      	cmp	r0, #48	; 0x30
 8006fdc:	d0f7      	beq.n	8006fce <__gethex+0x1e>
 8006fde:	f7ff ffd2 	bl	8006f86 <__hexdig_fun>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d138      	bne.n	800705a <__gethex+0xaa>
 8006fe8:	2201      	movs	r2, #1
 8006fea:	4640      	mov	r0, r8
 8006fec:	49a7      	ldr	r1, [pc, #668]	; (800728c <__gethex+0x2dc>)
 8006fee:	f7ff f810 	bl	8006012 <strncmp>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d169      	bne.n	80070cc <__gethex+0x11c>
 8006ff8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006ffc:	465d      	mov	r5, fp
 8006ffe:	f7ff ffc2 	bl	8006f86 <__hexdig_fun>
 8007002:	2800      	cmp	r0, #0
 8007004:	d064      	beq.n	80070d0 <__gethex+0x120>
 8007006:	465a      	mov	r2, fp
 8007008:	7810      	ldrb	r0, [r2, #0]
 800700a:	4690      	mov	r8, r2
 800700c:	2830      	cmp	r0, #48	; 0x30
 800700e:	f102 0201 	add.w	r2, r2, #1
 8007012:	d0f9      	beq.n	8007008 <__gethex+0x58>
 8007014:	f7ff ffb7 	bl	8006f86 <__hexdig_fun>
 8007018:	2301      	movs	r3, #1
 800701a:	fab0 f480 	clz	r4, r0
 800701e:	465e      	mov	r6, fp
 8007020:	0964      	lsrs	r4, r4, #5
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	4642      	mov	r2, r8
 8007026:	4615      	mov	r5, r2
 8007028:	7828      	ldrb	r0, [r5, #0]
 800702a:	3201      	adds	r2, #1
 800702c:	f7ff ffab 	bl	8006f86 <__hexdig_fun>
 8007030:	2800      	cmp	r0, #0
 8007032:	d1f8      	bne.n	8007026 <__gethex+0x76>
 8007034:	2201      	movs	r2, #1
 8007036:	4628      	mov	r0, r5
 8007038:	4994      	ldr	r1, [pc, #592]	; (800728c <__gethex+0x2dc>)
 800703a:	f7fe ffea 	bl	8006012 <strncmp>
 800703e:	b978      	cbnz	r0, 8007060 <__gethex+0xb0>
 8007040:	b946      	cbnz	r6, 8007054 <__gethex+0xa4>
 8007042:	1c6e      	adds	r6, r5, #1
 8007044:	4632      	mov	r2, r6
 8007046:	4615      	mov	r5, r2
 8007048:	7828      	ldrb	r0, [r5, #0]
 800704a:	3201      	adds	r2, #1
 800704c:	f7ff ff9b 	bl	8006f86 <__hexdig_fun>
 8007050:	2800      	cmp	r0, #0
 8007052:	d1f8      	bne.n	8007046 <__gethex+0x96>
 8007054:	1b73      	subs	r3, r6, r5
 8007056:	009e      	lsls	r6, r3, #2
 8007058:	e004      	b.n	8007064 <__gethex+0xb4>
 800705a:	2400      	movs	r4, #0
 800705c:	4626      	mov	r6, r4
 800705e:	e7e1      	b.n	8007024 <__gethex+0x74>
 8007060:	2e00      	cmp	r6, #0
 8007062:	d1f7      	bne.n	8007054 <__gethex+0xa4>
 8007064:	782b      	ldrb	r3, [r5, #0]
 8007066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800706a:	2b50      	cmp	r3, #80	; 0x50
 800706c:	d13d      	bne.n	80070ea <__gethex+0x13a>
 800706e:	786b      	ldrb	r3, [r5, #1]
 8007070:	2b2b      	cmp	r3, #43	; 0x2b
 8007072:	d02f      	beq.n	80070d4 <__gethex+0x124>
 8007074:	2b2d      	cmp	r3, #45	; 0x2d
 8007076:	d031      	beq.n	80070dc <__gethex+0x12c>
 8007078:	f04f 0b00 	mov.w	fp, #0
 800707c:	1c69      	adds	r1, r5, #1
 800707e:	7808      	ldrb	r0, [r1, #0]
 8007080:	f7ff ff81 	bl	8006f86 <__hexdig_fun>
 8007084:	1e42      	subs	r2, r0, #1
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	2a18      	cmp	r2, #24
 800708a:	d82e      	bhi.n	80070ea <__gethex+0x13a>
 800708c:	f1a0 0210 	sub.w	r2, r0, #16
 8007090:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007094:	f7ff ff77 	bl	8006f86 <__hexdig_fun>
 8007098:	f100 3cff 	add.w	ip, r0, #4294967295
 800709c:	fa5f fc8c 	uxtb.w	ip, ip
 80070a0:	f1bc 0f18 	cmp.w	ip, #24
 80070a4:	d91d      	bls.n	80070e2 <__gethex+0x132>
 80070a6:	f1bb 0f00 	cmp.w	fp, #0
 80070aa:	d000      	beq.n	80070ae <__gethex+0xfe>
 80070ac:	4252      	negs	r2, r2
 80070ae:	4416      	add	r6, r2
 80070b0:	f8ca 1000 	str.w	r1, [sl]
 80070b4:	b1dc      	cbz	r4, 80070ee <__gethex+0x13e>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bf14      	ite	ne
 80070bc:	f04f 0800 	movne.w	r8, #0
 80070c0:	f04f 0806 	moveq.w	r8, #6
 80070c4:	4640      	mov	r0, r8
 80070c6:	b005      	add	sp, #20
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	4645      	mov	r5, r8
 80070ce:	4626      	mov	r6, r4
 80070d0:	2401      	movs	r4, #1
 80070d2:	e7c7      	b.n	8007064 <__gethex+0xb4>
 80070d4:	f04f 0b00 	mov.w	fp, #0
 80070d8:	1ca9      	adds	r1, r5, #2
 80070da:	e7d0      	b.n	800707e <__gethex+0xce>
 80070dc:	f04f 0b01 	mov.w	fp, #1
 80070e0:	e7fa      	b.n	80070d8 <__gethex+0x128>
 80070e2:	230a      	movs	r3, #10
 80070e4:	fb03 0002 	mla	r0, r3, r2, r0
 80070e8:	e7d0      	b.n	800708c <__gethex+0xdc>
 80070ea:	4629      	mov	r1, r5
 80070ec:	e7e0      	b.n	80070b0 <__gethex+0x100>
 80070ee:	4621      	mov	r1, r4
 80070f0:	eba5 0308 	sub.w	r3, r5, r8
 80070f4:	3b01      	subs	r3, #1
 80070f6:	2b07      	cmp	r3, #7
 80070f8:	dc0a      	bgt.n	8007110 <__gethex+0x160>
 80070fa:	4648      	mov	r0, r9
 80070fc:	f000 fb10 	bl	8007720 <_Balloc>
 8007100:	4604      	mov	r4, r0
 8007102:	b940      	cbnz	r0, 8007116 <__gethex+0x166>
 8007104:	4602      	mov	r2, r0
 8007106:	21e4      	movs	r1, #228	; 0xe4
 8007108:	4b61      	ldr	r3, [pc, #388]	; (8007290 <__gethex+0x2e0>)
 800710a:	4862      	ldr	r0, [pc, #392]	; (8007294 <__gethex+0x2e4>)
 800710c:	f001 fa5e 	bl	80085cc <__assert_func>
 8007110:	3101      	adds	r1, #1
 8007112:	105b      	asrs	r3, r3, #1
 8007114:	e7ef      	b.n	80070f6 <__gethex+0x146>
 8007116:	2300      	movs	r3, #0
 8007118:	469b      	mov	fp, r3
 800711a:	f100 0a14 	add.w	sl, r0, #20
 800711e:	f8cd a004 	str.w	sl, [sp, #4]
 8007122:	45a8      	cmp	r8, r5
 8007124:	d344      	bcc.n	80071b0 <__gethex+0x200>
 8007126:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800712a:	4658      	mov	r0, fp
 800712c:	f848 bb04 	str.w	fp, [r8], #4
 8007130:	eba8 080a 	sub.w	r8, r8, sl
 8007134:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007138:	6122      	str	r2, [r4, #16]
 800713a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800713e:	f000 fbe1 	bl	8007904 <__hi0bits>
 8007142:	683d      	ldr	r5, [r7, #0]
 8007144:	eba8 0800 	sub.w	r8, r8, r0
 8007148:	45a8      	cmp	r8, r5
 800714a:	dd59      	ble.n	8007200 <__gethex+0x250>
 800714c:	eba8 0805 	sub.w	r8, r8, r5
 8007150:	4641      	mov	r1, r8
 8007152:	4620      	mov	r0, r4
 8007154:	f000 ff5f 	bl	8008016 <__any_on>
 8007158:	4683      	mov	fp, r0
 800715a:	b1b8      	cbz	r0, 800718c <__gethex+0x1dc>
 800715c:	f04f 0b01 	mov.w	fp, #1
 8007160:	f108 33ff 	add.w	r3, r8, #4294967295
 8007164:	1159      	asrs	r1, r3, #5
 8007166:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800716a:	f003 021f 	and.w	r2, r3, #31
 800716e:	fa0b f202 	lsl.w	r2, fp, r2
 8007172:	420a      	tst	r2, r1
 8007174:	d00a      	beq.n	800718c <__gethex+0x1dc>
 8007176:	455b      	cmp	r3, fp
 8007178:	dd06      	ble.n	8007188 <__gethex+0x1d8>
 800717a:	4620      	mov	r0, r4
 800717c:	f1a8 0102 	sub.w	r1, r8, #2
 8007180:	f000 ff49 	bl	8008016 <__any_on>
 8007184:	2800      	cmp	r0, #0
 8007186:	d138      	bne.n	80071fa <__gethex+0x24a>
 8007188:	f04f 0b02 	mov.w	fp, #2
 800718c:	4641      	mov	r1, r8
 800718e:	4620      	mov	r0, r4
 8007190:	f7ff fea6 	bl	8006ee0 <rshift>
 8007194:	4446      	add	r6, r8
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	42b3      	cmp	r3, r6
 800719a:	da41      	bge.n	8007220 <__gethex+0x270>
 800719c:	4621      	mov	r1, r4
 800719e:	4648      	mov	r0, r9
 80071a0:	f000 fafe 	bl	80077a0 <_Bfree>
 80071a4:	2300      	movs	r3, #0
 80071a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071a8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	e789      	b.n	80070c4 <__gethex+0x114>
 80071b0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80071b4:	2a2e      	cmp	r2, #46	; 0x2e
 80071b6:	d014      	beq.n	80071e2 <__gethex+0x232>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d106      	bne.n	80071ca <__gethex+0x21a>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	f843 bb04 	str.w	fp, [r3], #4
 80071c2:	f04f 0b00 	mov.w	fp, #0
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	465b      	mov	r3, fp
 80071ca:	7828      	ldrb	r0, [r5, #0]
 80071cc:	9303      	str	r3, [sp, #12]
 80071ce:	f7ff feda 	bl	8006f86 <__hexdig_fun>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	f000 000f 	and.w	r0, r0, #15
 80071d8:	4098      	lsls	r0, r3
 80071da:	ea4b 0b00 	orr.w	fp, fp, r0
 80071de:	3304      	adds	r3, #4
 80071e0:	e79f      	b.n	8007122 <__gethex+0x172>
 80071e2:	45a8      	cmp	r8, r5
 80071e4:	d8e8      	bhi.n	80071b8 <__gethex+0x208>
 80071e6:	2201      	movs	r2, #1
 80071e8:	4628      	mov	r0, r5
 80071ea:	4928      	ldr	r1, [pc, #160]	; (800728c <__gethex+0x2dc>)
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	f7fe ff10 	bl	8006012 <strncmp>
 80071f2:	9b03      	ldr	r3, [sp, #12]
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d1df      	bne.n	80071b8 <__gethex+0x208>
 80071f8:	e793      	b.n	8007122 <__gethex+0x172>
 80071fa:	f04f 0b03 	mov.w	fp, #3
 80071fe:	e7c5      	b.n	800718c <__gethex+0x1dc>
 8007200:	da0b      	bge.n	800721a <__gethex+0x26a>
 8007202:	eba5 0808 	sub.w	r8, r5, r8
 8007206:	4621      	mov	r1, r4
 8007208:	4642      	mov	r2, r8
 800720a:	4648      	mov	r0, r9
 800720c:	f000 fce0 	bl	8007bd0 <__lshift>
 8007210:	4604      	mov	r4, r0
 8007212:	eba6 0608 	sub.w	r6, r6, r8
 8007216:	f100 0a14 	add.w	sl, r0, #20
 800721a:	f04f 0b00 	mov.w	fp, #0
 800721e:	e7ba      	b.n	8007196 <__gethex+0x1e6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	42b3      	cmp	r3, r6
 8007224:	dd74      	ble.n	8007310 <__gethex+0x360>
 8007226:	1b9e      	subs	r6, r3, r6
 8007228:	42b5      	cmp	r5, r6
 800722a:	dc35      	bgt.n	8007298 <__gethex+0x2e8>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d023      	beq.n	800727a <__gethex+0x2ca>
 8007232:	2b03      	cmp	r3, #3
 8007234:	d025      	beq.n	8007282 <__gethex+0x2d2>
 8007236:	2b01      	cmp	r3, #1
 8007238:	d115      	bne.n	8007266 <__gethex+0x2b6>
 800723a:	42b5      	cmp	r5, r6
 800723c:	d113      	bne.n	8007266 <__gethex+0x2b6>
 800723e:	2d01      	cmp	r5, #1
 8007240:	d10b      	bne.n	800725a <__gethex+0x2aa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	9a02      	ldr	r2, [sp, #8]
 8007246:	f04f 0862 	mov.w	r8, #98	; 0x62
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	2301      	movs	r3, #1
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	f8ca 3000 	str.w	r3, [sl]
 8007254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007256:	601c      	str	r4, [r3, #0]
 8007258:	e734      	b.n	80070c4 <__gethex+0x114>
 800725a:	4620      	mov	r0, r4
 800725c:	1e69      	subs	r1, r5, #1
 800725e:	f000 feda 	bl	8008016 <__any_on>
 8007262:	2800      	cmp	r0, #0
 8007264:	d1ed      	bne.n	8007242 <__gethex+0x292>
 8007266:	4621      	mov	r1, r4
 8007268:	4648      	mov	r0, r9
 800726a:	f000 fa99 	bl	80077a0 <_Bfree>
 800726e:	2300      	movs	r3, #0
 8007270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007272:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	e724      	b.n	80070c4 <__gethex+0x114>
 800727a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1f2      	bne.n	8007266 <__gethex+0x2b6>
 8007280:	e7df      	b.n	8007242 <__gethex+0x292>
 8007282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1dc      	bne.n	8007242 <__gethex+0x292>
 8007288:	e7ed      	b.n	8007266 <__gethex+0x2b6>
 800728a:	bf00      	nop
 800728c:	08008c5e 	.word	0x08008c5e
 8007290:	08008d6d 	.word	0x08008d6d
 8007294:	08008d7e 	.word	0x08008d7e
 8007298:	f106 38ff 	add.w	r8, r6, #4294967295
 800729c:	f1bb 0f00 	cmp.w	fp, #0
 80072a0:	d133      	bne.n	800730a <__gethex+0x35a>
 80072a2:	f1b8 0f00 	cmp.w	r8, #0
 80072a6:	d004      	beq.n	80072b2 <__gethex+0x302>
 80072a8:	4641      	mov	r1, r8
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 feb3 	bl	8008016 <__any_on>
 80072b0:	4683      	mov	fp, r0
 80072b2:	2301      	movs	r3, #1
 80072b4:	ea4f 1268 	mov.w	r2, r8, asr #5
 80072b8:	f008 081f 	and.w	r8, r8, #31
 80072bc:	fa03 f308 	lsl.w	r3, r3, r8
 80072c0:	f04f 0802 	mov.w	r8, #2
 80072c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80072c8:	4631      	mov	r1, r6
 80072ca:	4213      	tst	r3, r2
 80072cc:	4620      	mov	r0, r4
 80072ce:	bf18      	it	ne
 80072d0:	f04b 0b02 	orrne.w	fp, fp, #2
 80072d4:	1bad      	subs	r5, r5, r6
 80072d6:	f7ff fe03 	bl	8006ee0 <rshift>
 80072da:	687e      	ldr	r6, [r7, #4]
 80072dc:	f1bb 0f00 	cmp.w	fp, #0
 80072e0:	d04a      	beq.n	8007378 <__gethex+0x3c8>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d016      	beq.n	8007316 <__gethex+0x366>
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d018      	beq.n	800731e <__gethex+0x36e>
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d109      	bne.n	8007304 <__gethex+0x354>
 80072f0:	f01b 0f02 	tst.w	fp, #2
 80072f4:	d006      	beq.n	8007304 <__gethex+0x354>
 80072f6:	f8da 3000 	ldr.w	r3, [sl]
 80072fa:	ea4b 0b03 	orr.w	fp, fp, r3
 80072fe:	f01b 0f01 	tst.w	fp, #1
 8007302:	d10f      	bne.n	8007324 <__gethex+0x374>
 8007304:	f048 0810 	orr.w	r8, r8, #16
 8007308:	e036      	b.n	8007378 <__gethex+0x3c8>
 800730a:	f04f 0b01 	mov.w	fp, #1
 800730e:	e7d0      	b.n	80072b2 <__gethex+0x302>
 8007310:	f04f 0801 	mov.w	r8, #1
 8007314:	e7e2      	b.n	80072dc <__gethex+0x32c>
 8007316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007318:	f1c3 0301 	rsb	r3, r3, #1
 800731c:	930f      	str	r3, [sp, #60]	; 0x3c
 800731e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0ef      	beq.n	8007304 <__gethex+0x354>
 8007324:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007328:	f104 0214 	add.w	r2, r4, #20
 800732c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	2300      	movs	r3, #0
 8007334:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007338:	4694      	mov	ip, r2
 800733a:	f852 1b04 	ldr.w	r1, [r2], #4
 800733e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007342:	d01e      	beq.n	8007382 <__gethex+0x3d2>
 8007344:	3101      	adds	r1, #1
 8007346:	f8cc 1000 	str.w	r1, [ip]
 800734a:	f1b8 0f02 	cmp.w	r8, #2
 800734e:	f104 0214 	add.w	r2, r4, #20
 8007352:	d13d      	bne.n	80073d0 <__gethex+0x420>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	3b01      	subs	r3, #1
 8007358:	42ab      	cmp	r3, r5
 800735a:	d10b      	bne.n	8007374 <__gethex+0x3c4>
 800735c:	2301      	movs	r3, #1
 800735e:	1169      	asrs	r1, r5, #5
 8007360:	f005 051f 	and.w	r5, r5, #31
 8007364:	fa03 f505 	lsl.w	r5, r3, r5
 8007368:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800736c:	421d      	tst	r5, r3
 800736e:	bf18      	it	ne
 8007370:	f04f 0801 	movne.w	r8, #1
 8007374:	f048 0820 	orr.w	r8, r8, #32
 8007378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800737a:	601c      	str	r4, [r3, #0]
 800737c:	9b02      	ldr	r3, [sp, #8]
 800737e:	601e      	str	r6, [r3, #0]
 8007380:	e6a0      	b.n	80070c4 <__gethex+0x114>
 8007382:	4290      	cmp	r0, r2
 8007384:	f842 3c04 	str.w	r3, [r2, #-4]
 8007388:	d8d6      	bhi.n	8007338 <__gethex+0x388>
 800738a:	68a2      	ldr	r2, [r4, #8]
 800738c:	4593      	cmp	fp, r2
 800738e:	db17      	blt.n	80073c0 <__gethex+0x410>
 8007390:	6861      	ldr	r1, [r4, #4]
 8007392:	4648      	mov	r0, r9
 8007394:	3101      	adds	r1, #1
 8007396:	f000 f9c3 	bl	8007720 <_Balloc>
 800739a:	4682      	mov	sl, r0
 800739c:	b918      	cbnz	r0, 80073a6 <__gethex+0x3f6>
 800739e:	4602      	mov	r2, r0
 80073a0:	2184      	movs	r1, #132	; 0x84
 80073a2:	4b1a      	ldr	r3, [pc, #104]	; (800740c <__gethex+0x45c>)
 80073a4:	e6b1      	b.n	800710a <__gethex+0x15a>
 80073a6:	6922      	ldr	r2, [r4, #16]
 80073a8:	f104 010c 	add.w	r1, r4, #12
 80073ac:	3202      	adds	r2, #2
 80073ae:	0092      	lsls	r2, r2, #2
 80073b0:	300c      	adds	r0, #12
 80073b2:	f7fe fec6 	bl	8006142 <memcpy>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4648      	mov	r0, r9
 80073ba:	f000 f9f1 	bl	80077a0 <_Bfree>
 80073be:	4654      	mov	r4, sl
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	1c51      	adds	r1, r2, #1
 80073c4:	6121      	str	r1, [r4, #16]
 80073c6:	2101      	movs	r1, #1
 80073c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80073cc:	6151      	str	r1, [r2, #20]
 80073ce:	e7bc      	b.n	800734a <__gethex+0x39a>
 80073d0:	6921      	ldr	r1, [r4, #16]
 80073d2:	4559      	cmp	r1, fp
 80073d4:	dd0b      	ble.n	80073ee <__gethex+0x43e>
 80073d6:	2101      	movs	r1, #1
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff fd81 	bl	8006ee0 <rshift>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	3601      	adds	r6, #1
 80073e2:	42b3      	cmp	r3, r6
 80073e4:	f6ff aeda 	blt.w	800719c <__gethex+0x1ec>
 80073e8:	f04f 0801 	mov.w	r8, #1
 80073ec:	e7c2      	b.n	8007374 <__gethex+0x3c4>
 80073ee:	f015 051f 	ands.w	r5, r5, #31
 80073f2:	d0f9      	beq.n	80073e8 <__gethex+0x438>
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	f1c5 0520 	rsb	r5, r5, #32
 80073fa:	441a      	add	r2, r3
 80073fc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007400:	f000 fa80 	bl	8007904 <__hi0bits>
 8007404:	42a8      	cmp	r0, r5
 8007406:	dbe6      	blt.n	80073d6 <__gethex+0x426>
 8007408:	e7ee      	b.n	80073e8 <__gethex+0x438>
 800740a:	bf00      	nop
 800740c:	08008d6d 	.word	0x08008d6d

08007410 <L_shift>:
 8007410:	f1c2 0208 	rsb	r2, r2, #8
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	b570      	push	{r4, r5, r6, lr}
 8007418:	f1c2 0620 	rsb	r6, r2, #32
 800741c:	6843      	ldr	r3, [r0, #4]
 800741e:	6804      	ldr	r4, [r0, #0]
 8007420:	fa03 f506 	lsl.w	r5, r3, r6
 8007424:	432c      	orrs	r4, r5
 8007426:	40d3      	lsrs	r3, r2
 8007428:	6004      	str	r4, [r0, #0]
 800742a:	f840 3f04 	str.w	r3, [r0, #4]!
 800742e:	4288      	cmp	r0, r1
 8007430:	d3f4      	bcc.n	800741c <L_shift+0xc>
 8007432:	bd70      	pop	{r4, r5, r6, pc}

08007434 <__match>:
 8007434:	b530      	push	{r4, r5, lr}
 8007436:	6803      	ldr	r3, [r0, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743e:	b914      	cbnz	r4, 8007446 <__match+0x12>
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	2001      	movs	r0, #1
 8007444:	bd30      	pop	{r4, r5, pc}
 8007446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800744e:	2d19      	cmp	r5, #25
 8007450:	bf98      	it	ls
 8007452:	3220      	addls	r2, #32
 8007454:	42a2      	cmp	r2, r4
 8007456:	d0f0      	beq.n	800743a <__match+0x6>
 8007458:	2000      	movs	r0, #0
 800745a:	e7f3      	b.n	8007444 <__match+0x10>

0800745c <__hexnan>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	2500      	movs	r5, #0
 8007462:	680b      	ldr	r3, [r1, #0]
 8007464:	4682      	mov	sl, r0
 8007466:	115e      	asrs	r6, r3, #5
 8007468:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800746c:	f013 031f 	ands.w	r3, r3, #31
 8007470:	bf18      	it	ne
 8007472:	3604      	addne	r6, #4
 8007474:	1f37      	subs	r7, r6, #4
 8007476:	4690      	mov	r8, r2
 8007478:	46b9      	mov	r9, r7
 800747a:	463c      	mov	r4, r7
 800747c:	46ab      	mov	fp, r5
 800747e:	b087      	sub	sp, #28
 8007480:	6801      	ldr	r1, [r0, #0]
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	f846 5c04 	str.w	r5, [r6, #-4]
 8007488:	9502      	str	r5, [sp, #8]
 800748a:	784a      	ldrb	r2, [r1, #1]
 800748c:	1c4b      	adds	r3, r1, #1
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	b342      	cbz	r2, 80074e4 <__hexnan+0x88>
 8007492:	4610      	mov	r0, r2
 8007494:	9105      	str	r1, [sp, #20]
 8007496:	9204      	str	r2, [sp, #16]
 8007498:	f7ff fd75 	bl	8006f86 <__hexdig_fun>
 800749c:	2800      	cmp	r0, #0
 800749e:	d14f      	bne.n	8007540 <__hexnan+0xe4>
 80074a0:	9a04      	ldr	r2, [sp, #16]
 80074a2:	9905      	ldr	r1, [sp, #20]
 80074a4:	2a20      	cmp	r2, #32
 80074a6:	d818      	bhi.n	80074da <__hexnan+0x7e>
 80074a8:	9b02      	ldr	r3, [sp, #8]
 80074aa:	459b      	cmp	fp, r3
 80074ac:	dd13      	ble.n	80074d6 <__hexnan+0x7a>
 80074ae:	454c      	cmp	r4, r9
 80074b0:	d206      	bcs.n	80074c0 <__hexnan+0x64>
 80074b2:	2d07      	cmp	r5, #7
 80074b4:	dc04      	bgt.n	80074c0 <__hexnan+0x64>
 80074b6:	462a      	mov	r2, r5
 80074b8:	4649      	mov	r1, r9
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff ffa8 	bl	8007410 <L_shift>
 80074c0:	4544      	cmp	r4, r8
 80074c2:	d950      	bls.n	8007566 <__hexnan+0x10a>
 80074c4:	2300      	movs	r3, #0
 80074c6:	f1a4 0904 	sub.w	r9, r4, #4
 80074ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80074ce:	461d      	mov	r5, r3
 80074d0:	464c      	mov	r4, r9
 80074d2:	f8cd b008 	str.w	fp, [sp, #8]
 80074d6:	9903      	ldr	r1, [sp, #12]
 80074d8:	e7d7      	b.n	800748a <__hexnan+0x2e>
 80074da:	2a29      	cmp	r2, #41	; 0x29
 80074dc:	d155      	bne.n	800758a <__hexnan+0x12e>
 80074de:	3102      	adds	r1, #2
 80074e0:	f8ca 1000 	str.w	r1, [sl]
 80074e4:	f1bb 0f00 	cmp.w	fp, #0
 80074e8:	d04f      	beq.n	800758a <__hexnan+0x12e>
 80074ea:	454c      	cmp	r4, r9
 80074ec:	d206      	bcs.n	80074fc <__hexnan+0xa0>
 80074ee:	2d07      	cmp	r5, #7
 80074f0:	dc04      	bgt.n	80074fc <__hexnan+0xa0>
 80074f2:	462a      	mov	r2, r5
 80074f4:	4649      	mov	r1, r9
 80074f6:	4620      	mov	r0, r4
 80074f8:	f7ff ff8a 	bl	8007410 <L_shift>
 80074fc:	4544      	cmp	r4, r8
 80074fe:	d934      	bls.n	800756a <__hexnan+0x10e>
 8007500:	4623      	mov	r3, r4
 8007502:	f1a8 0204 	sub.w	r2, r8, #4
 8007506:	f853 1b04 	ldr.w	r1, [r3], #4
 800750a:	429f      	cmp	r7, r3
 800750c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007510:	d2f9      	bcs.n	8007506 <__hexnan+0xaa>
 8007512:	1b3b      	subs	r3, r7, r4
 8007514:	f023 0303 	bic.w	r3, r3, #3
 8007518:	3304      	adds	r3, #4
 800751a:	3e03      	subs	r6, #3
 800751c:	3401      	adds	r4, #1
 800751e:	42a6      	cmp	r6, r4
 8007520:	bf38      	it	cc
 8007522:	2304      	movcc	r3, #4
 8007524:	2200      	movs	r2, #0
 8007526:	4443      	add	r3, r8
 8007528:	f843 2b04 	str.w	r2, [r3], #4
 800752c:	429f      	cmp	r7, r3
 800752e:	d2fb      	bcs.n	8007528 <__hexnan+0xcc>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	b91b      	cbnz	r3, 800753c <__hexnan+0xe0>
 8007534:	4547      	cmp	r7, r8
 8007536:	d126      	bne.n	8007586 <__hexnan+0x12a>
 8007538:	2301      	movs	r3, #1
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	2005      	movs	r0, #5
 800753e:	e025      	b.n	800758c <__hexnan+0x130>
 8007540:	3501      	adds	r5, #1
 8007542:	2d08      	cmp	r5, #8
 8007544:	f10b 0b01 	add.w	fp, fp, #1
 8007548:	dd06      	ble.n	8007558 <__hexnan+0xfc>
 800754a:	4544      	cmp	r4, r8
 800754c:	d9c3      	bls.n	80074d6 <__hexnan+0x7a>
 800754e:	2300      	movs	r3, #0
 8007550:	2501      	movs	r5, #1
 8007552:	f844 3c04 	str.w	r3, [r4, #-4]
 8007556:	3c04      	subs	r4, #4
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	f000 000f 	and.w	r0, r0, #15
 800755e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007562:	6020      	str	r0, [r4, #0]
 8007564:	e7b7      	b.n	80074d6 <__hexnan+0x7a>
 8007566:	2508      	movs	r5, #8
 8007568:	e7b5      	b.n	80074d6 <__hexnan+0x7a>
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0df      	beq.n	8007530 <__hexnan+0xd4>
 8007570:	f04f 32ff 	mov.w	r2, #4294967295
 8007574:	f1c3 0320 	rsb	r3, r3, #32
 8007578:	40da      	lsrs	r2, r3
 800757a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800757e:	4013      	ands	r3, r2
 8007580:	f846 3c04 	str.w	r3, [r6, #-4]
 8007584:	e7d4      	b.n	8007530 <__hexnan+0xd4>
 8007586:	3f04      	subs	r7, #4
 8007588:	e7d2      	b.n	8007530 <__hexnan+0xd4>
 800758a:	2004      	movs	r0, #4
 800758c:	b007      	add	sp, #28
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007594 <malloc>:
 8007594:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <malloc+0xc>)
 8007596:	4601      	mov	r1, r0
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	f000 b823 	b.w	80075e4 <_malloc_r>
 800759e:	bf00      	nop
 80075a0:	200001d0 	.word	0x200001d0

080075a4 <sbrk_aligned>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4e0e      	ldr	r6, [pc, #56]	; (80075e0 <sbrk_aligned+0x3c>)
 80075a8:	460c      	mov	r4, r1
 80075aa:	6831      	ldr	r1, [r6, #0]
 80075ac:	4605      	mov	r5, r0
 80075ae:	b911      	cbnz	r1, 80075b6 <sbrk_aligned+0x12>
 80075b0:	f000 fffc 	bl	80085ac <_sbrk_r>
 80075b4:	6030      	str	r0, [r6, #0]
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 fff7 	bl	80085ac <_sbrk_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d00a      	beq.n	80075d8 <sbrk_aligned+0x34>
 80075c2:	1cc4      	adds	r4, r0, #3
 80075c4:	f024 0403 	bic.w	r4, r4, #3
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d007      	beq.n	80075dc <sbrk_aligned+0x38>
 80075cc:	1a21      	subs	r1, r4, r0
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 ffec 	bl	80085ac <_sbrk_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d101      	bne.n	80075dc <sbrk_aligned+0x38>
 80075d8:	f04f 34ff 	mov.w	r4, #4294967295
 80075dc:	4620      	mov	r0, r4
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	20000480 	.word	0x20000480

080075e4 <_malloc_r>:
 80075e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e8:	1ccd      	adds	r5, r1, #3
 80075ea:	f025 0503 	bic.w	r5, r5, #3
 80075ee:	3508      	adds	r5, #8
 80075f0:	2d0c      	cmp	r5, #12
 80075f2:	bf38      	it	cc
 80075f4:	250c      	movcc	r5, #12
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	4607      	mov	r7, r0
 80075fa:	db01      	blt.n	8007600 <_malloc_r+0x1c>
 80075fc:	42a9      	cmp	r1, r5
 80075fe:	d905      	bls.n	800760c <_malloc_r+0x28>
 8007600:	230c      	movs	r3, #12
 8007602:	2600      	movs	r6, #0
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	4630      	mov	r0, r6
 8007608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076e0 <_malloc_r+0xfc>
 8007610:	f000 f87a 	bl	8007708 <__malloc_lock>
 8007614:	f8d8 3000 	ldr.w	r3, [r8]
 8007618:	461c      	mov	r4, r3
 800761a:	bb5c      	cbnz	r4, 8007674 <_malloc_r+0x90>
 800761c:	4629      	mov	r1, r5
 800761e:	4638      	mov	r0, r7
 8007620:	f7ff ffc0 	bl	80075a4 <sbrk_aligned>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	4604      	mov	r4, r0
 8007628:	d155      	bne.n	80076d6 <_malloc_r+0xf2>
 800762a:	f8d8 4000 	ldr.w	r4, [r8]
 800762e:	4626      	mov	r6, r4
 8007630:	2e00      	cmp	r6, #0
 8007632:	d145      	bne.n	80076c0 <_malloc_r+0xdc>
 8007634:	2c00      	cmp	r4, #0
 8007636:	d048      	beq.n	80076ca <_malloc_r+0xe6>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	4631      	mov	r1, r6
 800763c:	4638      	mov	r0, r7
 800763e:	eb04 0903 	add.w	r9, r4, r3
 8007642:	f000 ffb3 	bl	80085ac <_sbrk_r>
 8007646:	4581      	cmp	r9, r0
 8007648:	d13f      	bne.n	80076ca <_malloc_r+0xe6>
 800764a:	6821      	ldr	r1, [r4, #0]
 800764c:	4638      	mov	r0, r7
 800764e:	1a6d      	subs	r5, r5, r1
 8007650:	4629      	mov	r1, r5
 8007652:	f7ff ffa7 	bl	80075a4 <sbrk_aligned>
 8007656:	3001      	adds	r0, #1
 8007658:	d037      	beq.n	80076ca <_malloc_r+0xe6>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	442b      	add	r3, r5
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	f8d8 3000 	ldr.w	r3, [r8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d038      	beq.n	80076da <_malloc_r+0xf6>
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	42a2      	cmp	r2, r4
 800766c:	d12b      	bne.n	80076c6 <_malloc_r+0xe2>
 800766e:	2200      	movs	r2, #0
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	e00f      	b.n	8007694 <_malloc_r+0xb0>
 8007674:	6822      	ldr	r2, [r4, #0]
 8007676:	1b52      	subs	r2, r2, r5
 8007678:	d41f      	bmi.n	80076ba <_malloc_r+0xd6>
 800767a:	2a0b      	cmp	r2, #11
 800767c:	d917      	bls.n	80076ae <_malloc_r+0xca>
 800767e:	1961      	adds	r1, r4, r5
 8007680:	42a3      	cmp	r3, r4
 8007682:	6025      	str	r5, [r4, #0]
 8007684:	bf18      	it	ne
 8007686:	6059      	strne	r1, [r3, #4]
 8007688:	6863      	ldr	r3, [r4, #4]
 800768a:	bf08      	it	eq
 800768c:	f8c8 1000 	streq.w	r1, [r8]
 8007690:	5162      	str	r2, [r4, r5]
 8007692:	604b      	str	r3, [r1, #4]
 8007694:	4638      	mov	r0, r7
 8007696:	f104 060b 	add.w	r6, r4, #11
 800769a:	f000 f83b 	bl	8007714 <__malloc_unlock>
 800769e:	f026 0607 	bic.w	r6, r6, #7
 80076a2:	1d23      	adds	r3, r4, #4
 80076a4:	1af2      	subs	r2, r6, r3
 80076a6:	d0ae      	beq.n	8007606 <_malloc_r+0x22>
 80076a8:	1b9b      	subs	r3, r3, r6
 80076aa:	50a3      	str	r3, [r4, r2]
 80076ac:	e7ab      	b.n	8007606 <_malloc_r+0x22>
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	6862      	ldr	r2, [r4, #4]
 80076b2:	d1dd      	bne.n	8007670 <_malloc_r+0x8c>
 80076b4:	f8c8 2000 	str.w	r2, [r8]
 80076b8:	e7ec      	b.n	8007694 <_malloc_r+0xb0>
 80076ba:	4623      	mov	r3, r4
 80076bc:	6864      	ldr	r4, [r4, #4]
 80076be:	e7ac      	b.n	800761a <_malloc_r+0x36>
 80076c0:	4634      	mov	r4, r6
 80076c2:	6876      	ldr	r6, [r6, #4]
 80076c4:	e7b4      	b.n	8007630 <_malloc_r+0x4c>
 80076c6:	4613      	mov	r3, r2
 80076c8:	e7cc      	b.n	8007664 <_malloc_r+0x80>
 80076ca:	230c      	movs	r3, #12
 80076cc:	4638      	mov	r0, r7
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	f000 f820 	bl	8007714 <__malloc_unlock>
 80076d4:	e797      	b.n	8007606 <_malloc_r+0x22>
 80076d6:	6025      	str	r5, [r4, #0]
 80076d8:	e7dc      	b.n	8007694 <_malloc_r+0xb0>
 80076da:	605b      	str	r3, [r3, #4]
 80076dc:	deff      	udf	#255	; 0xff
 80076de:	bf00      	nop
 80076e0:	2000047c 	.word	0x2000047c

080076e4 <__ascii_mbtowc>:
 80076e4:	b082      	sub	sp, #8
 80076e6:	b901      	cbnz	r1, 80076ea <__ascii_mbtowc+0x6>
 80076e8:	a901      	add	r1, sp, #4
 80076ea:	b142      	cbz	r2, 80076fe <__ascii_mbtowc+0x1a>
 80076ec:	b14b      	cbz	r3, 8007702 <__ascii_mbtowc+0x1e>
 80076ee:	7813      	ldrb	r3, [r2, #0]
 80076f0:	600b      	str	r3, [r1, #0]
 80076f2:	7812      	ldrb	r2, [r2, #0]
 80076f4:	1e10      	subs	r0, r2, #0
 80076f6:	bf18      	it	ne
 80076f8:	2001      	movne	r0, #1
 80076fa:	b002      	add	sp, #8
 80076fc:	4770      	bx	lr
 80076fe:	4610      	mov	r0, r2
 8007700:	e7fb      	b.n	80076fa <__ascii_mbtowc+0x16>
 8007702:	f06f 0001 	mvn.w	r0, #1
 8007706:	e7f8      	b.n	80076fa <__ascii_mbtowc+0x16>

08007708 <__malloc_lock>:
 8007708:	4801      	ldr	r0, [pc, #4]	; (8007710 <__malloc_lock+0x8>)
 800770a:	f7fe bd0a 	b.w	8006122 <__retarget_lock_acquire_recursive>
 800770e:	bf00      	nop
 8007710:	20000478 	.word	0x20000478

08007714 <__malloc_unlock>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__malloc_unlock+0x8>)
 8007716:	f7fe bd05 	b.w	8006124 <__retarget_lock_release_recursive>
 800771a:	bf00      	nop
 800771c:	20000478 	.word	0x20000478

08007720 <_Balloc>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	69c6      	ldr	r6, [r0, #28]
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	b976      	cbnz	r6, 8007748 <_Balloc+0x28>
 800772a:	2010      	movs	r0, #16
 800772c:	f7ff ff32 	bl	8007594 <malloc>
 8007730:	4602      	mov	r2, r0
 8007732:	61e0      	str	r0, [r4, #28]
 8007734:	b920      	cbnz	r0, 8007740 <_Balloc+0x20>
 8007736:	216b      	movs	r1, #107	; 0x6b
 8007738:	4b17      	ldr	r3, [pc, #92]	; (8007798 <_Balloc+0x78>)
 800773a:	4818      	ldr	r0, [pc, #96]	; (800779c <_Balloc+0x7c>)
 800773c:	f000 ff46 	bl	80085cc <__assert_func>
 8007740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007744:	6006      	str	r6, [r0, #0]
 8007746:	60c6      	str	r6, [r0, #12]
 8007748:	69e6      	ldr	r6, [r4, #28]
 800774a:	68f3      	ldr	r3, [r6, #12]
 800774c:	b183      	cbz	r3, 8007770 <_Balloc+0x50>
 800774e:	69e3      	ldr	r3, [r4, #28]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007756:	b9b8      	cbnz	r0, 8007788 <_Balloc+0x68>
 8007758:	2101      	movs	r1, #1
 800775a:	fa01 f605 	lsl.w	r6, r1, r5
 800775e:	1d72      	adds	r2, r6, #5
 8007760:	4620      	mov	r0, r4
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	f000 ff50 	bl	8008608 <_calloc_r>
 8007768:	b160      	cbz	r0, 8007784 <_Balloc+0x64>
 800776a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800776e:	e00e      	b.n	800778e <_Balloc+0x6e>
 8007770:	2221      	movs	r2, #33	; 0x21
 8007772:	2104      	movs	r1, #4
 8007774:	4620      	mov	r0, r4
 8007776:	f000 ff47 	bl	8008608 <_calloc_r>
 800777a:	69e3      	ldr	r3, [r4, #28]
 800777c:	60f0      	str	r0, [r6, #12]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e4      	bne.n	800774e <_Balloc+0x2e>
 8007784:	2000      	movs	r0, #0
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	6802      	ldr	r2, [r0, #0]
 800778a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800778e:	2300      	movs	r3, #0
 8007790:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007794:	e7f7      	b.n	8007786 <_Balloc+0x66>
 8007796:	bf00      	nop
 8007798:	08008cfe 	.word	0x08008cfe
 800779c:	08008dde 	.word	0x08008dde

080077a0 <_Bfree>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	69c6      	ldr	r6, [r0, #28]
 80077a4:	4605      	mov	r5, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	b976      	cbnz	r6, 80077c8 <_Bfree+0x28>
 80077aa:	2010      	movs	r0, #16
 80077ac:	f7ff fef2 	bl	8007594 <malloc>
 80077b0:	4602      	mov	r2, r0
 80077b2:	61e8      	str	r0, [r5, #28]
 80077b4:	b920      	cbnz	r0, 80077c0 <_Bfree+0x20>
 80077b6:	218f      	movs	r1, #143	; 0x8f
 80077b8:	4b08      	ldr	r3, [pc, #32]	; (80077dc <_Bfree+0x3c>)
 80077ba:	4809      	ldr	r0, [pc, #36]	; (80077e0 <_Bfree+0x40>)
 80077bc:	f000 ff06 	bl	80085cc <__assert_func>
 80077c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077c4:	6006      	str	r6, [r0, #0]
 80077c6:	60c6      	str	r6, [r0, #12]
 80077c8:	b13c      	cbz	r4, 80077da <_Bfree+0x3a>
 80077ca:	69eb      	ldr	r3, [r5, #28]
 80077cc:	6862      	ldr	r2, [r4, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077d4:	6021      	str	r1, [r4, #0]
 80077d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	08008cfe 	.word	0x08008cfe
 80077e0:	08008dde 	.word	0x08008dde

080077e4 <__multadd>:
 80077e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	4607      	mov	r7, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	461e      	mov	r6, r3
 80077ee:	2000      	movs	r0, #0
 80077f0:	690d      	ldr	r5, [r1, #16]
 80077f2:	f101 0c14 	add.w	ip, r1, #20
 80077f6:	f8dc 3000 	ldr.w	r3, [ip]
 80077fa:	3001      	adds	r0, #1
 80077fc:	b299      	uxth	r1, r3
 80077fe:	fb02 6101 	mla	r1, r2, r1, r6
 8007802:	0c1e      	lsrs	r6, r3, #16
 8007804:	0c0b      	lsrs	r3, r1, #16
 8007806:	fb02 3306 	mla	r3, r2, r6, r3
 800780a:	b289      	uxth	r1, r1
 800780c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007810:	4285      	cmp	r5, r0
 8007812:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007816:	f84c 1b04 	str.w	r1, [ip], #4
 800781a:	dcec      	bgt.n	80077f6 <__multadd+0x12>
 800781c:	b30e      	cbz	r6, 8007862 <__multadd+0x7e>
 800781e:	68a3      	ldr	r3, [r4, #8]
 8007820:	42ab      	cmp	r3, r5
 8007822:	dc19      	bgt.n	8007858 <__multadd+0x74>
 8007824:	6861      	ldr	r1, [r4, #4]
 8007826:	4638      	mov	r0, r7
 8007828:	3101      	adds	r1, #1
 800782a:	f7ff ff79 	bl	8007720 <_Balloc>
 800782e:	4680      	mov	r8, r0
 8007830:	b928      	cbnz	r0, 800783e <__multadd+0x5a>
 8007832:	4602      	mov	r2, r0
 8007834:	21ba      	movs	r1, #186	; 0xba
 8007836:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <__multadd+0x84>)
 8007838:	480c      	ldr	r0, [pc, #48]	; (800786c <__multadd+0x88>)
 800783a:	f000 fec7 	bl	80085cc <__assert_func>
 800783e:	6922      	ldr	r2, [r4, #16]
 8007840:	f104 010c 	add.w	r1, r4, #12
 8007844:	3202      	adds	r2, #2
 8007846:	0092      	lsls	r2, r2, #2
 8007848:	300c      	adds	r0, #12
 800784a:	f7fe fc7a 	bl	8006142 <memcpy>
 800784e:	4621      	mov	r1, r4
 8007850:	4638      	mov	r0, r7
 8007852:	f7ff ffa5 	bl	80077a0 <_Bfree>
 8007856:	4644      	mov	r4, r8
 8007858:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800785c:	3501      	adds	r5, #1
 800785e:	615e      	str	r6, [r3, #20]
 8007860:	6125      	str	r5, [r4, #16]
 8007862:	4620      	mov	r0, r4
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	08008d6d 	.word	0x08008d6d
 800786c:	08008dde 	.word	0x08008dde

08007870 <__s2b>:
 8007870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007874:	4615      	mov	r5, r2
 8007876:	2209      	movs	r2, #9
 8007878:	461f      	mov	r7, r3
 800787a:	3308      	adds	r3, #8
 800787c:	460c      	mov	r4, r1
 800787e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007882:	4606      	mov	r6, r0
 8007884:	2201      	movs	r2, #1
 8007886:	2100      	movs	r1, #0
 8007888:	429a      	cmp	r2, r3
 800788a:	db09      	blt.n	80078a0 <__s2b+0x30>
 800788c:	4630      	mov	r0, r6
 800788e:	f7ff ff47 	bl	8007720 <_Balloc>
 8007892:	b940      	cbnz	r0, 80078a6 <__s2b+0x36>
 8007894:	4602      	mov	r2, r0
 8007896:	21d3      	movs	r1, #211	; 0xd3
 8007898:	4b18      	ldr	r3, [pc, #96]	; (80078fc <__s2b+0x8c>)
 800789a:	4819      	ldr	r0, [pc, #100]	; (8007900 <__s2b+0x90>)
 800789c:	f000 fe96 	bl	80085cc <__assert_func>
 80078a0:	0052      	lsls	r2, r2, #1
 80078a2:	3101      	adds	r1, #1
 80078a4:	e7f0      	b.n	8007888 <__s2b+0x18>
 80078a6:	9b08      	ldr	r3, [sp, #32]
 80078a8:	2d09      	cmp	r5, #9
 80078aa:	6143      	str	r3, [r0, #20]
 80078ac:	f04f 0301 	mov.w	r3, #1
 80078b0:	6103      	str	r3, [r0, #16]
 80078b2:	dd16      	ble.n	80078e2 <__s2b+0x72>
 80078b4:	f104 0909 	add.w	r9, r4, #9
 80078b8:	46c8      	mov	r8, r9
 80078ba:	442c      	add	r4, r5
 80078bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078c0:	4601      	mov	r1, r0
 80078c2:	220a      	movs	r2, #10
 80078c4:	4630      	mov	r0, r6
 80078c6:	3b30      	subs	r3, #48	; 0x30
 80078c8:	f7ff ff8c 	bl	80077e4 <__multadd>
 80078cc:	45a0      	cmp	r8, r4
 80078ce:	d1f5      	bne.n	80078bc <__s2b+0x4c>
 80078d0:	f1a5 0408 	sub.w	r4, r5, #8
 80078d4:	444c      	add	r4, r9
 80078d6:	1b2d      	subs	r5, r5, r4
 80078d8:	1963      	adds	r3, r4, r5
 80078da:	42bb      	cmp	r3, r7
 80078dc:	db04      	blt.n	80078e8 <__s2b+0x78>
 80078de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e2:	2509      	movs	r5, #9
 80078e4:	340a      	adds	r4, #10
 80078e6:	e7f6      	b.n	80078d6 <__s2b+0x66>
 80078e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078ec:	4601      	mov	r1, r0
 80078ee:	220a      	movs	r2, #10
 80078f0:	4630      	mov	r0, r6
 80078f2:	3b30      	subs	r3, #48	; 0x30
 80078f4:	f7ff ff76 	bl	80077e4 <__multadd>
 80078f8:	e7ee      	b.n	80078d8 <__s2b+0x68>
 80078fa:	bf00      	nop
 80078fc:	08008d6d 	.word	0x08008d6d
 8007900:	08008dde 	.word	0x08008dde

08007904 <__hi0bits>:
 8007904:	0c02      	lsrs	r2, r0, #16
 8007906:	0412      	lsls	r2, r2, #16
 8007908:	4603      	mov	r3, r0
 800790a:	b9ca      	cbnz	r2, 8007940 <__hi0bits+0x3c>
 800790c:	0403      	lsls	r3, r0, #16
 800790e:	2010      	movs	r0, #16
 8007910:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007914:	bf04      	itt	eq
 8007916:	021b      	lsleq	r3, r3, #8
 8007918:	3008      	addeq	r0, #8
 800791a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800791e:	bf04      	itt	eq
 8007920:	011b      	lsleq	r3, r3, #4
 8007922:	3004      	addeq	r0, #4
 8007924:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007928:	bf04      	itt	eq
 800792a:	009b      	lsleq	r3, r3, #2
 800792c:	3002      	addeq	r0, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	db05      	blt.n	800793e <__hi0bits+0x3a>
 8007932:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007936:	f100 0001 	add.w	r0, r0, #1
 800793a:	bf08      	it	eq
 800793c:	2020      	moveq	r0, #32
 800793e:	4770      	bx	lr
 8007940:	2000      	movs	r0, #0
 8007942:	e7e5      	b.n	8007910 <__hi0bits+0xc>

08007944 <__lo0bits>:
 8007944:	6803      	ldr	r3, [r0, #0]
 8007946:	4602      	mov	r2, r0
 8007948:	f013 0007 	ands.w	r0, r3, #7
 800794c:	d00b      	beq.n	8007966 <__lo0bits+0x22>
 800794e:	07d9      	lsls	r1, r3, #31
 8007950:	d421      	bmi.n	8007996 <__lo0bits+0x52>
 8007952:	0798      	lsls	r0, r3, #30
 8007954:	bf49      	itett	mi
 8007956:	085b      	lsrmi	r3, r3, #1
 8007958:	089b      	lsrpl	r3, r3, #2
 800795a:	2001      	movmi	r0, #1
 800795c:	6013      	strmi	r3, [r2, #0]
 800795e:	bf5c      	itt	pl
 8007960:	2002      	movpl	r0, #2
 8007962:	6013      	strpl	r3, [r2, #0]
 8007964:	4770      	bx	lr
 8007966:	b299      	uxth	r1, r3
 8007968:	b909      	cbnz	r1, 800796e <__lo0bits+0x2a>
 800796a:	2010      	movs	r0, #16
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	b2d9      	uxtb	r1, r3
 8007970:	b909      	cbnz	r1, 8007976 <__lo0bits+0x32>
 8007972:	3008      	adds	r0, #8
 8007974:	0a1b      	lsrs	r3, r3, #8
 8007976:	0719      	lsls	r1, r3, #28
 8007978:	bf04      	itt	eq
 800797a:	091b      	lsreq	r3, r3, #4
 800797c:	3004      	addeq	r0, #4
 800797e:	0799      	lsls	r1, r3, #30
 8007980:	bf04      	itt	eq
 8007982:	089b      	lsreq	r3, r3, #2
 8007984:	3002      	addeq	r0, #2
 8007986:	07d9      	lsls	r1, r3, #31
 8007988:	d403      	bmi.n	8007992 <__lo0bits+0x4e>
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	f100 0001 	add.w	r0, r0, #1
 8007990:	d003      	beq.n	800799a <__lo0bits+0x56>
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	4770      	bx	lr
 8007996:	2000      	movs	r0, #0
 8007998:	4770      	bx	lr
 800799a:	2020      	movs	r0, #32
 800799c:	4770      	bx	lr
	...

080079a0 <__i2b>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	460c      	mov	r4, r1
 80079a4:	2101      	movs	r1, #1
 80079a6:	f7ff febb 	bl	8007720 <_Balloc>
 80079aa:	4602      	mov	r2, r0
 80079ac:	b928      	cbnz	r0, 80079ba <__i2b+0x1a>
 80079ae:	f240 1145 	movw	r1, #325	; 0x145
 80079b2:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <__i2b+0x24>)
 80079b4:	4804      	ldr	r0, [pc, #16]	; (80079c8 <__i2b+0x28>)
 80079b6:	f000 fe09 	bl	80085cc <__assert_func>
 80079ba:	2301      	movs	r3, #1
 80079bc:	6144      	str	r4, [r0, #20]
 80079be:	6103      	str	r3, [r0, #16]
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	bf00      	nop
 80079c4:	08008d6d 	.word	0x08008d6d
 80079c8:	08008dde 	.word	0x08008dde

080079cc <__multiply>:
 80079cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d0:	4691      	mov	r9, r2
 80079d2:	690a      	ldr	r2, [r1, #16]
 80079d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079d8:	460c      	mov	r4, r1
 80079da:	429a      	cmp	r2, r3
 80079dc:	bfbe      	ittt	lt
 80079de:	460b      	movlt	r3, r1
 80079e0:	464c      	movlt	r4, r9
 80079e2:	4699      	movlt	r9, r3
 80079e4:	6927      	ldr	r7, [r4, #16]
 80079e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079ea:	68a3      	ldr	r3, [r4, #8]
 80079ec:	6861      	ldr	r1, [r4, #4]
 80079ee:	eb07 060a 	add.w	r6, r7, sl
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	b085      	sub	sp, #20
 80079f6:	bfb8      	it	lt
 80079f8:	3101      	addlt	r1, #1
 80079fa:	f7ff fe91 	bl	8007720 <_Balloc>
 80079fe:	b930      	cbnz	r0, 8007a0e <__multiply+0x42>
 8007a00:	4602      	mov	r2, r0
 8007a02:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a06:	4b43      	ldr	r3, [pc, #268]	; (8007b14 <__multiply+0x148>)
 8007a08:	4843      	ldr	r0, [pc, #268]	; (8007b18 <__multiply+0x14c>)
 8007a0a:	f000 fddf 	bl	80085cc <__assert_func>
 8007a0e:	f100 0514 	add.w	r5, r0, #20
 8007a12:	462b      	mov	r3, r5
 8007a14:	2200      	movs	r2, #0
 8007a16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a1a:	4543      	cmp	r3, r8
 8007a1c:	d321      	bcc.n	8007a62 <__multiply+0x96>
 8007a1e:	f104 0314 	add.w	r3, r4, #20
 8007a22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a26:	f109 0314 	add.w	r3, r9, #20
 8007a2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a2e:	9202      	str	r2, [sp, #8]
 8007a30:	1b3a      	subs	r2, r7, r4
 8007a32:	3a15      	subs	r2, #21
 8007a34:	f022 0203 	bic.w	r2, r2, #3
 8007a38:	3204      	adds	r2, #4
 8007a3a:	f104 0115 	add.w	r1, r4, #21
 8007a3e:	428f      	cmp	r7, r1
 8007a40:	bf38      	it	cc
 8007a42:	2204      	movcc	r2, #4
 8007a44:	9201      	str	r2, [sp, #4]
 8007a46:	9a02      	ldr	r2, [sp, #8]
 8007a48:	9303      	str	r3, [sp, #12]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d80c      	bhi.n	8007a68 <__multiply+0x9c>
 8007a4e:	2e00      	cmp	r6, #0
 8007a50:	dd03      	ble.n	8007a5a <__multiply+0x8e>
 8007a52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d05a      	beq.n	8007b10 <__multiply+0x144>
 8007a5a:	6106      	str	r6, [r0, #16]
 8007a5c:	b005      	add	sp, #20
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a62:	f843 2b04 	str.w	r2, [r3], #4
 8007a66:	e7d8      	b.n	8007a1a <__multiply+0x4e>
 8007a68:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a6c:	f1ba 0f00 	cmp.w	sl, #0
 8007a70:	d023      	beq.n	8007aba <__multiply+0xee>
 8007a72:	46a9      	mov	r9, r5
 8007a74:	f04f 0c00 	mov.w	ip, #0
 8007a78:	f104 0e14 	add.w	lr, r4, #20
 8007a7c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a80:	f8d9 1000 	ldr.w	r1, [r9]
 8007a84:	fa1f fb82 	uxth.w	fp, r2
 8007a88:	b289      	uxth	r1, r1
 8007a8a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a8e:	4461      	add	r1, ip
 8007a90:	f8d9 c000 	ldr.w	ip, [r9]
 8007a94:	0c12      	lsrs	r2, r2, #16
 8007a96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a9a:	fb0a c202 	mla	r2, sl, r2, ip
 8007a9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007aa2:	b289      	uxth	r1, r1
 8007aa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aa8:	4577      	cmp	r7, lr
 8007aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007aae:	f849 1b04 	str.w	r1, [r9], #4
 8007ab2:	d8e3      	bhi.n	8007a7c <__multiply+0xb0>
 8007ab4:	9a01      	ldr	r2, [sp, #4]
 8007ab6:	f845 c002 	str.w	ip, [r5, r2]
 8007aba:	9a03      	ldr	r2, [sp, #12]
 8007abc:	3304      	adds	r3, #4
 8007abe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ac2:	f1b9 0f00 	cmp.w	r9, #0
 8007ac6:	d021      	beq.n	8007b0c <__multiply+0x140>
 8007ac8:	46ae      	mov	lr, r5
 8007aca:	f04f 0a00 	mov.w	sl, #0
 8007ace:	6829      	ldr	r1, [r5, #0]
 8007ad0:	f104 0c14 	add.w	ip, r4, #20
 8007ad4:	f8bc b000 	ldrh.w	fp, [ip]
 8007ad8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007adc:	b289      	uxth	r1, r1
 8007ade:	fb09 220b 	mla	r2, r9, fp, r2
 8007ae2:	4452      	add	r2, sl
 8007ae4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ae8:	f84e 1b04 	str.w	r1, [lr], #4
 8007aec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007af0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007af4:	f8be 1000 	ldrh.w	r1, [lr]
 8007af8:	4567      	cmp	r7, ip
 8007afa:	fb09 110a 	mla	r1, r9, sl, r1
 8007afe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b06:	d8e5      	bhi.n	8007ad4 <__multiply+0x108>
 8007b08:	9a01      	ldr	r2, [sp, #4]
 8007b0a:	50a9      	str	r1, [r5, r2]
 8007b0c:	3504      	adds	r5, #4
 8007b0e:	e79a      	b.n	8007a46 <__multiply+0x7a>
 8007b10:	3e01      	subs	r6, #1
 8007b12:	e79c      	b.n	8007a4e <__multiply+0x82>
 8007b14:	08008d6d 	.word	0x08008d6d
 8007b18:	08008dde 	.word	0x08008dde

08007b1c <__pow5mult>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	4615      	mov	r5, r2
 8007b22:	f012 0203 	ands.w	r2, r2, #3
 8007b26:	4606      	mov	r6, r0
 8007b28:	460f      	mov	r7, r1
 8007b2a:	d007      	beq.n	8007b3c <__pow5mult+0x20>
 8007b2c:	4c25      	ldr	r4, [pc, #148]	; (8007bc4 <__pow5mult+0xa8>)
 8007b2e:	3a01      	subs	r2, #1
 8007b30:	2300      	movs	r3, #0
 8007b32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b36:	f7ff fe55 	bl	80077e4 <__multadd>
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	10ad      	asrs	r5, r5, #2
 8007b3e:	d03d      	beq.n	8007bbc <__pow5mult+0xa0>
 8007b40:	69f4      	ldr	r4, [r6, #28]
 8007b42:	b97c      	cbnz	r4, 8007b64 <__pow5mult+0x48>
 8007b44:	2010      	movs	r0, #16
 8007b46:	f7ff fd25 	bl	8007594 <malloc>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	61f0      	str	r0, [r6, #28]
 8007b4e:	b928      	cbnz	r0, 8007b5c <__pow5mult+0x40>
 8007b50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b54:	4b1c      	ldr	r3, [pc, #112]	; (8007bc8 <__pow5mult+0xac>)
 8007b56:	481d      	ldr	r0, [pc, #116]	; (8007bcc <__pow5mult+0xb0>)
 8007b58:	f000 fd38 	bl	80085cc <__assert_func>
 8007b5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b60:	6004      	str	r4, [r0, #0]
 8007b62:	60c4      	str	r4, [r0, #12]
 8007b64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b6c:	b94c      	cbnz	r4, 8007b82 <__pow5mult+0x66>
 8007b6e:	f240 2171 	movw	r1, #625	; 0x271
 8007b72:	4630      	mov	r0, r6
 8007b74:	f7ff ff14 	bl	80079a0 <__i2b>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b80:	6003      	str	r3, [r0, #0]
 8007b82:	f04f 0900 	mov.w	r9, #0
 8007b86:	07eb      	lsls	r3, r5, #31
 8007b88:	d50a      	bpl.n	8007ba0 <__pow5mult+0x84>
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7ff ff1c 	bl	80079cc <__multiply>
 8007b94:	4680      	mov	r8, r0
 8007b96:	4639      	mov	r1, r7
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff fe01 	bl	80077a0 <_Bfree>
 8007b9e:	4647      	mov	r7, r8
 8007ba0:	106d      	asrs	r5, r5, #1
 8007ba2:	d00b      	beq.n	8007bbc <__pow5mult+0xa0>
 8007ba4:	6820      	ldr	r0, [r4, #0]
 8007ba6:	b938      	cbnz	r0, 8007bb8 <__pow5mult+0x9c>
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4621      	mov	r1, r4
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff ff0d 	bl	80079cc <__multiply>
 8007bb2:	6020      	str	r0, [r4, #0]
 8007bb4:	f8c0 9000 	str.w	r9, [r0]
 8007bb8:	4604      	mov	r4, r0
 8007bba:	e7e4      	b.n	8007b86 <__pow5mult+0x6a>
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08008f28 	.word	0x08008f28
 8007bc8:	08008cfe 	.word	0x08008cfe
 8007bcc:	08008dde 	.word	0x08008dde

08007bd0 <__lshift>:
 8007bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	4691      	mov	r9, r2
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	6849      	ldr	r1, [r1, #4]
 8007bde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007be8:	f108 0601 	add.w	r6, r8, #1
 8007bec:	42b3      	cmp	r3, r6
 8007bee:	db0b      	blt.n	8007c08 <__lshift+0x38>
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff fd95 	bl	8007720 <_Balloc>
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	b948      	cbnz	r0, 8007c0e <__lshift+0x3e>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <__lshift+0xd0>)
 8007c02:	4828      	ldr	r0, [pc, #160]	; (8007ca4 <__lshift+0xd4>)
 8007c04:	f000 fce2 	bl	80085cc <__assert_func>
 8007c08:	3101      	adds	r1, #1
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	e7ee      	b.n	8007bec <__lshift+0x1c>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f100 0114 	add.w	r1, r0, #20
 8007c14:	f100 0210 	add.w	r2, r0, #16
 8007c18:	4618      	mov	r0, r3
 8007c1a:	4553      	cmp	r3, sl
 8007c1c:	db33      	blt.n	8007c86 <__lshift+0xb6>
 8007c1e:	6920      	ldr	r0, [r4, #16]
 8007c20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c24:	f104 0314 	add.w	r3, r4, #20
 8007c28:	f019 091f 	ands.w	r9, r9, #31
 8007c2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c34:	d02b      	beq.n	8007c8e <__lshift+0xbe>
 8007c36:	468a      	mov	sl, r1
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	fa00 f009 	lsl.w	r0, r0, r9
 8007c44:	4310      	orrs	r0, r2
 8007c46:	f84a 0b04 	str.w	r0, [sl], #4
 8007c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c4e:	459c      	cmp	ip, r3
 8007c50:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c54:	d8f3      	bhi.n	8007c3e <__lshift+0x6e>
 8007c56:	ebac 0304 	sub.w	r3, ip, r4
 8007c5a:	3b15      	subs	r3, #21
 8007c5c:	f023 0303 	bic.w	r3, r3, #3
 8007c60:	3304      	adds	r3, #4
 8007c62:	f104 0015 	add.w	r0, r4, #21
 8007c66:	4584      	cmp	ip, r0
 8007c68:	bf38      	it	cc
 8007c6a:	2304      	movcc	r3, #4
 8007c6c:	50ca      	str	r2, [r1, r3]
 8007c6e:	b10a      	cbz	r2, 8007c74 <__lshift+0xa4>
 8007c70:	f108 0602 	add.w	r6, r8, #2
 8007c74:	3e01      	subs	r6, #1
 8007c76:	4638      	mov	r0, r7
 8007c78:	4621      	mov	r1, r4
 8007c7a:	612e      	str	r6, [r5, #16]
 8007c7c:	f7ff fd90 	bl	80077a0 <_Bfree>
 8007c80:	4628      	mov	r0, r5
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	e7c5      	b.n	8007c1a <__lshift+0x4a>
 8007c8e:	3904      	subs	r1, #4
 8007c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c94:	459c      	cmp	ip, r3
 8007c96:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c9a:	d8f9      	bhi.n	8007c90 <__lshift+0xc0>
 8007c9c:	e7ea      	b.n	8007c74 <__lshift+0xa4>
 8007c9e:	bf00      	nop
 8007ca0:	08008d6d 	.word	0x08008d6d
 8007ca4:	08008dde 	.word	0x08008dde

08007ca8 <__mcmp>:
 8007ca8:	4603      	mov	r3, r0
 8007caa:	690a      	ldr	r2, [r1, #16]
 8007cac:	6900      	ldr	r0, [r0, #16]
 8007cae:	b530      	push	{r4, r5, lr}
 8007cb0:	1a80      	subs	r0, r0, r2
 8007cb2:	d10d      	bne.n	8007cd0 <__mcmp+0x28>
 8007cb4:	3314      	adds	r3, #20
 8007cb6:	3114      	adds	r1, #20
 8007cb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cc8:	4295      	cmp	r5, r2
 8007cca:	d002      	beq.n	8007cd2 <__mcmp+0x2a>
 8007ccc:	d304      	bcc.n	8007cd8 <__mcmp+0x30>
 8007cce:	2001      	movs	r0, #1
 8007cd0:	bd30      	pop	{r4, r5, pc}
 8007cd2:	42a3      	cmp	r3, r4
 8007cd4:	d3f4      	bcc.n	8007cc0 <__mcmp+0x18>
 8007cd6:	e7fb      	b.n	8007cd0 <__mcmp+0x28>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e7f8      	b.n	8007cd0 <__mcmp+0x28>
	...

08007ce0 <__mdiff>:
 8007ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4628      	mov	r0, r5
 8007cec:	4614      	mov	r4, r2
 8007cee:	f7ff ffdb 	bl	8007ca8 <__mcmp>
 8007cf2:	1e06      	subs	r6, r0, #0
 8007cf4:	d111      	bne.n	8007d1a <__mdiff+0x3a>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff fd11 	bl	8007720 <_Balloc>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	b928      	cbnz	r0, 8007d0e <__mdiff+0x2e>
 8007d02:	f240 2137 	movw	r1, #567	; 0x237
 8007d06:	4b3a      	ldr	r3, [pc, #232]	; (8007df0 <__mdiff+0x110>)
 8007d08:	483a      	ldr	r0, [pc, #232]	; (8007df4 <__mdiff+0x114>)
 8007d0a:	f000 fc5f 	bl	80085cc <__assert_func>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d14:	4610      	mov	r0, r2
 8007d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	bfa4      	itt	ge
 8007d1c:	4623      	movge	r3, r4
 8007d1e:	462c      	movge	r4, r5
 8007d20:	4638      	mov	r0, r7
 8007d22:	6861      	ldr	r1, [r4, #4]
 8007d24:	bfa6      	itte	ge
 8007d26:	461d      	movge	r5, r3
 8007d28:	2600      	movge	r6, #0
 8007d2a:	2601      	movlt	r6, #1
 8007d2c:	f7ff fcf8 	bl	8007720 <_Balloc>
 8007d30:	4602      	mov	r2, r0
 8007d32:	b918      	cbnz	r0, 8007d3c <__mdiff+0x5c>
 8007d34:	f240 2145 	movw	r1, #581	; 0x245
 8007d38:	4b2d      	ldr	r3, [pc, #180]	; (8007df0 <__mdiff+0x110>)
 8007d3a:	e7e5      	b.n	8007d08 <__mdiff+0x28>
 8007d3c:	f102 0814 	add.w	r8, r2, #20
 8007d40:	46c2      	mov	sl, r8
 8007d42:	f04f 0c00 	mov.w	ip, #0
 8007d46:	6927      	ldr	r7, [r4, #16]
 8007d48:	60c6      	str	r6, [r0, #12]
 8007d4a:	692e      	ldr	r6, [r5, #16]
 8007d4c:	f104 0014 	add.w	r0, r4, #20
 8007d50:	f105 0914 	add.w	r9, r5, #20
 8007d54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d5c:	3410      	adds	r4, #16
 8007d5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d62:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d66:	fa1f f18b 	uxth.w	r1, fp
 8007d6a:	4461      	add	r1, ip
 8007d6c:	fa1f fc83 	uxth.w	ip, r3
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	eba1 010c 	sub.w	r1, r1, ip
 8007d76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d7e:	b289      	uxth	r1, r1
 8007d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d84:	454e      	cmp	r6, r9
 8007d86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d8a:	f84a 1b04 	str.w	r1, [sl], #4
 8007d8e:	d8e6      	bhi.n	8007d5e <__mdiff+0x7e>
 8007d90:	1b73      	subs	r3, r6, r5
 8007d92:	3b15      	subs	r3, #21
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	3515      	adds	r5, #21
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	42ae      	cmp	r6, r5
 8007d9e:	bf38      	it	cc
 8007da0:	2304      	movcc	r3, #4
 8007da2:	4418      	add	r0, r3
 8007da4:	4443      	add	r3, r8
 8007da6:	461e      	mov	r6, r3
 8007da8:	4605      	mov	r5, r0
 8007daa:	4575      	cmp	r5, lr
 8007dac:	d30e      	bcc.n	8007dcc <__mdiff+0xec>
 8007dae:	f10e 0103 	add.w	r1, lr, #3
 8007db2:	1a09      	subs	r1, r1, r0
 8007db4:	f021 0103 	bic.w	r1, r1, #3
 8007db8:	3803      	subs	r0, #3
 8007dba:	4586      	cmp	lr, r0
 8007dbc:	bf38      	it	cc
 8007dbe:	2100      	movcc	r1, #0
 8007dc0:	440b      	add	r3, r1
 8007dc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dc6:	b189      	cbz	r1, 8007dec <__mdiff+0x10c>
 8007dc8:	6117      	str	r7, [r2, #16]
 8007dca:	e7a3      	b.n	8007d14 <__mdiff+0x34>
 8007dcc:	f855 8b04 	ldr.w	r8, [r5], #4
 8007dd0:	fa1f f188 	uxth.w	r1, r8
 8007dd4:	4461      	add	r1, ip
 8007dd6:	140c      	asrs	r4, r1, #16
 8007dd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ddc:	b289      	uxth	r1, r1
 8007dde:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007de2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007de6:	f846 1b04 	str.w	r1, [r6], #4
 8007dea:	e7de      	b.n	8007daa <__mdiff+0xca>
 8007dec:	3f01      	subs	r7, #1
 8007dee:	e7e8      	b.n	8007dc2 <__mdiff+0xe2>
 8007df0:	08008d6d 	.word	0x08008d6d
 8007df4:	08008dde 	.word	0x08008dde

08007df8 <__ulp>:
 8007df8:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <__ulp+0x3c>)
 8007dfa:	400b      	ands	r3, r1
 8007dfc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dc08      	bgt.n	8007e16 <__ulp+0x1e>
 8007e04:	425b      	negs	r3, r3
 8007e06:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e0e:	da04      	bge.n	8007e1a <__ulp+0x22>
 8007e10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e14:	4113      	asrs	r3, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	e008      	b.n	8007e2c <__ulp+0x34>
 8007e1a:	f1a2 0314 	sub.w	r3, r2, #20
 8007e1e:	2b1e      	cmp	r3, #30
 8007e20:	bfd6      	itet	le
 8007e22:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007e26:	2201      	movgt	r2, #1
 8007e28:	40da      	lsrle	r2, r3
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	7ff00000 	.word	0x7ff00000

08007e38 <__b2d>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	6905      	ldr	r5, [r0, #16]
 8007e3c:	f100 0714 	add.w	r7, r0, #20
 8007e40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007e44:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007e48:	1f2e      	subs	r6, r5, #4
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7ff fd5a 	bl	8007904 <__hi0bits>
 8007e50:	f1c0 0220 	rsb	r2, r0, #32
 8007e54:	280a      	cmp	r0, #10
 8007e56:	4603      	mov	r3, r0
 8007e58:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007ec4 <__b2d+0x8c>
 8007e5c:	600a      	str	r2, [r1, #0]
 8007e5e:	dc12      	bgt.n	8007e86 <__b2d+0x4e>
 8007e60:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e64:	fa24 f20e 	lsr.w	r2, r4, lr
 8007e68:	42b7      	cmp	r7, r6
 8007e6a:	ea42 010c 	orr.w	r1, r2, ip
 8007e6e:	bf2c      	ite	cs
 8007e70:	2200      	movcs	r2, #0
 8007e72:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e76:	3315      	adds	r3, #21
 8007e78:	fa04 f303 	lsl.w	r3, r4, r3
 8007e7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e80:	431a      	orrs	r2, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e86:	42b7      	cmp	r7, r6
 8007e88:	bf2e      	itee	cs
 8007e8a:	2200      	movcs	r2, #0
 8007e8c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007e90:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e94:	3b0b      	subs	r3, #11
 8007e96:	d012      	beq.n	8007ebe <__b2d+0x86>
 8007e98:	f1c3 0520 	rsb	r5, r3, #32
 8007e9c:	fa22 f105 	lsr.w	r1, r2, r5
 8007ea0:	409c      	lsls	r4, r3
 8007ea2:	430c      	orrs	r4, r1
 8007ea4:	42be      	cmp	r6, r7
 8007ea6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007eaa:	bf94      	ite	ls
 8007eac:	2400      	movls	r4, #0
 8007eae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	40ec      	lsrs	r4, r5
 8007eb6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007eba:	4322      	orrs	r2, r4
 8007ebc:	e7e1      	b.n	8007e82 <__b2d+0x4a>
 8007ebe:	ea44 010c 	orr.w	r1, r4, ip
 8007ec2:	e7de      	b.n	8007e82 <__b2d+0x4a>
 8007ec4:	3ff00000 	.word	0x3ff00000

08007ec8 <__d2b>:
 8007ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4617      	mov	r7, r2
 8007ece:	461c      	mov	r4, r3
 8007ed0:	9e08      	ldr	r6, [sp, #32]
 8007ed2:	f7ff fc25 	bl	8007720 <_Balloc>
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	b930      	cbnz	r0, 8007ee8 <__d2b+0x20>
 8007eda:	4602      	mov	r2, r0
 8007edc:	f240 310f 	movw	r1, #783	; 0x30f
 8007ee0:	4b22      	ldr	r3, [pc, #136]	; (8007f6c <__d2b+0xa4>)
 8007ee2:	4823      	ldr	r0, [pc, #140]	; (8007f70 <__d2b+0xa8>)
 8007ee4:	f000 fb72 	bl	80085cc <__assert_func>
 8007ee8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007eec:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007ef0:	bb24      	cbnz	r4, 8007f3c <__d2b+0x74>
 8007ef2:	2f00      	cmp	r7, #0
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	d026      	beq.n	8007f46 <__d2b+0x7e>
 8007ef8:	4668      	mov	r0, sp
 8007efa:	9700      	str	r7, [sp, #0]
 8007efc:	f7ff fd22 	bl	8007944 <__lo0bits>
 8007f00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f04:	b1e8      	cbz	r0, 8007f42 <__d2b+0x7a>
 8007f06:	f1c0 0320 	rsb	r3, r0, #32
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	40c2      	lsrs	r2, r0
 8007f12:	616b      	str	r3, [r5, #20]
 8007f14:	9201      	str	r2, [sp, #4]
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bf14      	ite	ne
 8007f1c:	2102      	movne	r1, #2
 8007f1e:	2101      	moveq	r1, #1
 8007f20:	61ab      	str	r3, [r5, #24]
 8007f22:	6129      	str	r1, [r5, #16]
 8007f24:	b1bc      	cbz	r4, 8007f56 <__d2b+0x8e>
 8007f26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f2a:	4404      	add	r4, r0
 8007f2c:	6034      	str	r4, [r6, #0]
 8007f2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f34:	6018      	str	r0, [r3, #0]
 8007f36:	4628      	mov	r0, r5
 8007f38:	b003      	add	sp, #12
 8007f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f40:	e7d7      	b.n	8007ef2 <__d2b+0x2a>
 8007f42:	6169      	str	r1, [r5, #20]
 8007f44:	e7e7      	b.n	8007f16 <__d2b+0x4e>
 8007f46:	a801      	add	r0, sp, #4
 8007f48:	f7ff fcfc 	bl	8007944 <__lo0bits>
 8007f4c:	9b01      	ldr	r3, [sp, #4]
 8007f4e:	2101      	movs	r1, #1
 8007f50:	616b      	str	r3, [r5, #20]
 8007f52:	3020      	adds	r0, #32
 8007f54:	e7e5      	b.n	8007f22 <__d2b+0x5a>
 8007f56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f5a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007f5e:	6030      	str	r0, [r6, #0]
 8007f60:	6918      	ldr	r0, [r3, #16]
 8007f62:	f7ff fccf 	bl	8007904 <__hi0bits>
 8007f66:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f6a:	e7e2      	b.n	8007f32 <__d2b+0x6a>
 8007f6c:	08008d6d 	.word	0x08008d6d
 8007f70:	08008dde 	.word	0x08008dde

08007f74 <__ratio>:
 8007f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	4688      	mov	r8, r1
 8007f7a:	4669      	mov	r1, sp
 8007f7c:	4681      	mov	r9, r0
 8007f7e:	f7ff ff5b 	bl	8007e38 <__b2d>
 8007f82:	460f      	mov	r7, r1
 8007f84:	4604      	mov	r4, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	4640      	mov	r0, r8
 8007f8a:	a901      	add	r1, sp, #4
 8007f8c:	f7ff ff54 	bl	8007e38 <__b2d>
 8007f90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f98:	468b      	mov	fp, r1
 8007f9a:	eba3 0c02 	sub.w	ip, r3, r2
 8007f9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bfd5      	itete	le
 8007fac:	460a      	movle	r2, r1
 8007fae:	462a      	movgt	r2, r5
 8007fb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007fb4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007fb8:	bfd8      	it	le
 8007fba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007fbe:	465b      	mov	r3, fp
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7f8 fbb1 	bl	800072c <__aeabi_ddiv>
 8007fca:	b003      	add	sp, #12
 8007fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fd0 <__copybits>:
 8007fd0:	3901      	subs	r1, #1
 8007fd2:	b570      	push	{r4, r5, r6, lr}
 8007fd4:	1149      	asrs	r1, r1, #5
 8007fd6:	6914      	ldr	r4, [r2, #16]
 8007fd8:	3101      	adds	r1, #1
 8007fda:	f102 0314 	add.w	r3, r2, #20
 8007fde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fe2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fe6:	1f05      	subs	r5, r0, #4
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d30c      	bcc.n	8008006 <__copybits+0x36>
 8007fec:	1aa3      	subs	r3, r4, r2
 8007fee:	3b11      	subs	r3, #17
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	3211      	adds	r2, #17
 8007ff6:	42a2      	cmp	r2, r4
 8007ff8:	bf88      	it	hi
 8007ffa:	2300      	movhi	r3, #0
 8007ffc:	4418      	add	r0, r3
 8007ffe:	2300      	movs	r3, #0
 8008000:	4288      	cmp	r0, r1
 8008002:	d305      	bcc.n	8008010 <__copybits+0x40>
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	f853 6b04 	ldr.w	r6, [r3], #4
 800800a:	f845 6f04 	str.w	r6, [r5, #4]!
 800800e:	e7eb      	b.n	8007fe8 <__copybits+0x18>
 8008010:	f840 3b04 	str.w	r3, [r0], #4
 8008014:	e7f4      	b.n	8008000 <__copybits+0x30>

08008016 <__any_on>:
 8008016:	f100 0214 	add.w	r2, r0, #20
 800801a:	6900      	ldr	r0, [r0, #16]
 800801c:	114b      	asrs	r3, r1, #5
 800801e:	4298      	cmp	r0, r3
 8008020:	b510      	push	{r4, lr}
 8008022:	db11      	blt.n	8008048 <__any_on+0x32>
 8008024:	dd0a      	ble.n	800803c <__any_on+0x26>
 8008026:	f011 011f 	ands.w	r1, r1, #31
 800802a:	d007      	beq.n	800803c <__any_on+0x26>
 800802c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008030:	fa24 f001 	lsr.w	r0, r4, r1
 8008034:	fa00 f101 	lsl.w	r1, r0, r1
 8008038:	428c      	cmp	r4, r1
 800803a:	d10b      	bne.n	8008054 <__any_on+0x3e>
 800803c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008040:	4293      	cmp	r3, r2
 8008042:	d803      	bhi.n	800804c <__any_on+0x36>
 8008044:	2000      	movs	r0, #0
 8008046:	bd10      	pop	{r4, pc}
 8008048:	4603      	mov	r3, r0
 800804a:	e7f7      	b.n	800803c <__any_on+0x26>
 800804c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008050:	2900      	cmp	r1, #0
 8008052:	d0f5      	beq.n	8008040 <__any_on+0x2a>
 8008054:	2001      	movs	r0, #1
 8008056:	e7f6      	b.n	8008046 <__any_on+0x30>

08008058 <_strtol_l.constprop.0>:
 8008058:	2b01      	cmp	r3, #1
 800805a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805e:	4686      	mov	lr, r0
 8008060:	4690      	mov	r8, r2
 8008062:	d001      	beq.n	8008068 <_strtol_l.constprop.0+0x10>
 8008064:	2b24      	cmp	r3, #36	; 0x24
 8008066:	d906      	bls.n	8008076 <_strtol_l.constprop.0+0x1e>
 8008068:	f7fe f830 	bl	80060cc <__errno>
 800806c:	2316      	movs	r3, #22
 800806e:	6003      	str	r3, [r0, #0]
 8008070:	2000      	movs	r0, #0
 8008072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008076:	460d      	mov	r5, r1
 8008078:	4835      	ldr	r0, [pc, #212]	; (8008150 <_strtol_l.constprop.0+0xf8>)
 800807a:	462a      	mov	r2, r5
 800807c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008080:	5d06      	ldrb	r6, [r0, r4]
 8008082:	f016 0608 	ands.w	r6, r6, #8
 8008086:	d1f8      	bne.n	800807a <_strtol_l.constprop.0+0x22>
 8008088:	2c2d      	cmp	r4, #45	; 0x2d
 800808a:	d12e      	bne.n	80080ea <_strtol_l.constprop.0+0x92>
 800808c:	2601      	movs	r6, #1
 800808e:	782c      	ldrb	r4, [r5, #0]
 8008090:	1c95      	adds	r5, r2, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d057      	beq.n	8008146 <_strtol_l.constprop.0+0xee>
 8008096:	2b10      	cmp	r3, #16
 8008098:	d109      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800809a:	2c30      	cmp	r4, #48	; 0x30
 800809c:	d107      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800809e:	782a      	ldrb	r2, [r5, #0]
 80080a0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80080a4:	2a58      	cmp	r2, #88	; 0x58
 80080a6:	d149      	bne.n	800813c <_strtol_l.constprop.0+0xe4>
 80080a8:	2310      	movs	r3, #16
 80080aa:	786c      	ldrb	r4, [r5, #1]
 80080ac:	3502      	adds	r5, #2
 80080ae:	2200      	movs	r2, #0
 80080b0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80080b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80080b8:	fbbc f9f3 	udiv	r9, ip, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	fb03 ca19 	mls	sl, r3, r9, ip
 80080c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80080c6:	2f09      	cmp	r7, #9
 80080c8:	d814      	bhi.n	80080f4 <_strtol_l.constprop.0+0x9c>
 80080ca:	463c      	mov	r4, r7
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	dd20      	ble.n	8008112 <_strtol_l.constprop.0+0xba>
 80080d0:	1c57      	adds	r7, r2, #1
 80080d2:	d007      	beq.n	80080e4 <_strtol_l.constprop.0+0x8c>
 80080d4:	4581      	cmp	r9, r0
 80080d6:	d319      	bcc.n	800810c <_strtol_l.constprop.0+0xb4>
 80080d8:	d101      	bne.n	80080de <_strtol_l.constprop.0+0x86>
 80080da:	45a2      	cmp	sl, r4
 80080dc:	db16      	blt.n	800810c <_strtol_l.constprop.0+0xb4>
 80080de:	2201      	movs	r2, #1
 80080e0:	fb00 4003 	mla	r0, r0, r3, r4
 80080e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080e8:	e7eb      	b.n	80080c2 <_strtol_l.constprop.0+0x6a>
 80080ea:	2c2b      	cmp	r4, #43	; 0x2b
 80080ec:	bf04      	itt	eq
 80080ee:	782c      	ldrbeq	r4, [r5, #0]
 80080f0:	1c95      	addeq	r5, r2, #2
 80080f2:	e7ce      	b.n	8008092 <_strtol_l.constprop.0+0x3a>
 80080f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80080f8:	2f19      	cmp	r7, #25
 80080fa:	d801      	bhi.n	8008100 <_strtol_l.constprop.0+0xa8>
 80080fc:	3c37      	subs	r4, #55	; 0x37
 80080fe:	e7e5      	b.n	80080cc <_strtol_l.constprop.0+0x74>
 8008100:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008104:	2f19      	cmp	r7, #25
 8008106:	d804      	bhi.n	8008112 <_strtol_l.constprop.0+0xba>
 8008108:	3c57      	subs	r4, #87	; 0x57
 800810a:	e7df      	b.n	80080cc <_strtol_l.constprop.0+0x74>
 800810c:	f04f 32ff 	mov.w	r2, #4294967295
 8008110:	e7e8      	b.n	80080e4 <_strtol_l.constprop.0+0x8c>
 8008112:	1c53      	adds	r3, r2, #1
 8008114:	d108      	bne.n	8008128 <_strtol_l.constprop.0+0xd0>
 8008116:	2322      	movs	r3, #34	; 0x22
 8008118:	4660      	mov	r0, ip
 800811a:	f8ce 3000 	str.w	r3, [lr]
 800811e:	f1b8 0f00 	cmp.w	r8, #0
 8008122:	d0a6      	beq.n	8008072 <_strtol_l.constprop.0+0x1a>
 8008124:	1e69      	subs	r1, r5, #1
 8008126:	e006      	b.n	8008136 <_strtol_l.constprop.0+0xde>
 8008128:	b106      	cbz	r6, 800812c <_strtol_l.constprop.0+0xd4>
 800812a:	4240      	negs	r0, r0
 800812c:	f1b8 0f00 	cmp.w	r8, #0
 8008130:	d09f      	beq.n	8008072 <_strtol_l.constprop.0+0x1a>
 8008132:	2a00      	cmp	r2, #0
 8008134:	d1f6      	bne.n	8008124 <_strtol_l.constprop.0+0xcc>
 8008136:	f8c8 1000 	str.w	r1, [r8]
 800813a:	e79a      	b.n	8008072 <_strtol_l.constprop.0+0x1a>
 800813c:	2430      	movs	r4, #48	; 0x30
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1b5      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 8008142:	2308      	movs	r3, #8
 8008144:	e7b3      	b.n	80080ae <_strtol_l.constprop.0+0x56>
 8008146:	2c30      	cmp	r4, #48	; 0x30
 8008148:	d0a9      	beq.n	800809e <_strtol_l.constprop.0+0x46>
 800814a:	230a      	movs	r3, #10
 800814c:	e7af      	b.n	80080ae <_strtol_l.constprop.0+0x56>
 800814e:	bf00      	nop
 8008150:	08008f35 	.word	0x08008f35

08008154 <_strtol_r>:
 8008154:	f7ff bf80 	b.w	8008058 <_strtol_l.constprop.0>

08008158 <__ascii_wctomb>:
 8008158:	4603      	mov	r3, r0
 800815a:	4608      	mov	r0, r1
 800815c:	b141      	cbz	r1, 8008170 <__ascii_wctomb+0x18>
 800815e:	2aff      	cmp	r2, #255	; 0xff
 8008160:	d904      	bls.n	800816c <__ascii_wctomb+0x14>
 8008162:	228a      	movs	r2, #138	; 0x8a
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	4770      	bx	lr
 800816c:	2001      	movs	r0, #1
 800816e:	700a      	strb	r2, [r1, #0]
 8008170:	4770      	bx	lr

08008172 <__ssputs_r>:
 8008172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008176:	461f      	mov	r7, r3
 8008178:	688e      	ldr	r6, [r1, #8]
 800817a:	4682      	mov	sl, r0
 800817c:	42be      	cmp	r6, r7
 800817e:	460c      	mov	r4, r1
 8008180:	4690      	mov	r8, r2
 8008182:	680b      	ldr	r3, [r1, #0]
 8008184:	d82c      	bhi.n	80081e0 <__ssputs_r+0x6e>
 8008186:	898a      	ldrh	r2, [r1, #12]
 8008188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800818c:	d026      	beq.n	80081dc <__ssputs_r+0x6a>
 800818e:	6965      	ldr	r5, [r4, #20]
 8008190:	6909      	ldr	r1, [r1, #16]
 8008192:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008196:	eba3 0901 	sub.w	r9, r3, r1
 800819a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800819e:	1c7b      	adds	r3, r7, #1
 80081a0:	444b      	add	r3, r9
 80081a2:	106d      	asrs	r5, r5, #1
 80081a4:	429d      	cmp	r5, r3
 80081a6:	bf38      	it	cc
 80081a8:	461d      	movcc	r5, r3
 80081aa:	0553      	lsls	r3, r2, #21
 80081ac:	d527      	bpl.n	80081fe <__ssputs_r+0x8c>
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7ff fa18 	bl	80075e4 <_malloc_r>
 80081b4:	4606      	mov	r6, r0
 80081b6:	b360      	cbz	r0, 8008212 <__ssputs_r+0xa0>
 80081b8:	464a      	mov	r2, r9
 80081ba:	6921      	ldr	r1, [r4, #16]
 80081bc:	f7fd ffc1 	bl	8006142 <memcpy>
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ca:	81a3      	strh	r3, [r4, #12]
 80081cc:	6126      	str	r6, [r4, #16]
 80081ce:	444e      	add	r6, r9
 80081d0:	6026      	str	r6, [r4, #0]
 80081d2:	463e      	mov	r6, r7
 80081d4:	6165      	str	r5, [r4, #20]
 80081d6:	eba5 0509 	sub.w	r5, r5, r9
 80081da:	60a5      	str	r5, [r4, #8]
 80081dc:	42be      	cmp	r6, r7
 80081de:	d900      	bls.n	80081e2 <__ssputs_r+0x70>
 80081e0:	463e      	mov	r6, r7
 80081e2:	4632      	mov	r2, r6
 80081e4:	4641      	mov	r1, r8
 80081e6:	6820      	ldr	r0, [r4, #0]
 80081e8:	f000 f9c6 	bl	8008578 <memmove>
 80081ec:	2000      	movs	r0, #0
 80081ee:	68a3      	ldr	r3, [r4, #8]
 80081f0:	1b9b      	subs	r3, r3, r6
 80081f2:	60a3      	str	r3, [r4, #8]
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	4433      	add	r3, r6
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fe:	462a      	mov	r2, r5
 8008200:	f000 fa16 	bl	8008630 <_realloc_r>
 8008204:	4606      	mov	r6, r0
 8008206:	2800      	cmp	r0, #0
 8008208:	d1e0      	bne.n	80081cc <__ssputs_r+0x5a>
 800820a:	4650      	mov	r0, sl
 800820c:	6921      	ldr	r1, [r4, #16]
 800820e:	f7fe fe1f 	bl	8006e50 <_free_r>
 8008212:	230c      	movs	r3, #12
 8008214:	f8ca 3000 	str.w	r3, [sl]
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	e7e9      	b.n	80081fa <__ssputs_r+0x88>
	...

08008228 <_svfiprintf_r>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	4698      	mov	r8, r3
 800822e:	898b      	ldrh	r3, [r1, #12]
 8008230:	4607      	mov	r7, r0
 8008232:	061b      	lsls	r3, r3, #24
 8008234:	460d      	mov	r5, r1
 8008236:	4614      	mov	r4, r2
 8008238:	b09d      	sub	sp, #116	; 0x74
 800823a:	d50e      	bpl.n	800825a <_svfiprintf_r+0x32>
 800823c:	690b      	ldr	r3, [r1, #16]
 800823e:	b963      	cbnz	r3, 800825a <_svfiprintf_r+0x32>
 8008240:	2140      	movs	r1, #64	; 0x40
 8008242:	f7ff f9cf 	bl	80075e4 <_malloc_r>
 8008246:	6028      	str	r0, [r5, #0]
 8008248:	6128      	str	r0, [r5, #16]
 800824a:	b920      	cbnz	r0, 8008256 <_svfiprintf_r+0x2e>
 800824c:	230c      	movs	r3, #12
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
 8008254:	e0d0      	b.n	80083f8 <_svfiprintf_r+0x1d0>
 8008256:	2340      	movs	r3, #64	; 0x40
 8008258:	616b      	str	r3, [r5, #20]
 800825a:	2300      	movs	r3, #0
 800825c:	9309      	str	r3, [sp, #36]	; 0x24
 800825e:	2320      	movs	r3, #32
 8008260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008264:	2330      	movs	r3, #48	; 0x30
 8008266:	f04f 0901 	mov.w	r9, #1
 800826a:	f8cd 800c 	str.w	r8, [sp, #12]
 800826e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008410 <_svfiprintf_r+0x1e8>
 8008272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008276:	4623      	mov	r3, r4
 8008278:	469a      	mov	sl, r3
 800827a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800827e:	b10a      	cbz	r2, 8008284 <_svfiprintf_r+0x5c>
 8008280:	2a25      	cmp	r2, #37	; 0x25
 8008282:	d1f9      	bne.n	8008278 <_svfiprintf_r+0x50>
 8008284:	ebba 0b04 	subs.w	fp, sl, r4
 8008288:	d00b      	beq.n	80082a2 <_svfiprintf_r+0x7a>
 800828a:	465b      	mov	r3, fp
 800828c:	4622      	mov	r2, r4
 800828e:	4629      	mov	r1, r5
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff ff6e 	bl	8008172 <__ssputs_r>
 8008296:	3001      	adds	r0, #1
 8008298:	f000 80a9 	beq.w	80083ee <_svfiprintf_r+0x1c6>
 800829c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829e:	445a      	add	r2, fp
 80082a0:	9209      	str	r2, [sp, #36]	; 0x24
 80082a2:	f89a 3000 	ldrb.w	r3, [sl]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80a1 	beq.w	80083ee <_svfiprintf_r+0x1c6>
 80082ac:	2300      	movs	r3, #0
 80082ae:	f04f 32ff 	mov.w	r2, #4294967295
 80082b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b6:	f10a 0a01 	add.w	sl, sl, #1
 80082ba:	9304      	str	r3, [sp, #16]
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c2:	931a      	str	r3, [sp, #104]	; 0x68
 80082c4:	4654      	mov	r4, sl
 80082c6:	2205      	movs	r2, #5
 80082c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082cc:	4850      	ldr	r0, [pc, #320]	; (8008410 <_svfiprintf_r+0x1e8>)
 80082ce:	f7fd ff2a 	bl	8006126 <memchr>
 80082d2:	9a04      	ldr	r2, [sp, #16]
 80082d4:	b9d8      	cbnz	r0, 800830e <_svfiprintf_r+0xe6>
 80082d6:	06d0      	lsls	r0, r2, #27
 80082d8:	bf44      	itt	mi
 80082da:	2320      	movmi	r3, #32
 80082dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e0:	0711      	lsls	r1, r2, #28
 80082e2:	bf44      	itt	mi
 80082e4:	232b      	movmi	r3, #43	; 0x2b
 80082e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ea:	f89a 3000 	ldrb.w	r3, [sl]
 80082ee:	2b2a      	cmp	r3, #42	; 0x2a
 80082f0:	d015      	beq.n	800831e <_svfiprintf_r+0xf6>
 80082f2:	4654      	mov	r4, sl
 80082f4:	2000      	movs	r0, #0
 80082f6:	f04f 0c0a 	mov.w	ip, #10
 80082fa:	9a07      	ldr	r2, [sp, #28]
 80082fc:	4621      	mov	r1, r4
 80082fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008302:	3b30      	subs	r3, #48	; 0x30
 8008304:	2b09      	cmp	r3, #9
 8008306:	d94d      	bls.n	80083a4 <_svfiprintf_r+0x17c>
 8008308:	b1b0      	cbz	r0, 8008338 <_svfiprintf_r+0x110>
 800830a:	9207      	str	r2, [sp, #28]
 800830c:	e014      	b.n	8008338 <_svfiprintf_r+0x110>
 800830e:	eba0 0308 	sub.w	r3, r0, r8
 8008312:	fa09 f303 	lsl.w	r3, r9, r3
 8008316:	4313      	orrs	r3, r2
 8008318:	46a2      	mov	sl, r4
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	e7d2      	b.n	80082c4 <_svfiprintf_r+0x9c>
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	1d19      	adds	r1, r3, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	9103      	str	r1, [sp, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	bfbb      	ittet	lt
 800832a:	425b      	neglt	r3, r3
 800832c:	f042 0202 	orrlt.w	r2, r2, #2
 8008330:	9307      	strge	r3, [sp, #28]
 8008332:	9307      	strlt	r3, [sp, #28]
 8008334:	bfb8      	it	lt
 8008336:	9204      	strlt	r2, [sp, #16]
 8008338:	7823      	ldrb	r3, [r4, #0]
 800833a:	2b2e      	cmp	r3, #46	; 0x2e
 800833c:	d10c      	bne.n	8008358 <_svfiprintf_r+0x130>
 800833e:	7863      	ldrb	r3, [r4, #1]
 8008340:	2b2a      	cmp	r3, #42	; 0x2a
 8008342:	d134      	bne.n	80083ae <_svfiprintf_r+0x186>
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	3402      	adds	r4, #2
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	9203      	str	r2, [sp, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfb8      	it	lt
 8008352:	f04f 33ff 	movlt.w	r3, #4294967295
 8008356:	9305      	str	r3, [sp, #20]
 8008358:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008414 <_svfiprintf_r+0x1ec>
 800835c:	2203      	movs	r2, #3
 800835e:	4650      	mov	r0, sl
 8008360:	7821      	ldrb	r1, [r4, #0]
 8008362:	f7fd fee0 	bl	8006126 <memchr>
 8008366:	b138      	cbz	r0, 8008378 <_svfiprintf_r+0x150>
 8008368:	2240      	movs	r2, #64	; 0x40
 800836a:	9b04      	ldr	r3, [sp, #16]
 800836c:	eba0 000a 	sub.w	r0, r0, sl
 8008370:	4082      	lsls	r2, r0
 8008372:	4313      	orrs	r3, r2
 8008374:	3401      	adds	r4, #1
 8008376:	9304      	str	r3, [sp, #16]
 8008378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837c:	2206      	movs	r2, #6
 800837e:	4826      	ldr	r0, [pc, #152]	; (8008418 <_svfiprintf_r+0x1f0>)
 8008380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008384:	f7fd fecf 	bl	8006126 <memchr>
 8008388:	2800      	cmp	r0, #0
 800838a:	d038      	beq.n	80083fe <_svfiprintf_r+0x1d6>
 800838c:	4b23      	ldr	r3, [pc, #140]	; (800841c <_svfiprintf_r+0x1f4>)
 800838e:	bb1b      	cbnz	r3, 80083d8 <_svfiprintf_r+0x1b0>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	3307      	adds	r3, #7
 8008394:	f023 0307 	bic.w	r3, r3, #7
 8008398:	3308      	adds	r3, #8
 800839a:	9303      	str	r3, [sp, #12]
 800839c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839e:	4433      	add	r3, r6
 80083a0:	9309      	str	r3, [sp, #36]	; 0x24
 80083a2:	e768      	b.n	8008276 <_svfiprintf_r+0x4e>
 80083a4:	460c      	mov	r4, r1
 80083a6:	2001      	movs	r0, #1
 80083a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ac:	e7a6      	b.n	80082fc <_svfiprintf_r+0xd4>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f04f 0c0a 	mov.w	ip, #10
 80083b4:	4619      	mov	r1, r3
 80083b6:	3401      	adds	r4, #1
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	4620      	mov	r0, r4
 80083bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c0:	3a30      	subs	r2, #48	; 0x30
 80083c2:	2a09      	cmp	r2, #9
 80083c4:	d903      	bls.n	80083ce <_svfiprintf_r+0x1a6>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0c6      	beq.n	8008358 <_svfiprintf_r+0x130>
 80083ca:	9105      	str	r1, [sp, #20]
 80083cc:	e7c4      	b.n	8008358 <_svfiprintf_r+0x130>
 80083ce:	4604      	mov	r4, r0
 80083d0:	2301      	movs	r3, #1
 80083d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d6:	e7f0      	b.n	80083ba <_svfiprintf_r+0x192>
 80083d8:	ab03      	add	r3, sp, #12
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	462a      	mov	r2, r5
 80083de:	4638      	mov	r0, r7
 80083e0:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <_svfiprintf_r+0x1f8>)
 80083e2:	a904      	add	r1, sp, #16
 80083e4:	f7fc feea 	bl	80051bc <_printf_float>
 80083e8:	1c42      	adds	r2, r0, #1
 80083ea:	4606      	mov	r6, r0
 80083ec:	d1d6      	bne.n	800839c <_svfiprintf_r+0x174>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	065b      	lsls	r3, r3, #25
 80083f2:	f53f af2d 	bmi.w	8008250 <_svfiprintf_r+0x28>
 80083f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083f8:	b01d      	add	sp, #116	; 0x74
 80083fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fe:	ab03      	add	r3, sp, #12
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	462a      	mov	r2, r5
 8008404:	4638      	mov	r0, r7
 8008406:	4b06      	ldr	r3, [pc, #24]	; (8008420 <_svfiprintf_r+0x1f8>)
 8008408:	a904      	add	r1, sp, #16
 800840a:	f7fd f977 	bl	80056fc <_printf_i>
 800840e:	e7eb      	b.n	80083e8 <_svfiprintf_r+0x1c0>
 8008410:	08009035 	.word	0x08009035
 8008414:	0800903b 	.word	0x0800903b
 8008418:	0800903f 	.word	0x0800903f
 800841c:	080051bd 	.word	0x080051bd
 8008420:	08008173 	.word	0x08008173

08008424 <__sflush_r>:
 8008424:	898a      	ldrh	r2, [r1, #12]
 8008426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008428:	4605      	mov	r5, r0
 800842a:	0710      	lsls	r0, r2, #28
 800842c:	460c      	mov	r4, r1
 800842e:	d457      	bmi.n	80084e0 <__sflush_r+0xbc>
 8008430:	684b      	ldr	r3, [r1, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	dc04      	bgt.n	8008440 <__sflush_r+0x1c>
 8008436:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	dc01      	bgt.n	8008440 <__sflush_r+0x1c>
 800843c:	2000      	movs	r0, #0
 800843e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008442:	2e00      	cmp	r6, #0
 8008444:	d0fa      	beq.n	800843c <__sflush_r+0x18>
 8008446:	2300      	movs	r3, #0
 8008448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800844c:	682f      	ldr	r7, [r5, #0]
 800844e:	6a21      	ldr	r1, [r4, #32]
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	d032      	beq.n	80084ba <__sflush_r+0x96>
 8008454:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	075a      	lsls	r2, r3, #29
 800845a:	d505      	bpl.n	8008468 <__sflush_r+0x44>
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	1ac0      	subs	r0, r0, r3
 8008460:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008462:	b10b      	cbz	r3, 8008468 <__sflush_r+0x44>
 8008464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008466:	1ac0      	subs	r0, r0, r3
 8008468:	2300      	movs	r3, #0
 800846a:	4602      	mov	r2, r0
 800846c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800846e:	4628      	mov	r0, r5
 8008470:	6a21      	ldr	r1, [r4, #32]
 8008472:	47b0      	blx	r6
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	d106      	bne.n	8008488 <__sflush_r+0x64>
 800847a:	6829      	ldr	r1, [r5, #0]
 800847c:	291d      	cmp	r1, #29
 800847e:	d82b      	bhi.n	80084d8 <__sflush_r+0xb4>
 8008480:	4a28      	ldr	r2, [pc, #160]	; (8008524 <__sflush_r+0x100>)
 8008482:	410a      	asrs	r2, r1
 8008484:	07d6      	lsls	r6, r2, #31
 8008486:	d427      	bmi.n	80084d8 <__sflush_r+0xb4>
 8008488:	2200      	movs	r2, #0
 800848a:	6062      	str	r2, [r4, #4]
 800848c:	6922      	ldr	r2, [r4, #16]
 800848e:	04d9      	lsls	r1, r3, #19
 8008490:	6022      	str	r2, [r4, #0]
 8008492:	d504      	bpl.n	800849e <__sflush_r+0x7a>
 8008494:	1c42      	adds	r2, r0, #1
 8008496:	d101      	bne.n	800849c <__sflush_r+0x78>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b903      	cbnz	r3, 800849e <__sflush_r+0x7a>
 800849c:	6560      	str	r0, [r4, #84]	; 0x54
 800849e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084a0:	602f      	str	r7, [r5, #0]
 80084a2:	2900      	cmp	r1, #0
 80084a4:	d0ca      	beq.n	800843c <__sflush_r+0x18>
 80084a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084aa:	4299      	cmp	r1, r3
 80084ac:	d002      	beq.n	80084b4 <__sflush_r+0x90>
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7fe fcce 	bl	8006e50 <_free_r>
 80084b4:	2000      	movs	r0, #0
 80084b6:	6360      	str	r0, [r4, #52]	; 0x34
 80084b8:	e7c1      	b.n	800843e <__sflush_r+0x1a>
 80084ba:	2301      	movs	r3, #1
 80084bc:	4628      	mov	r0, r5
 80084be:	47b0      	blx	r6
 80084c0:	1c41      	adds	r1, r0, #1
 80084c2:	d1c8      	bne.n	8008456 <__sflush_r+0x32>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0c5      	beq.n	8008456 <__sflush_r+0x32>
 80084ca:	2b1d      	cmp	r3, #29
 80084cc:	d001      	beq.n	80084d2 <__sflush_r+0xae>
 80084ce:	2b16      	cmp	r3, #22
 80084d0:	d101      	bne.n	80084d6 <__sflush_r+0xb2>
 80084d2:	602f      	str	r7, [r5, #0]
 80084d4:	e7b2      	b.n	800843c <__sflush_r+0x18>
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	e7ae      	b.n	800843e <__sflush_r+0x1a>
 80084e0:	690f      	ldr	r7, [r1, #16]
 80084e2:	2f00      	cmp	r7, #0
 80084e4:	d0aa      	beq.n	800843c <__sflush_r+0x18>
 80084e6:	0793      	lsls	r3, r2, #30
 80084e8:	bf18      	it	ne
 80084ea:	2300      	movne	r3, #0
 80084ec:	680e      	ldr	r6, [r1, #0]
 80084ee:	bf08      	it	eq
 80084f0:	694b      	ldreq	r3, [r1, #20]
 80084f2:	1bf6      	subs	r6, r6, r7
 80084f4:	600f      	str	r7, [r1, #0]
 80084f6:	608b      	str	r3, [r1, #8]
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	dd9f      	ble.n	800843c <__sflush_r+0x18>
 80084fc:	4633      	mov	r3, r6
 80084fe:	463a      	mov	r2, r7
 8008500:	4628      	mov	r0, r5
 8008502:	6a21      	ldr	r1, [r4, #32]
 8008504:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008508:	47e0      	blx	ip
 800850a:	2800      	cmp	r0, #0
 800850c:	dc06      	bgt.n	800851c <__sflush_r+0xf8>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	e790      	b.n	800843e <__sflush_r+0x1a>
 800851c:	4407      	add	r7, r0
 800851e:	1a36      	subs	r6, r6, r0
 8008520:	e7ea      	b.n	80084f8 <__sflush_r+0xd4>
 8008522:	bf00      	nop
 8008524:	dfbffffe 	.word	0xdfbffffe

08008528 <_fflush_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	690b      	ldr	r3, [r1, #16]
 800852c:	4605      	mov	r5, r0
 800852e:	460c      	mov	r4, r1
 8008530:	b913      	cbnz	r3, 8008538 <_fflush_r+0x10>
 8008532:	2500      	movs	r5, #0
 8008534:	4628      	mov	r0, r5
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	b118      	cbz	r0, 8008542 <_fflush_r+0x1a>
 800853a:	6a03      	ldr	r3, [r0, #32]
 800853c:	b90b      	cbnz	r3, 8008542 <_fflush_r+0x1a>
 800853e:	f7fd fc99 	bl	8005e74 <__sinit>
 8008542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f3      	beq.n	8008532 <_fflush_r+0xa>
 800854a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800854c:	07d0      	lsls	r0, r2, #31
 800854e:	d404      	bmi.n	800855a <_fflush_r+0x32>
 8008550:	0599      	lsls	r1, r3, #22
 8008552:	d402      	bmi.n	800855a <_fflush_r+0x32>
 8008554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008556:	f7fd fde4 	bl	8006122 <__retarget_lock_acquire_recursive>
 800855a:	4628      	mov	r0, r5
 800855c:	4621      	mov	r1, r4
 800855e:	f7ff ff61 	bl	8008424 <__sflush_r>
 8008562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008564:	4605      	mov	r5, r0
 8008566:	07da      	lsls	r2, r3, #31
 8008568:	d4e4      	bmi.n	8008534 <_fflush_r+0xc>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	059b      	lsls	r3, r3, #22
 800856e:	d4e1      	bmi.n	8008534 <_fflush_r+0xc>
 8008570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008572:	f7fd fdd7 	bl	8006124 <__retarget_lock_release_recursive>
 8008576:	e7dd      	b.n	8008534 <_fflush_r+0xc>

08008578 <memmove>:
 8008578:	4288      	cmp	r0, r1
 800857a:	b510      	push	{r4, lr}
 800857c:	eb01 0402 	add.w	r4, r1, r2
 8008580:	d902      	bls.n	8008588 <memmove+0x10>
 8008582:	4284      	cmp	r4, r0
 8008584:	4623      	mov	r3, r4
 8008586:	d807      	bhi.n	8008598 <memmove+0x20>
 8008588:	1e43      	subs	r3, r0, #1
 800858a:	42a1      	cmp	r1, r4
 800858c:	d008      	beq.n	80085a0 <memmove+0x28>
 800858e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008596:	e7f8      	b.n	800858a <memmove+0x12>
 8008598:	4601      	mov	r1, r0
 800859a:	4402      	add	r2, r0
 800859c:	428a      	cmp	r2, r1
 800859e:	d100      	bne.n	80085a2 <memmove+0x2a>
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085aa:	e7f7      	b.n	800859c <memmove+0x24>

080085ac <_sbrk_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	2300      	movs	r3, #0
 80085b0:	4d05      	ldr	r5, [pc, #20]	; (80085c8 <_sbrk_r+0x1c>)
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	602b      	str	r3, [r5, #0]
 80085b8:	f7f8 fdda 	bl	8001170 <_sbrk>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_sbrk_r+0x1a>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_sbrk_r+0x1a>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	20000474 	.word	0x20000474

080085cc <__assert_func>:
 80085cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ce:	4614      	mov	r4, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <__assert_func+0x2c>)
 80085d4:	4605      	mov	r5, r0
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68d8      	ldr	r0, [r3, #12]
 80085da:	b14c      	cbz	r4, 80085f0 <__assert_func+0x24>
 80085dc:	4b07      	ldr	r3, [pc, #28]	; (80085fc <__assert_func+0x30>)
 80085de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085e2:	9100      	str	r1, [sp, #0]
 80085e4:	462b      	mov	r3, r5
 80085e6:	4906      	ldr	r1, [pc, #24]	; (8008600 <__assert_func+0x34>)
 80085e8:	f000 f852 	bl	8008690 <fiprintf>
 80085ec:	f000 f862 	bl	80086b4 <abort>
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <__assert_func+0x38>)
 80085f2:	461c      	mov	r4, r3
 80085f4:	e7f3      	b.n	80085de <__assert_func+0x12>
 80085f6:	bf00      	nop
 80085f8:	200001d0 	.word	0x200001d0
 80085fc:	08009046 	.word	0x08009046
 8008600:	08009053 	.word	0x08009053
 8008604:	08009081 	.word	0x08009081

08008608 <_calloc_r>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	fba1 5402 	umull	r5, r4, r1, r2
 800860e:	b934      	cbnz	r4, 800861e <_calloc_r+0x16>
 8008610:	4629      	mov	r1, r5
 8008612:	f7fe ffe7 	bl	80075e4 <_malloc_r>
 8008616:	4606      	mov	r6, r0
 8008618:	b928      	cbnz	r0, 8008626 <_calloc_r+0x1e>
 800861a:	4630      	mov	r0, r6
 800861c:	bd70      	pop	{r4, r5, r6, pc}
 800861e:	220c      	movs	r2, #12
 8008620:	2600      	movs	r6, #0
 8008622:	6002      	str	r2, [r0, #0]
 8008624:	e7f9      	b.n	800861a <_calloc_r+0x12>
 8008626:	462a      	mov	r2, r5
 8008628:	4621      	mov	r1, r4
 800862a:	f7fd fcdd 	bl	8005fe8 <memset>
 800862e:	e7f4      	b.n	800861a <_calloc_r+0x12>

08008630 <_realloc_r>:
 8008630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008634:	4680      	mov	r8, r0
 8008636:	4614      	mov	r4, r2
 8008638:	460e      	mov	r6, r1
 800863a:	b921      	cbnz	r1, 8008646 <_realloc_r+0x16>
 800863c:	4611      	mov	r1, r2
 800863e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	f7fe bfcf 	b.w	80075e4 <_malloc_r>
 8008646:	b92a      	cbnz	r2, 8008654 <_realloc_r+0x24>
 8008648:	f7fe fc02 	bl	8006e50 <_free_r>
 800864c:	4625      	mov	r5, r4
 800864e:	4628      	mov	r0, r5
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008654:	f000 f835 	bl	80086c2 <_malloc_usable_size_r>
 8008658:	4284      	cmp	r4, r0
 800865a:	4607      	mov	r7, r0
 800865c:	d802      	bhi.n	8008664 <_realloc_r+0x34>
 800865e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008662:	d812      	bhi.n	800868a <_realloc_r+0x5a>
 8008664:	4621      	mov	r1, r4
 8008666:	4640      	mov	r0, r8
 8008668:	f7fe ffbc 	bl	80075e4 <_malloc_r>
 800866c:	4605      	mov	r5, r0
 800866e:	2800      	cmp	r0, #0
 8008670:	d0ed      	beq.n	800864e <_realloc_r+0x1e>
 8008672:	42bc      	cmp	r4, r7
 8008674:	4622      	mov	r2, r4
 8008676:	4631      	mov	r1, r6
 8008678:	bf28      	it	cs
 800867a:	463a      	movcs	r2, r7
 800867c:	f7fd fd61 	bl	8006142 <memcpy>
 8008680:	4631      	mov	r1, r6
 8008682:	4640      	mov	r0, r8
 8008684:	f7fe fbe4 	bl	8006e50 <_free_r>
 8008688:	e7e1      	b.n	800864e <_realloc_r+0x1e>
 800868a:	4635      	mov	r5, r6
 800868c:	e7df      	b.n	800864e <_realloc_r+0x1e>
	...

08008690 <fiprintf>:
 8008690:	b40e      	push	{r1, r2, r3}
 8008692:	b503      	push	{r0, r1, lr}
 8008694:	4601      	mov	r1, r0
 8008696:	ab03      	add	r3, sp, #12
 8008698:	4805      	ldr	r0, [pc, #20]	; (80086b0 <fiprintf+0x20>)
 800869a:	f853 2b04 	ldr.w	r2, [r3], #4
 800869e:	6800      	ldr	r0, [r0, #0]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	f000 f83d 	bl	8008720 <_vfiprintf_r>
 80086a6:	b002      	add	sp, #8
 80086a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086ac:	b003      	add	sp, #12
 80086ae:	4770      	bx	lr
 80086b0:	200001d0 	.word	0x200001d0

080086b4 <abort>:
 80086b4:	2006      	movs	r0, #6
 80086b6:	b508      	push	{r3, lr}
 80086b8:	f000 fa0a 	bl	8008ad0 <raise>
 80086bc:	2001      	movs	r0, #1
 80086be:	f7f8 fce4 	bl	800108a <_exit>

080086c2 <_malloc_usable_size_r>:
 80086c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c6:	1f18      	subs	r0, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bfbc      	itt	lt
 80086cc:	580b      	ldrlt	r3, [r1, r0]
 80086ce:	18c0      	addlt	r0, r0, r3
 80086d0:	4770      	bx	lr

080086d2 <__sfputc_r>:
 80086d2:	6893      	ldr	r3, [r2, #8]
 80086d4:	b410      	push	{r4}
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	6093      	str	r3, [r2, #8]
 80086dc:	da07      	bge.n	80086ee <__sfputc_r+0x1c>
 80086de:	6994      	ldr	r4, [r2, #24]
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	db01      	blt.n	80086e8 <__sfputc_r+0x16>
 80086e4:	290a      	cmp	r1, #10
 80086e6:	d102      	bne.n	80086ee <__sfputc_r+0x1c>
 80086e8:	bc10      	pop	{r4}
 80086ea:	f000 b933 	b.w	8008954 <__swbuf_r>
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	1c58      	adds	r0, r3, #1
 80086f2:	6010      	str	r0, [r2, #0]
 80086f4:	7019      	strb	r1, [r3, #0]
 80086f6:	4608      	mov	r0, r1
 80086f8:	bc10      	pop	{r4}
 80086fa:	4770      	bx	lr

080086fc <__sfputs_r>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	4614      	mov	r4, r2
 8008704:	18d5      	adds	r5, r2, r3
 8008706:	42ac      	cmp	r4, r5
 8008708:	d101      	bne.n	800870e <__sfputs_r+0x12>
 800870a:	2000      	movs	r0, #0
 800870c:	e007      	b.n	800871e <__sfputs_r+0x22>
 800870e:	463a      	mov	r2, r7
 8008710:	4630      	mov	r0, r6
 8008712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008716:	f7ff ffdc 	bl	80086d2 <__sfputc_r>
 800871a:	1c43      	adds	r3, r0, #1
 800871c:	d1f3      	bne.n	8008706 <__sfputs_r+0xa>
 800871e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008720 <_vfiprintf_r>:
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	460d      	mov	r5, r1
 8008726:	4614      	mov	r4, r2
 8008728:	4698      	mov	r8, r3
 800872a:	4606      	mov	r6, r0
 800872c:	b09d      	sub	sp, #116	; 0x74
 800872e:	b118      	cbz	r0, 8008738 <_vfiprintf_r+0x18>
 8008730:	6a03      	ldr	r3, [r0, #32]
 8008732:	b90b      	cbnz	r3, 8008738 <_vfiprintf_r+0x18>
 8008734:	f7fd fb9e 	bl	8005e74 <__sinit>
 8008738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800873a:	07d9      	lsls	r1, r3, #31
 800873c:	d405      	bmi.n	800874a <_vfiprintf_r+0x2a>
 800873e:	89ab      	ldrh	r3, [r5, #12]
 8008740:	059a      	lsls	r2, r3, #22
 8008742:	d402      	bmi.n	800874a <_vfiprintf_r+0x2a>
 8008744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008746:	f7fd fcec 	bl	8006122 <__retarget_lock_acquire_recursive>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	071b      	lsls	r3, r3, #28
 800874e:	d501      	bpl.n	8008754 <_vfiprintf_r+0x34>
 8008750:	692b      	ldr	r3, [r5, #16]
 8008752:	b99b      	cbnz	r3, 800877c <_vfiprintf_r+0x5c>
 8008754:	4629      	mov	r1, r5
 8008756:	4630      	mov	r0, r6
 8008758:	f000 f93a 	bl	80089d0 <__swsetup_r>
 800875c:	b170      	cbz	r0, 800877c <_vfiprintf_r+0x5c>
 800875e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008760:	07dc      	lsls	r4, r3, #31
 8008762:	d504      	bpl.n	800876e <_vfiprintf_r+0x4e>
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	b01d      	add	sp, #116	; 0x74
 800876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	0598      	lsls	r0, r3, #22
 8008772:	d4f7      	bmi.n	8008764 <_vfiprintf_r+0x44>
 8008774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008776:	f7fd fcd5 	bl	8006124 <__retarget_lock_release_recursive>
 800877a:	e7f3      	b.n	8008764 <_vfiprintf_r+0x44>
 800877c:	2300      	movs	r3, #0
 800877e:	9309      	str	r3, [sp, #36]	; 0x24
 8008780:	2320      	movs	r3, #32
 8008782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008786:	2330      	movs	r3, #48	; 0x30
 8008788:	f04f 0901 	mov.w	r9, #1
 800878c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008790:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008940 <_vfiprintf_r+0x220>
 8008794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008798:	4623      	mov	r3, r4
 800879a:	469a      	mov	sl, r3
 800879c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a0:	b10a      	cbz	r2, 80087a6 <_vfiprintf_r+0x86>
 80087a2:	2a25      	cmp	r2, #37	; 0x25
 80087a4:	d1f9      	bne.n	800879a <_vfiprintf_r+0x7a>
 80087a6:	ebba 0b04 	subs.w	fp, sl, r4
 80087aa:	d00b      	beq.n	80087c4 <_vfiprintf_r+0xa4>
 80087ac:	465b      	mov	r3, fp
 80087ae:	4622      	mov	r2, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ffa2 	bl	80086fc <__sfputs_r>
 80087b8:	3001      	adds	r0, #1
 80087ba:	f000 80a9 	beq.w	8008910 <_vfiprintf_r+0x1f0>
 80087be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087c0:	445a      	add	r2, fp
 80087c2:	9209      	str	r2, [sp, #36]	; 0x24
 80087c4:	f89a 3000 	ldrb.w	r3, [sl]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80a1 	beq.w	8008910 <_vfiprintf_r+0x1f0>
 80087ce:	2300      	movs	r3, #0
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295
 80087d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d8:	f10a 0a01 	add.w	sl, sl, #1
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	9307      	str	r3, [sp, #28]
 80087e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087e4:	931a      	str	r3, [sp, #104]	; 0x68
 80087e6:	4654      	mov	r4, sl
 80087e8:	2205      	movs	r2, #5
 80087ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ee:	4854      	ldr	r0, [pc, #336]	; (8008940 <_vfiprintf_r+0x220>)
 80087f0:	f7fd fc99 	bl	8006126 <memchr>
 80087f4:	9a04      	ldr	r2, [sp, #16]
 80087f6:	b9d8      	cbnz	r0, 8008830 <_vfiprintf_r+0x110>
 80087f8:	06d1      	lsls	r1, r2, #27
 80087fa:	bf44      	itt	mi
 80087fc:	2320      	movmi	r3, #32
 80087fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008802:	0713      	lsls	r3, r2, #28
 8008804:	bf44      	itt	mi
 8008806:	232b      	movmi	r3, #43	; 0x2b
 8008808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800880c:	f89a 3000 	ldrb.w	r3, [sl]
 8008810:	2b2a      	cmp	r3, #42	; 0x2a
 8008812:	d015      	beq.n	8008840 <_vfiprintf_r+0x120>
 8008814:	4654      	mov	r4, sl
 8008816:	2000      	movs	r0, #0
 8008818:	f04f 0c0a 	mov.w	ip, #10
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	4621      	mov	r1, r4
 8008820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008824:	3b30      	subs	r3, #48	; 0x30
 8008826:	2b09      	cmp	r3, #9
 8008828:	d94d      	bls.n	80088c6 <_vfiprintf_r+0x1a6>
 800882a:	b1b0      	cbz	r0, 800885a <_vfiprintf_r+0x13a>
 800882c:	9207      	str	r2, [sp, #28]
 800882e:	e014      	b.n	800885a <_vfiprintf_r+0x13a>
 8008830:	eba0 0308 	sub.w	r3, r0, r8
 8008834:	fa09 f303 	lsl.w	r3, r9, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	46a2      	mov	sl, r4
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	e7d2      	b.n	80087e6 <_vfiprintf_r+0xc6>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	1d19      	adds	r1, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9103      	str	r1, [sp, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	bfbb      	ittet	lt
 800884c:	425b      	neglt	r3, r3
 800884e:	f042 0202 	orrlt.w	r2, r2, #2
 8008852:	9307      	strge	r3, [sp, #28]
 8008854:	9307      	strlt	r3, [sp, #28]
 8008856:	bfb8      	it	lt
 8008858:	9204      	strlt	r2, [sp, #16]
 800885a:	7823      	ldrb	r3, [r4, #0]
 800885c:	2b2e      	cmp	r3, #46	; 0x2e
 800885e:	d10c      	bne.n	800887a <_vfiprintf_r+0x15a>
 8008860:	7863      	ldrb	r3, [r4, #1]
 8008862:	2b2a      	cmp	r3, #42	; 0x2a
 8008864:	d134      	bne.n	80088d0 <_vfiprintf_r+0x1b0>
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	3402      	adds	r4, #2
 800886a:	1d1a      	adds	r2, r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	9203      	str	r2, [sp, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	bfb8      	it	lt
 8008874:	f04f 33ff 	movlt.w	r3, #4294967295
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008944 <_vfiprintf_r+0x224>
 800887e:	2203      	movs	r2, #3
 8008880:	4650      	mov	r0, sl
 8008882:	7821      	ldrb	r1, [r4, #0]
 8008884:	f7fd fc4f 	bl	8006126 <memchr>
 8008888:	b138      	cbz	r0, 800889a <_vfiprintf_r+0x17a>
 800888a:	2240      	movs	r2, #64	; 0x40
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	eba0 000a 	sub.w	r0, r0, sl
 8008892:	4082      	lsls	r2, r0
 8008894:	4313      	orrs	r3, r2
 8008896:	3401      	adds	r4, #1
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889e:	2206      	movs	r2, #6
 80088a0:	4829      	ldr	r0, [pc, #164]	; (8008948 <_vfiprintf_r+0x228>)
 80088a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a6:	f7fd fc3e 	bl	8006126 <memchr>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d03f      	beq.n	800892e <_vfiprintf_r+0x20e>
 80088ae:	4b27      	ldr	r3, [pc, #156]	; (800894c <_vfiprintf_r+0x22c>)
 80088b0:	bb1b      	cbnz	r3, 80088fa <_vfiprintf_r+0x1da>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	3307      	adds	r3, #7
 80088b6:	f023 0307 	bic.w	r3, r3, #7
 80088ba:	3308      	adds	r3, #8
 80088bc:	9303      	str	r3, [sp, #12]
 80088be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c0:	443b      	add	r3, r7
 80088c2:	9309      	str	r3, [sp, #36]	; 0x24
 80088c4:	e768      	b.n	8008798 <_vfiprintf_r+0x78>
 80088c6:	460c      	mov	r4, r1
 80088c8:	2001      	movs	r0, #1
 80088ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80088ce:	e7a6      	b.n	800881e <_vfiprintf_r+0xfe>
 80088d0:	2300      	movs	r3, #0
 80088d2:	f04f 0c0a 	mov.w	ip, #10
 80088d6:	4619      	mov	r1, r3
 80088d8:	3401      	adds	r4, #1
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	4620      	mov	r0, r4
 80088de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e2:	3a30      	subs	r2, #48	; 0x30
 80088e4:	2a09      	cmp	r2, #9
 80088e6:	d903      	bls.n	80088f0 <_vfiprintf_r+0x1d0>
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0c6      	beq.n	800887a <_vfiprintf_r+0x15a>
 80088ec:	9105      	str	r1, [sp, #20]
 80088ee:	e7c4      	b.n	800887a <_vfiprintf_r+0x15a>
 80088f0:	4604      	mov	r4, r0
 80088f2:	2301      	movs	r3, #1
 80088f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f8:	e7f0      	b.n	80088dc <_vfiprintf_r+0x1bc>
 80088fa:	ab03      	add	r3, sp, #12
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	462a      	mov	r2, r5
 8008900:	4630      	mov	r0, r6
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <_vfiprintf_r+0x230>)
 8008904:	a904      	add	r1, sp, #16
 8008906:	f7fc fc59 	bl	80051bc <_printf_float>
 800890a:	4607      	mov	r7, r0
 800890c:	1c78      	adds	r0, r7, #1
 800890e:	d1d6      	bne.n	80088be <_vfiprintf_r+0x19e>
 8008910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008912:	07d9      	lsls	r1, r3, #31
 8008914:	d405      	bmi.n	8008922 <_vfiprintf_r+0x202>
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	059a      	lsls	r2, r3, #22
 800891a:	d402      	bmi.n	8008922 <_vfiprintf_r+0x202>
 800891c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891e:	f7fd fc01 	bl	8006124 <__retarget_lock_release_recursive>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	065b      	lsls	r3, r3, #25
 8008926:	f53f af1d 	bmi.w	8008764 <_vfiprintf_r+0x44>
 800892a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892c:	e71c      	b.n	8008768 <_vfiprintf_r+0x48>
 800892e:	ab03      	add	r3, sp, #12
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	462a      	mov	r2, r5
 8008934:	4630      	mov	r0, r6
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <_vfiprintf_r+0x230>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	f7fc fedf 	bl	80056fc <_printf_i>
 800893e:	e7e4      	b.n	800890a <_vfiprintf_r+0x1ea>
 8008940:	08009035 	.word	0x08009035
 8008944:	0800903b 	.word	0x0800903b
 8008948:	0800903f 	.word	0x0800903f
 800894c:	080051bd 	.word	0x080051bd
 8008950:	080086fd 	.word	0x080086fd

08008954 <__swbuf_r>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	460e      	mov	r6, r1
 8008958:	4614      	mov	r4, r2
 800895a:	4605      	mov	r5, r0
 800895c:	b118      	cbz	r0, 8008966 <__swbuf_r+0x12>
 800895e:	6a03      	ldr	r3, [r0, #32]
 8008960:	b90b      	cbnz	r3, 8008966 <__swbuf_r+0x12>
 8008962:	f7fd fa87 	bl	8005e74 <__sinit>
 8008966:	69a3      	ldr	r3, [r4, #24]
 8008968:	60a3      	str	r3, [r4, #8]
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	071a      	lsls	r2, r3, #28
 800896e:	d525      	bpl.n	80089bc <__swbuf_r+0x68>
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	b31b      	cbz	r3, 80089bc <__swbuf_r+0x68>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	6922      	ldr	r2, [r4, #16]
 8008978:	b2f6      	uxtb	r6, r6
 800897a:	1a98      	subs	r0, r3, r2
 800897c:	6963      	ldr	r3, [r4, #20]
 800897e:	4637      	mov	r7, r6
 8008980:	4283      	cmp	r3, r0
 8008982:	dc04      	bgt.n	800898e <__swbuf_r+0x3a>
 8008984:	4621      	mov	r1, r4
 8008986:	4628      	mov	r0, r5
 8008988:	f7ff fdce 	bl	8008528 <_fflush_r>
 800898c:	b9e0      	cbnz	r0, 80089c8 <__swbuf_r+0x74>
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	3b01      	subs	r3, #1
 8008992:	60a3      	str	r3, [r4, #8]
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	6022      	str	r2, [r4, #0]
 800899a:	701e      	strb	r6, [r3, #0]
 800899c:	6962      	ldr	r2, [r4, #20]
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d004      	beq.n	80089ae <__swbuf_r+0x5a>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	07db      	lsls	r3, r3, #31
 80089a8:	d506      	bpl.n	80089b8 <__swbuf_r+0x64>
 80089aa:	2e0a      	cmp	r6, #10
 80089ac:	d104      	bne.n	80089b8 <__swbuf_r+0x64>
 80089ae:	4621      	mov	r1, r4
 80089b0:	4628      	mov	r0, r5
 80089b2:	f7ff fdb9 	bl	8008528 <_fflush_r>
 80089b6:	b938      	cbnz	r0, 80089c8 <__swbuf_r+0x74>
 80089b8:	4638      	mov	r0, r7
 80089ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089bc:	4621      	mov	r1, r4
 80089be:	4628      	mov	r0, r5
 80089c0:	f000 f806 	bl	80089d0 <__swsetup_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d0d5      	beq.n	8008974 <__swbuf_r+0x20>
 80089c8:	f04f 37ff 	mov.w	r7, #4294967295
 80089cc:	e7f4      	b.n	80089b8 <__swbuf_r+0x64>
	...

080089d0 <__swsetup_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4b2a      	ldr	r3, [pc, #168]	; (8008a7c <__swsetup_r+0xac>)
 80089d4:	4605      	mov	r5, r0
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	460c      	mov	r4, r1
 80089da:	b118      	cbz	r0, 80089e4 <__swsetup_r+0x14>
 80089dc:	6a03      	ldr	r3, [r0, #32]
 80089de:	b90b      	cbnz	r3, 80089e4 <__swsetup_r+0x14>
 80089e0:	f7fd fa48 	bl	8005e74 <__sinit>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089ea:	0718      	lsls	r0, r3, #28
 80089ec:	d422      	bmi.n	8008a34 <__swsetup_r+0x64>
 80089ee:	06d9      	lsls	r1, r3, #27
 80089f0:	d407      	bmi.n	8008a02 <__swsetup_r+0x32>
 80089f2:	2309      	movs	r3, #9
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	e034      	b.n	8008a6c <__swsetup_r+0x9c>
 8008a02:	0758      	lsls	r0, r3, #29
 8008a04:	d512      	bpl.n	8008a2c <__swsetup_r+0x5c>
 8008a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a08:	b141      	cbz	r1, 8008a1c <__swsetup_r+0x4c>
 8008a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	d002      	beq.n	8008a18 <__swsetup_r+0x48>
 8008a12:	4628      	mov	r0, r5
 8008a14:	f7fe fa1c 	bl	8006e50 <_free_r>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6363      	str	r3, [r4, #52]	; 0x34
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	2300      	movs	r3, #0
 8008a26:	6063      	str	r3, [r4, #4]
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f043 0308 	orr.w	r3, r3, #8
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	b94b      	cbnz	r3, 8008a4c <__swsetup_r+0x7c>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a42:	d003      	beq.n	8008a4c <__swsetup_r+0x7c>
 8008a44:	4621      	mov	r1, r4
 8008a46:	4628      	mov	r0, r5
 8008a48:	f000 f883 	bl	8008b52 <__smakebuf_r>
 8008a4c:	89a0      	ldrh	r0, [r4, #12]
 8008a4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a52:	f010 0301 	ands.w	r3, r0, #1
 8008a56:	d00a      	beq.n	8008a6e <__swsetup_r+0x9e>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60a3      	str	r3, [r4, #8]
 8008a5c:	6963      	ldr	r3, [r4, #20]
 8008a5e:	425b      	negs	r3, r3
 8008a60:	61a3      	str	r3, [r4, #24]
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	b943      	cbnz	r3, 8008a78 <__swsetup_r+0xa8>
 8008a66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a6a:	d1c4      	bne.n	80089f6 <__swsetup_r+0x26>
 8008a6c:	bd38      	pop	{r3, r4, r5, pc}
 8008a6e:	0781      	lsls	r1, r0, #30
 8008a70:	bf58      	it	pl
 8008a72:	6963      	ldrpl	r3, [r4, #20]
 8008a74:	60a3      	str	r3, [r4, #8]
 8008a76:	e7f4      	b.n	8008a62 <__swsetup_r+0x92>
 8008a78:	2000      	movs	r0, #0
 8008a7a:	e7f7      	b.n	8008a6c <__swsetup_r+0x9c>
 8008a7c:	200001d0 	.word	0x200001d0

08008a80 <_raise_r>:
 8008a80:	291f      	cmp	r1, #31
 8008a82:	b538      	push	{r3, r4, r5, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	460d      	mov	r5, r1
 8008a88:	d904      	bls.n	8008a94 <_raise_r+0x14>
 8008a8a:	2316      	movs	r3, #22
 8008a8c:	6003      	str	r3, [r0, #0]
 8008a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008a96:	b112      	cbz	r2, 8008a9e <_raise_r+0x1e>
 8008a98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a9c:	b94b      	cbnz	r3, 8008ab2 <_raise_r+0x32>
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f830 	bl	8008b04 <_getpid_r>
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aae:	f000 b817 	b.w	8008ae0 <_kill_r>
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d00a      	beq.n	8008acc <_raise_r+0x4c>
 8008ab6:	1c59      	adds	r1, r3, #1
 8008ab8:	d103      	bne.n	8008ac2 <_raise_r+0x42>
 8008aba:	2316      	movs	r3, #22
 8008abc:	6003      	str	r3, [r0, #0]
 8008abe:	2001      	movs	r0, #1
 8008ac0:	e7e7      	b.n	8008a92 <_raise_r+0x12>
 8008ac2:	2400      	movs	r4, #0
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008aca:	4798      	blx	r3
 8008acc:	2000      	movs	r0, #0
 8008ace:	e7e0      	b.n	8008a92 <_raise_r+0x12>

08008ad0 <raise>:
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <raise+0xc>)
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	f7ff bfd3 	b.w	8008a80 <_raise_r>
 8008ada:	bf00      	nop
 8008adc:	200001d0 	.word	0x200001d0

08008ae0 <_kill_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4d06      	ldr	r5, [pc, #24]	; (8008b00 <_kill_r+0x20>)
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	4611      	mov	r1, r2
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	f7f8 fabc 	bl	800106a <_kill>
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	d102      	bne.n	8008afc <_kill_r+0x1c>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	b103      	cbz	r3, 8008afc <_kill_r+0x1c>
 8008afa:	6023      	str	r3, [r4, #0]
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	bf00      	nop
 8008b00:	20000474 	.word	0x20000474

08008b04 <_getpid_r>:
 8008b04:	f7f8 baaa 	b.w	800105c <_getpid>

08008b08 <__swhatbuf_r>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b10:	4615      	mov	r5, r2
 8008b12:	2900      	cmp	r1, #0
 8008b14:	461e      	mov	r6, r3
 8008b16:	b096      	sub	sp, #88	; 0x58
 8008b18:	da0c      	bge.n	8008b34 <__swhatbuf_r+0x2c>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b22:	bf0c      	ite	eq
 8008b24:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b28:	2340      	movne	r3, #64	; 0x40
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	6031      	str	r1, [r6, #0]
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	b016      	add	sp, #88	; 0x58
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	466a      	mov	r2, sp
 8008b36:	f000 f849 	bl	8008bcc <_fstat_r>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	dbed      	blt.n	8008b1a <__swhatbuf_r+0x12>
 8008b3e:	9901      	ldr	r1, [sp, #4]
 8008b40:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b44:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008b48:	4259      	negs	r1, r3
 8008b4a:	4159      	adcs	r1, r3
 8008b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b50:	e7eb      	b.n	8008b2a <__swhatbuf_r+0x22>

08008b52 <__smakebuf_r>:
 8008b52:	898b      	ldrh	r3, [r1, #12]
 8008b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b56:	079d      	lsls	r5, r3, #30
 8008b58:	4606      	mov	r6, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	d507      	bpl.n	8008b6e <__smakebuf_r+0x1c>
 8008b5e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	2301      	movs	r3, #1
 8008b68:	6163      	str	r3, [r4, #20]
 8008b6a:	b002      	add	sp, #8
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	466a      	mov	r2, sp
 8008b70:	ab01      	add	r3, sp, #4
 8008b72:	f7ff ffc9 	bl	8008b08 <__swhatbuf_r>
 8008b76:	9900      	ldr	r1, [sp, #0]
 8008b78:	4605      	mov	r5, r0
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	f7fe fd32 	bl	80075e4 <_malloc_r>
 8008b80:	b948      	cbnz	r0, 8008b96 <__smakebuf_r+0x44>
 8008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b86:	059a      	lsls	r2, r3, #22
 8008b88:	d4ef      	bmi.n	8008b6a <__smakebuf_r+0x18>
 8008b8a:	f023 0303 	bic.w	r3, r3, #3
 8008b8e:	f043 0302 	orr.w	r3, r3, #2
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	e7e3      	b.n	8008b5e <__smakebuf_r+0xc>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	6020      	str	r0, [r4, #0]
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	6120      	str	r0, [r4, #16]
 8008ba4:	6163      	str	r3, [r4, #20]
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	b15b      	cbz	r3, 8008bc2 <__smakebuf_r+0x70>
 8008baa:	4630      	mov	r0, r6
 8008bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb0:	f000 f81e 	bl	8008bf0 <_isatty_r>
 8008bb4:	b128      	cbz	r0, 8008bc2 <__smakebuf_r+0x70>
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	f023 0303 	bic.w	r3, r3, #3
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	81a3      	strh	r3, [r4, #12]
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	431d      	orrs	r5, r3
 8008bc6:	81a5      	strh	r5, [r4, #12]
 8008bc8:	e7cf      	b.n	8008b6a <__smakebuf_r+0x18>
	...

08008bcc <_fstat_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4d06      	ldr	r5, [pc, #24]	; (8008bec <_fstat_r+0x20>)
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	f7f8 faa4 	bl	8001126 <_fstat>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	d102      	bne.n	8008be8 <_fstat_r+0x1c>
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	b103      	cbz	r3, 8008be8 <_fstat_r+0x1c>
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
 8008bea:	bf00      	nop
 8008bec:	20000474 	.word	0x20000474

08008bf0 <_isatty_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4d05      	ldr	r5, [pc, #20]	; (8008c0c <_isatty_r+0x1c>)
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7f8 faa2 	bl	8001144 <_isatty>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_isatty_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_isatty_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	20000474 	.word	0x20000474

08008c10 <_init>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr

08008c1c <_fini>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr
