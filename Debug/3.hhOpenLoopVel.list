
3.hhOpenLoopVel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800acc8  0800acc8  0001acc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b328  0800b328  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b328  0800b328  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b328  0800b328  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001d4  0800b504  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800b504  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcf5  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002763  00000000  00000000  0002df35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00030698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab3  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196e5  00000000  00000000  00031f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115b6  00000000  00000000  0004b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ccb0  00000000  00000000  0005cbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005124  00000000  00000000  000e9880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ee9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800acb0 	.word	0x0800acb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800acb0 	.word	0x0800acb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	460c      	mov	r4, r1
 8001156:	2200      	movs	r2, #0
 8001158:	2300      	movs	r3, #0
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f924 	bl	80003e4 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	f7ff fc6a 	bl	8000a88 <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_DMA_Init+0x38>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <MX_DMA_Init+0x38>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_DMA_Init+0x38>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	200e      	movs	r0, #14
 80011e4:	f001 f91d 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011e8:	200e      	movs	r0, #14
 80011ea:	f001 f936 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_GPIO_Init+0x40>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <MX_GPIO_Init+0x40>)
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_GPIO_Init+0x40>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_GPIO_Init+0x40>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <MX_GPIO_Init+0x40>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <MX_GPIO_Init+0x40>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_TIM_PeriodElapsedCallback>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t  Flag_1ms=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if(htim==&htim4){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d102      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
		Flag_1ms=1;
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
	}
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000240 	.word	0x20000240
 8001264:	200001f0 	.word	0x200001f0

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 ff9f 	bl	80021b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f827 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f7ff ffc1 	bl	80011fc <MX_GPIO_Init>
  MX_DMA_Init();
 800127a:	f7ff ffa1 	bl	80011c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800127e:	f000 faeb 	bl	8001858 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001282:	f000 f9a7 	bl	80015d4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001286:	f000 fa31 	bl	80016ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  hhFocInit(12.6,7, -1);
 800128a:	f04f 32ff 	mov.w	r2, #4294967295
 800128e:	2107      	movs	r1, #7
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <main+0x50>)
 8001292:	f000 fe0f 	bl	8001eb4 <hhFocInit>
  HAL_TIM_Base_Start_IT(&htim4);//刷新定时器开启
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <main+0x54>)
 8001298:	f002 f980 	bl	800359c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RetFloat1= GetSerialRetFloat1();
 800129c:	f000 ff7e 	bl	800219c <GetSerialRetFloat1>
 80012a0:	6078      	str	r0, [r7, #4]
	  if(Flag_1ms==1){
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <main+0x58>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1f8      	bne.n	800129c <main+0x34>
		  hhOpenLoopVelM0(RetFloat1);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fe3a 	bl	8001f24 <hhOpenLoopVelM0>
		  Flag_1ms=0;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <main+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	  RetFloat1= GetSerialRetFloat1();
 80012b6:	e7f1      	b.n	800129c <main+0x34>
 80012b8:	4149999a 	.word	0x4149999a
 80012bc:	20000240 	.word	0x20000240
 80012c0:	200001f0 	.word	0x200001f0

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b090      	sub	sp, #64	; 0x40
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	2228      	movs	r2, #40	; 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f005 fd68 	bl	8006da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001302:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fce5 	bl	8002cdc <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001318:	f000 f819 	bl	800134e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131c:	230f      	movs	r3, #15
 800131e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f001 ff52 	bl	80031e0 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001342:	f000 f804 	bl	800134e <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3740      	adds	r7, #64	; 0x40
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001352:	b672      	cpsid	i
}
 8001354:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001356:	e7fe      	b.n	8001356 <Error_Handler+0x8>

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_MspInit+0x5c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x5c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_MspInit+0x60>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_MspInit+0x60>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 ff1b 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA1_Channel4_IRQHandler+0x10>)
 8001412:	f001 f9ab 	bl	800276c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200002d0 	.word	0x200002d0

08001420 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM4_IRQHandler+0x10>)
 8001426:	f002 fa05 	bl	8003834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000240 	.word	0x20000240

08001434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <USART1_IRQHandler+0x10>)
 800143a:	f003 f8d7 	bl	80045ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000288 	.word	0x20000288

08001448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <_kill>:

int _kill(int pid, int sig)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001460:	f005 fd14 	bl	8006e8c <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	2216      	movs	r2, #22
 8001468:	601a      	str	r2, [r3, #0]
  return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_exit>:

void _exit (int status)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800147e:	f04f 31ff 	mov.w	r1, #4294967295
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffe7 	bl	8001456 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001488:	e7fe      	b.n	8001488 <_exit+0x12>

0800148a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e00a      	b.n	80014b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800149c:	f3af 8000 	nop.w
 80014a0:	4601      	mov	r1, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	60ba      	str	r2, [r7, #8]
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbf0      	blt.n	800149c <_read+0x12>
  }

  return len;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e009      	b.n	80014ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dbf1      	blt.n	80014d6 <_write+0x12>
  }
  return len;
 80014f2:	687b      	ldr	r3, [r7, #4]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_close>:

int _close(int file)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001522:	605a      	str	r2, [r3, #4]
  return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <_isatty>:

int _isatty(int file)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f005 fc7e 	bl	8006e8c <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20005000 	.word	0x20005000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	200001f4 	.word	0x200001f4
 80015c4:	20000508 	.word	0x20000508

080015c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <MX_TIM2_Init+0x114>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <MX_TIM2_Init+0x114>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <MX_TIM2_Init+0x114>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <MX_TIM2_Init+0x114>)
 800161a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800161e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <MX_TIM2_Init+0x114>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <MX_TIM2_Init+0x114>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800162c:	482e      	ldr	r0, [pc, #184]	; (80016e8 <MX_TIM2_Init+0x114>)
 800162e:	f001 ff65 	bl	80034fc <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001638:	f7ff fe89 	bl	800134e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001646:	4619      	mov	r1, r3
 8001648:	4827      	ldr	r0, [pc, #156]	; (80016e8 <MX_TIM2_Init+0x114>)
 800164a:	f002 faa5 	bl	8003b98 <HAL_TIM_ConfigClockSource>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001654:	f7ff fe7b 	bl	800134e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001658:	4823      	ldr	r0, [pc, #140]	; (80016e8 <MX_TIM2_Init+0x114>)
 800165a:	f001 fff1 	bl	8003640 <HAL_TIM_PWM_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001664:	f7ff fe73 	bl	800134e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4619      	mov	r1, r3
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <MX_TIM2_Init+0x114>)
 8001678:	f002 fe2a 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001682:	f7ff fe64 	bl	800134e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001686:	2360      	movs	r3, #96	; 0x60
 8001688:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	4812      	ldr	r0, [pc, #72]	; (80016e8 <MX_TIM2_Init+0x114>)
 800169e:	f002 f9b9 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016a8:	f7ff fe51 	bl	800134e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2204      	movs	r2, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_TIM2_Init+0x114>)
 80016b4:	f002 f9ae 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80016be:	f7ff fe46 	bl	800134e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2208      	movs	r2, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <MX_TIM2_Init+0x114>)
 80016ca:	f002 f9a3 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80016d4:	f7ff fe3b 	bl	800134e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_TIM2_Init+0x114>)
 80016da:	f000 f88d 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 80016de:	bf00      	nop
 80016e0:	3738      	adds	r7, #56	; 0x38
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001f8 	.word	0x200001f8

080016ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_TIM4_Init+0x94>)
 800170a:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <MX_TIM4_Init+0x98>)
 800170c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM4_Init+0x94>)
 8001710:	2247      	movs	r2, #71	; 0x47
 8001712:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM4_Init+0x94>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM4_Init+0x94>)
 800171c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001720:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_TIM4_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM4_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800172e:	4814      	ldr	r0, [pc, #80]	; (8001780 <MX_TIM4_Init+0x94>)
 8001730:	f001 fee4 	bl	80034fc <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800173a:	f7ff fe08 	bl	800134e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM4_Init+0x94>)
 800174c:	f002 fa24 	bl	8003b98 <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001756:	f7ff fdfa 	bl	800134e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM4_Init+0x94>)
 8001768:	f002 fdb2 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001772:	f7ff fdec 	bl	800134e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000240 	.word	0x20000240
 8001784:	40000800 	.word	0x40000800

08001788 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001798:	d10c      	bne.n	80017b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_TIM_Base_MspInit+0x68>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_TIM_Base_MspInit+0x68>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_TIM_Base_MspInit+0x68>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017b2:	e018      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_TIM_Base_MspInit+0x6c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d113      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_TIM_Base_MspInit+0x68>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_Base_MspInit+0x68>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x68>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	201e      	movs	r0, #30
 80017dc:	f000 fe21 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017e0:	201e      	movs	r0, #30
 80017e2:	f000 fe3a 	bl	800245a <HAL_NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40000800 	.word	0x40000800

080017f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001816:	d117      	bne.n	8001848 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_TIM_MspPostInit+0x58>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <HAL_TIM_MspPostInit+0x58>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_TIM_MspPostInit+0x58>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001830:	2307      	movs	r3, #7
 8001832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2302      	movs	r3, #2
 800183a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	4804      	ldr	r0, [pc, #16]	; (8001854 <HAL_TIM_MspPostInit+0x5c>)
 8001844:	f001 f8c6 	bl	80029d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40010800 	.word	0x40010800

08001858 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 8001860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 576000;
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 8001864:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <MX_USART1_UART_Init+0x50>)
 8001866:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 800187c:	220c      	movs	r2, #12
 800187e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_USART1_UART_Init+0x48>)
 800188e:	f002 fd8f 	bl	80043b0 <HAL_UART_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001898:	f7ff fd59 	bl	800134e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000288 	.word	0x20000288
 80018a4:	40013800 	.word	0x40013800
 80018a8:	0008ca00 	.word	0x0008ca00

080018ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a33      	ldr	r2, [pc, #204]	; (8001994 <HAL_UART_MspInit+0xe8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d15f      	bne.n	800198c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_UART_MspInit+0xec>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a31      	ldr	r2, [pc, #196]	; (8001998 <HAL_UART_MspInit+0xec>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_UART_MspInit+0xec>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_UART_MspInit+0xec>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_UART_MspInit+0xec>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_UART_MspInit+0xec>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	4619      	mov	r1, r3
 8001910:	4822      	ldr	r0, [pc, #136]	; (800199c <HAL_UART_MspInit+0xf0>)
 8001912:	f001 f85f 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	481c      	ldr	r0, [pc, #112]	; (800199c <HAL_UART_MspInit+0xf0>)
 800192c:	f001 f852 	bl	80029d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_UART_MspInit+0xf8>)
 8001934:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001938:	2210      	movs	r2, #16
 800193a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 800195c:	2200      	movs	r2, #0
 800195e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001960:	480f      	ldr	r0, [pc, #60]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001962:	f000 fd95 	bl	8002490 <HAL_DMA_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800196c:	f7ff fcef 	bl	800134e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_UART_MspInit+0xf4>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	2025      	movs	r0, #37	; 0x25
 8001982:	f000 fd4e 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001986:	2025      	movs	r0, #37	; 0x25
 8001988:	f000 fd67 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40013800 	.word	0x40013800
 8001998:	40021000 	.word	0x40021000
 800199c:	40010800 	.word	0x40010800
 80019a0:	200002d0 	.word	0x200002d0
 80019a4:	40020044 	.word	0x40020044

080019a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff fe0e 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480b      	ldr	r0, [pc, #44]	; (80019dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ae:	490c      	ldr	r1, [pc, #48]	; (80019e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c4:	4c09      	ldr	r4, [pc, #36]	; (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f005 fa61 	bl	8006e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fc47 	bl	8001268 <main>
  bx lr
 80019da:	4770      	bx	lr
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019e4:	0800b330 	.word	0x0800b330
  ldr r2, =_sbss
 80019e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019ec:	20000508 	.word	0x20000508

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>

080019f2 <_constrain>:
struct Motor Motor0 = { 0 };
float voltage_power_supply;
int PP;
int DIR;
//限制只能输出low~high之间的数值
double _constrain(double amt, double low, double high) {
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019fc:	e9c7 2300 	strd	r2, r3, [r7]
	if (amt < low) {
 8001a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a08:	f7fe ffd8 	bl	80009bc <__aeabi_dcmplt>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <_constrain+0x26>
		return low;
 8001a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a16:	e00d      	b.n	8001a34 <_constrain+0x42>
	} else if (amt > high) {
 8001a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a20:	f7fe ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <_constrain+0x3e>
		return high;
 8001a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2e:	e001      	b.n	8001a34 <_constrain+0x42>
	} else {
		return amt;
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	}
}
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <_normalizeAngle>:
//限定角度只能是0~360度，不能出现负角度
float _normalizeAngle(float angle) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	float a = fmod(angle, 2 * M_PI);  //取余保证角度是-360~360度
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fced 	bl	8000428 <__aeabi_f2d>
 8001a4e:	a316      	add	r3, pc, #88	; (adr r3, 8001aa8 <_normalizeAngle+0x68>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f007 ffbc 	bl	80099d0 <fmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f832 	bl	8000ac8 <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]
	if (a >= 0) {
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff fb3b 	bl	80010e8 <__aeabi_fcmpge>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <_normalizeAngle+0x3c>
		return a;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	e00e      	b.n	8001a9a <_normalizeAngle+0x5a>
	} else {
		return a + 2 * M_PI;
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7fe fcd3 	bl	8000428 <__aeabi_f2d>
 8001a82:	a309      	add	r3, pc, #36	; (adr r3, 8001aa8 <_normalizeAngle+0x68>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fb70 	bl	800016c <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f818 	bl	8000ac8 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
	}
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	54442d18 	.word	0x54442d18
 8001aac:	401921fb 	.word	0x401921fb

08001ab0 <SetPwm>:
//由计算出三相电压设定PWM
void SetPwm(struct Motor *Motor) {
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	6078      	str	r0, [r7, #4]
	//限制电压为0~最大设定电压
	Motor->Ua = _constrain(Motor->Ua, 0.0f, voltage_power_supply);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fcb3 	bl	8000428 <__aeabi_f2d>
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4b69      	ldr	r3, [pc, #420]	; (8001c6c <SetPwm+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fcac 	bl	8000428 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7ff ff85 	bl	80019f2 <_constrain>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7fe ffea 	bl	8000ac8 <__aeabi_d2f>
 8001af4:	4602      	mov	r2, r0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]
	Motor->Ub = _constrain(Motor->Ub, 0.0f, voltage_power_supply);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc92 	bl	8000428 <__aeabi_f2d>
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
 8001b08:	4b58      	ldr	r3, [pc, #352]	; (8001c6c <SetPwm+0x1bc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fc8b 	bl	8000428 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7ff ff64 	bl	80019f2 <_constrain>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ffc9 	bl	8000ac8 <__aeabi_d2f>
 8001b36:	4602      	mov	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
	Motor->Uc = _constrain(Motor->Uc, 0.0f, voltage_power_supply);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fc71 	bl	8000428 <__aeabi_f2d>
 8001b46:	4604      	mov	r4, r0
 8001b48:	460d      	mov	r5, r1
 8001b4a:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <SetPwm+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fc6a 	bl	8000428 <__aeabi_f2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9cd 2300 	strd	r2, r3, [sp]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7ff ff43 	bl	80019f2 <_constrain>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ffa8 	bl	8000ac8 <__aeabi_d2f>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]
	//计算占空比并限定占空比的取值范围为0~1
	Motor->dc_a = _constrain(Motor->Ua / voltage_power_supply, 0.0f, 1.0f);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <SetPwm+0x1bc>)
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f9af 	bl	8000eec <__aeabi_fdiv>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fc49 	bl	8000428 <__aeabi_f2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <SetPwm+0x1c0>)
 8001b9c:	e9cd 2300 	strd	r2, r3, [sp]
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	f7ff ff23 	bl	80019f2 <_constrain>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7fe ff88 	bl	8000ac8 <__aeabi_d2f>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	61da      	str	r2, [r3, #28]
	Motor->dc_b = _constrain(Motor->Ub / voltage_power_supply, 0.0f, 1.0f);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <SetPwm+0x1bc>)
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f98f 	bl	8000eec <__aeabi_fdiv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc29 	bl	8000428 <__aeabi_f2d>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <SetPwm+0x1c0>)
 8001bdc:	e9cd 2300 	strd	r2, r3, [sp]
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f7ff ff03 	bl	80019f2 <_constrain>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ff68 	bl	8000ac8 <__aeabi_d2f>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	621a      	str	r2, [r3, #32]
	Motor->dc_c = _constrain(Motor->Uc / voltage_power_supply, 0.0f, 1.0f);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <SetPwm+0x1bc>)
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f96f 	bl	8000eec <__aeabi_fdiv>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc09 	bl	8000428 <__aeabi_f2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <SetPwm+0x1c0>)
 8001c1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	f7ff fee3 	bl	80019f2 <_constrain>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ff48 	bl	8000ac8 <__aeabi_d2f>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
	//写入PWM,详情请看《5、ESP32前置知识.md》
	if (Motor->Mot_num == 0) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10e      	bne.n	8001c64 <SetPwm+0x1b4>
		M0SetPwmA(Motor->dc_a);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f9be 	bl	8001fcc <M0SetPwmA>
		M0SetPwmB(Motor->dc_b);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f9d3 	bl	8002000 <M0SetPwmB>
		M0SetPwmC(Motor->dc_c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f9e8 	bl	8002034 <M0SetPwmC>
	}
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6c:	2000033c 	.word	0x2000033c
 8001c70:	3ff00000 	.word	0x3ff00000
 8001c74:	00000000 	.word	0x00000000

08001c78 <setPhaseVoltage>:
void setPhaseVoltage(struct Motor *Motor, float Uq, float Ud, float angle_el) {
 8001c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af02      	add	r7, sp, #8
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
	Uq = _constrain(Uq, -(voltage_power_supply) / 2,
 8001c88:	68b8      	ldr	r0, [r7, #8]
 8001c8a:	f7fe fbcd 	bl	8000428 <__aeabi_f2d>
 8001c8e:	4604      	mov	r4, r0
 8001c90:	460d      	mov	r5, r1
 8001c92:	4b87      	ldr	r3, [pc, #540]	; (8001eb0 <setPhaseVoltage+0x238>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f924 	bl	8000eec <__aeabi_fdiv>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fbbe 	bl	8000428 <__aeabi_f2d>
 8001cac:	4680      	mov	r8, r0
 8001cae:	4689      	mov	r9, r1
			(voltage_power_supply) / 2);
 8001cb0:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <setPhaseVoltage+0x238>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f917 	bl	8000eec <__aeabi_fdiv>
 8001cbe:	4603      	mov	r3, r0
	Uq = _constrain(Uq, -(voltage_power_supply) / 2,
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fbb1 	bl	8000428 <__aeabi_f2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9cd 2300 	strd	r2, r3, [sp]
 8001cce:	4642      	mov	r2, r8
 8001cd0:	464b      	mov	r3, r9
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7ff fe8c 	bl	80019f2 <_constrain>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe fef1 	bl	8000ac8 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60bb      	str	r3, [r7, #8]
	angle_el = _normalizeAngle(angle_el);
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fea8 	bl	8001a40 <_normalizeAngle>
 8001cf0:	6038      	str	r0, [r7, #0]
	// 帕克逆变换
	Motor->Ualpha = -Uq * sin(angle_el);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fb95 	bl	8000428 <__aeabi_f2d>
 8001cfe:	4604      	mov	r4, r0
 8001d00:	460d      	mov	r5, r1
 8001d02:	6838      	ldr	r0, [r7, #0]
 8001d04:	f7fe fb90 	bl	8000428 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f007 fecc 	bl	8009aac <sin>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	f7fe fbdc 	bl	80004d8 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe fece 	bl	8000ac8 <__aeabi_d2f>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	619a      	str	r2, [r3, #24]
	Motor->Ubeta = Uq * cos(angle_el);
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	f7fe fb78 	bl	8000428 <__aeabi_f2d>
 8001d38:	4604      	mov	r4, r0
 8001d3a:	460d      	mov	r5, r1
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f7fe fb73 	bl	8000428 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f007 fe69 	bl	8009a20 <cos>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f7fe fbbf 	bl	80004d8 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe feb1 	bl	8000ac8 <__aeabi_d2f>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	615a      	str	r2, [r3, #20]
	// 克拉克逆变换
	Motor->Ua = Motor->Ualpha + voltage_power_supply / 2;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	699c      	ldr	r4, [r3, #24]
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <setPhaseVoltage+0x238>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f8b7 	bl	8000eec <__aeabi_fdiv>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7fe fef6 	bl	8000b74 <__addsf3>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]
	Motor->Ub = (sqrt(3) * Motor->Ubeta - Motor->Ualpha) / 2 + voltage_power_supply / 2;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fb47 	bl	8000428 <__aeabi_f2d>
 8001d9a:	a343      	add	r3, pc, #268	; (adr r3, 8001ea8 <setPhaseVoltage+0x230>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fb9a 	bl	80004d8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	461d      	mov	r5, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fb39 	bl	8000428 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7fe f9d3 	bl	8000168 <__aeabi_dsub>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd2:	f7fe fcab 	bl	800072c <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4614      	mov	r4, r2
 8001ddc:	461d      	mov	r5, r3
 8001dde:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <setPhaseVoltage+0x238>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f880 	bl	8000eec <__aeabi_fdiv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb1a 	bl	8000428 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	f7fe f9b6 	bl	800016c <__adddf3>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7fe fe5e 	bl	8000ac8 <__aeabi_d2f>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	60da      	str	r2, [r3, #12]
	Motor->Uc = (-Motor->Ualpha - sqrt(3) * Motor->Ubeta) / 2 + voltage_power_supply / 2;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb04 	bl	8000428 <__aeabi_f2d>
 8001e20:	4604      	mov	r4, r0
 8001e22:	460d      	mov	r5, r1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fafd 	bl	8000428 <__aeabi_f2d>
 8001e2e:	a31e      	add	r3, pc, #120	; (adr r3, 8001ea8 <setPhaseVoltage+0x230>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fb50 	bl	80004d8 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe f992 	bl	8000168 <__aeabi_dsub>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e54:	f7fe fc6a 	bl	800072c <__aeabi_ddiv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4614      	mov	r4, r2
 8001e5e:	461d      	mov	r5, r3
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <setPhaseVoltage+0x238>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f83f 	bl	8000eec <__aeabi_fdiv>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fad9 	bl	8000428 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f7fe f975 	bl	800016c <__adddf3>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fe1d 	bl	8000ac8 <__aeabi_d2f>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	611a      	str	r2, [r3, #16]
	  //3.其实并不冲突，首先肯定的是第2点中FOC换相时某一相在不同时刻会有正电压和负电压。这一相的正负电压就是由第1点的PWM(都是正电压没有负电压)产生了的。要理解这点就需要知道3路PWM是如何控制6个MOS管的了
	  //4.1路PWM可以控制2个半桥(上桥臂和下桥臂)
	  //**PWM为高电平时**：上桥臂MOS管导通，下桥臂MOS管关断，将电源电压施加到相应的绕组上。
	  //**PWM为低电平时**：上桥臂MOS管关断，在上桥臂关断后，稍等一段时间(死区时间，防止上下桥臂有短暂的导通造成短路)再让下桥臂导通。
	  //也就是说某一路PWM(都是正电压没有负电压)为高电平时，上桥臂导通，对应Ua线圈电流流入，这时Ua为正电压;PWM(都是正电压没有负电压)为低电平时,上桥臂关断,下桥臂导通。此时有可能在Ua线圈电流流出，这时Ua为负电压。
	SetPwm(Motor);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff fe0b 	bl	8001ab0 <SetPwm>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	e8584caa 	.word	0xe8584caa
 8001eac:	3ffbb67a 	.word	0x3ffbb67a
 8001eb0:	2000033c 	.word	0x2000033c

08001eb4 <hhFocInit>:
void hhFocInit(float power_supply, int _PP, int _DIR) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	PP = _PP;
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <hhFocInit+0x38>)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	6013      	str	r3, [r2, #0]
	DIR = _DIR;
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <hhFocInit+0x3c>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6013      	str	r3, [r2, #0]
	voltage_power_supply = power_supply;
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <hhFocInit+0x40>)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6013      	str	r3, [r2, #0]
	InitPwm();
 8001ed2:	f000 f869 	bl	8001fa8 <InitPwm>
	StartSerialITReceive();
 8001ed6:	f000 f8f3 	bl	80020c0 <StartSerialITReceive>
	Serial_Printf("%s\r\n", "完成PWM初始化设置");
 8001eda:	4907      	ldr	r1, [pc, #28]	; (8001ef8 <hhFocInit+0x44>)
 8001edc:	4807      	ldr	r0, [pc, #28]	; (8001efc <hhFocInit+0x48>)
 8001ede:	f000 f8c3 	bl	8002068 <Serial_Printf>
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000340 	.word	0x20000340
 8001ef0:	20000344 	.word	0x20000344
 8001ef4:	2000033c 	.word	0x2000033c
 8001ef8:	0800acc8 	.word	0x0800acc8
 8001efc:	0800ace4 	.word	0x0800ace4

08001f00 <SetsetPhaseVoltageM0>:
void SetsetPhaseVoltageM0(float Uq, float Ud, float angle_el) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	setPhaseVoltage(&Motor0, Uq, Ud, angle_el);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <SetsetPhaseVoltageM0+0x20>)
 8001f14:	f7ff feb0 	bl	8001c78 <setPhaseVoltage>
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000314 	.word	0x20000314

08001f24 <hhOpenLoopVelM0>:
float OpenLoopShaftAngle=0;
void hhOpenLoopVelM0(float target_velocity){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  //计算当前每个Loop的运行时间间隔
  float Ts = 1 * 1e-3f;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <hhOpenLoopVelM0+0x70>)
 8001f2e:	60fb      	str	r3, [r7, #12]
  // 通过乘以时间间隔和目标速度来计算需要转动的机械角度，存储在 shaft_angle 变量中。在此之前，还需要对轴角度进行归一化，以确保其值在 0 到 2π 之间。
  OpenLoopShaftAngle = _normalizeAngle(OpenLoopShaftAngle + target_velocity*Ts);
 8001f30:	68f9      	ldr	r1, [r7, #12]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe ff26 	bl	8000d84 <__aeabi_fmul>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <hhOpenLoopVelM0+0x74>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f7fe fe16 	bl	8000b74 <__addsf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fd78 	bl	8001a40 <_normalizeAngle>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <hhOpenLoopVelM0+0x74>)
 8001f54:	6013      	str	r3, [r2, #0]
  float Uq = voltage_power_supply/3;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <hhOpenLoopVelM0+0x78>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4911      	ldr	r1, [pc, #68]	; (8001fa0 <hhOpenLoopVelM0+0x7c>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe ffc5 	bl	8000eec <__aeabi_fdiv>
 8001f62:	4603      	mov	r3, r0
 8001f64:	60bb      	str	r3, [r7, #8]
  SetsetPhaseVoltageM0(Uq,  0, PP * OpenLoopShaftAngle);
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <hhOpenLoopVelM0+0x80>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe feb6 	bl	8000cdc <__aeabi_i2f>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <hhOpenLoopVelM0+0x74>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f7fe ff03 	bl	8000d84 <__aeabi_fmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	f04f 0100 	mov.w	r1, #0
 8001f86:	68b8      	ldr	r0, [r7, #8]
 8001f88:	f7ff ffba 	bl	8001f00 <SetsetPhaseVoltageM0>
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	3a83126f 	.word	0x3a83126f
 8001f98:	20000348 	.word	0x20000348
 8001f9c:	2000033c 	.word	0x2000033c
 8001fa0:	40400000 	.word	0x40400000
 8001fa4:	20000340 	.word	0x20000340

08001fa8 <InitPwm>:
 *  Created on: Mar 11, 2025
 *      Author: KingPC
 */

#include "tim.h"
void InitPwm(){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001fac:	2100      	movs	r1, #0
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <InitPwm+0x20>)
 8001fb0:	f001 fb9e 	bl	80036f0 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <InitPwm+0x20>)
 8001fb8:	f001 fb9a 	bl	80036f0 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <InitPwm+0x20>)
 8001fc0:	f001 fb96 	bl	80036f0 <HAL_TIM_PWM_Start>
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200001f8 	.word	0x200001f8

08001fcc <M0SetPwmA>:
void M0SetPwmA(float Duty){
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Duty * 4800.0f);
 8001fd4:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <M0SetPwmA+0x2c>)
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fed4 	bl	8000d84 <__aeabi_fmul>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <M0SetPwmA+0x30>)
 8001fe2:	681c      	ldr	r4, [r3, #0]
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7ff f893 	bl	8001110 <__aeabi_f2uiz>
 8001fea:	4603      	mov	r3, r0
 8001fec:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	45960000 	.word	0x45960000
 8001ffc:	200001f8 	.word	0x200001f8

08002000 <M0SetPwmB>:
void M0SetPwmB(float Duty){
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,Duty * 4800.0f);
 8002008:	4908      	ldr	r1, [pc, #32]	; (800202c <M0SetPwmB+0x2c>)
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe feba 	bl	8000d84 <__aeabi_fmul>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <M0SetPwmB+0x30>)
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff f879 	bl	8001110 <__aeabi_f2uiz>
 800201e:	4603      	mov	r3, r0
 8002020:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	45960000 	.word	0x45960000
 8002030:	200001f8 	.word	0x200001f8

08002034 <M0SetPwmC>:
void M0SetPwmC(float Duty){
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,Duty * 4800.0f);
 800203c:	4908      	ldr	r1, [pc, #32]	; (8002060 <M0SetPwmC+0x2c>)
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fea0 	bl	8000d84 <__aeabi_fmul>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <M0SetPwmC+0x30>)
 800204a:	681c      	ldr	r4, [r3, #0]
 800204c:	4610      	mov	r0, r2
 800204e:	f7ff f85f 	bl	8001110 <__aeabi_f2uiz>
 8002052:	4603      	mov	r3, r0
 8002054:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}
 800205e:	bf00      	nop
 8002060:	45960000 	.word	0x45960000
 8002064:	200001f8 	.word	0x200001f8

08002068 <Serial_Printf>:
#include "stdio.h"
#include"gpio.h"
#include"usart.h"
#include <string.h>
#include <stdlib.h>
void Serial_Printf(const char *format, ...) {
 8002068:	b40f      	push	{r0, r1, r2, r3}
 800206a:	b580      	push	{r7, lr}
 800206c:	b0c2      	sub	sp, #264	; 0x108
 800206e:	af00      	add	r7, sp, #0
	va_list args;			// 定义参数列表变量
	va_start(args, format); // 从format位置开始接收参数表，放在arg里面
 8002070:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002074:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	char strBuf[256];				// 定义输出的字符串
	vsprintf(strBuf, format, args); // 使用vsprintf将格式化的数据写入缓冲区
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800207e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fe86 	bl	8006d94 <vsiprintf>
	va_end(args);					// 结束可变参数的使用

	// 等待上次的数据发送完成，避免新的数据覆盖正在传输的数据，导致混乱
	while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX) {
 8002088:	bf00      	nop
 800208a:	480c      	ldr	r0, [pc, #48]	; (80020bc <Serial_Printf+0x54>)
 800208c:	f002 fd64 	bl	8004b58 <HAL_UART_GetState>
 8002090:	4603      	mov	r3, r0
 8002092:	2b21      	cmp	r3, #33	; 0x21
 8002094:	d0f9      	beq.n	800208a <Serial_Printf+0x22>
		// Wait for DMA transfer to complete
	}

	HAL_UART_Transmit_DMA(&huart1, (uint8_t*) strBuf, strlen(strBuf));
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f859 	bl	8000150 <strlen>
 800209e:	4603      	mov	r3, r0
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <Serial_Printf+0x54>)
 80020a8:	f002 f9d2 	bl	8004450 <HAL_UART_Transmit_DMA>
}
 80020ac:	bf00      	nop
 80020ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80020b2:	46bd      	mov	sp, r7
 80020b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020b8:	b004      	add	sp, #16
 80020ba:	4770      	bx	lr
 80020bc:	20000288 	.word	0x20000288

080020c0 <StartSerialITReceive>:
char Serial_RxPacket[100];
void StartSerialITReceive() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*) Serial_RxPacket,
 80020c4:	2264      	movs	r2, #100	; 0x64
 80020c6:	4903      	ldr	r1, [pc, #12]	; (80020d4 <StartSerialITReceive+0x14>)
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <StartSerialITReceive+0x18>)
 80020ca:	f002 fa31 	bl	8004530 <HAL_UARTEx_ReceiveToIdle_IT>
			sizeof(Serial_RxPacket)); //最后参数表示最大接收长度
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000034c 	.word	0x2000034c
 80020d8:	20000288 	.word	0x20000288

080020dc <HAL_UARTEx_RxEventCallback>:
float ReceivedFloat1 = 0;
float ReceivedFloat2 = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart1) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a28      	ldr	r2, [pc, #160]	; (800218c <HAL_UARTEx_RxEventCallback+0xb0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d149      	bne.n	8002184 <HAL_UARTEx_RxEventCallback+0xa8>
		Serial_RxPacket[Size] = '\0'; // 由于C语言中的字符串都必须以'\0'为结束标志的，所以接收完后需加上这行
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_UARTEx_RxEventCallback+0xb4>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	54d1      	strb	r1, [r2, r3]
		// 检查是否包含换行符 `\n`，如果有则截断字符串
		char *newlinePos = strchr(Serial_RxPacket, '\n');
 80020f8:	210a      	movs	r1, #10
 80020fa:	4825      	ldr	r0, [pc, #148]	; (8002190 <HAL_UARTEx_RxEventCallback+0xb4>)
 80020fc:	f004 fe5c 	bl	8006db8 <strchr>
 8002100:	60f8      	str	r0, [r7, #12]
		if (newlinePos != NULL) {
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_UARTEx_RxEventCallback+0x32>
			*newlinePos = '\0'; // 将 `\n` 替换为字符串结束符
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
		}
		// 检查是否包含逗号 `,`
		char *commaPos = strchr(Serial_RxPacket, ',');
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	481f      	ldr	r0, [pc, #124]	; (8002190 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002112:	f004 fe51 	bl	8006db8 <strchr>
 8002116:	60b8      	str	r0, [r7, #8]
		if (commaPos != NULL) {
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01d      	beq.n	800215a <HAL_UARTEx_RxEventCallback+0x7e>
			// 如果有逗号，则将逗号替换为字符串结束符，并分别解析两个浮点数
			*commaPos = '\0';
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
			ReceivedFloat1 = atof(Serial_RxPacket);
 8002124:	481a      	ldr	r0, [pc, #104]	; (8002190 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002126:	f003 f863 	bl	80051f0 <atof>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fcc9 	bl	8000ac8 <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	4a16      	ldr	r2, [pc, #88]	; (8002194 <HAL_UARTEx_RxEventCallback+0xb8>)
 800213a:	6013      	str	r3, [r2, #0]
			ReceivedFloat2 = atof(commaPos + 1);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f003 f855 	bl	80051f0 <atof>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fcbb 	bl	8000ac8 <__aeabi_d2f>
 8002152:	4603      	mov	r3, r0
 8002154:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e00f      	b.n	800217a <HAL_UARTEx_RxEventCallback+0x9e>
		} else {
			// 如果没有逗号，则只解析一个浮点数
			ReceivedFloat1 = atof(Serial_RxPacket);
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <HAL_UARTEx_RxEventCallback+0xb4>)
 800215c:	f003 f848 	bl	80051f0 <atof>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fcae 	bl	8000ac8 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002170:	6013      	str	r3, [r2, #0]
			ReceivedFloat2 = 0; // 如果没有第二个浮点数，可以将 ReceivedFloat2 设置为 0 或其他默认值
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
		}
		// 重新启动 UART 接收
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*) Serial_RxPacket,
 800217a:	2264      	movs	r2, #100	; 0x64
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_UARTEx_RxEventCallback+0xb4>)
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <HAL_UARTEx_RxEventCallback+0xb0>)
 8002180:	f002 f9d6 	bl	8004530 <HAL_UARTEx_ReceiveToIdle_IT>
				sizeof(Serial_RxPacket));
	}
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000288 	.word	0x20000288
 8002190:	2000034c 	.word	0x2000034c
 8002194:	200003b0 	.word	0x200003b0
 8002198:	200003b4 	.word	0x200003b4

0800219c <GetSerialRetFloat1>:
float GetSerialRetFloat1() {
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	return ReceivedFloat1;
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <GetSerialRetFloat1+0x10>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	200003b0 	.word	0x200003b0

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_Init+0x28>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_Init+0x28>)
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 f923 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	200f      	movs	r0, #15
 80021c8:	f000 f808 	bl	80021dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021cc:	f7ff f8c4 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_InitTick+0x54>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x58>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f93b 	bl	8002476 <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f000 f903 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_InitTick+0x5c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000000 	.word	0x20000000
 8002234:	20000008 	.word	0x20000008
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_IncTick+0x1c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_IncTick+0x20>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <HAL_IncTick+0x20>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000008 	.word	0x20000008
 800225c:	200003b8 	.word	0x200003b8

08002260 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return uwTick;
 8002264:	4b02      	ldr	r3, [pc, #8]	; (8002270 <HAL_GetTick+0x10>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	200003b8 	.word	0x200003b8

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4906      	ldr	r1, [pc, #24]	; (800230c <__NVIC_EnableIRQ+0x34>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	; (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff90 	bl	8002310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff2d 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff42 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff90 	bl	8002364 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5f 	bl	8002310 <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff35 	bl	80022d8 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e043      	b.n	800252e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b22      	ldr	r3, [pc, #136]	; (8002538 <HAL_DMA_Init+0xa8>)
 80024ae:	4413      	add	r3, r2
 80024b0:	4a22      	ldr	r2, [pc, #136]	; (800253c <HAL_DMA_Init+0xac>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	009a      	lsls	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <HAL_DMA_Init+0xb0>)
 80024c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	bffdfff8 	.word	0xbffdfff8
 800253c:	cccccccd 	.word	0xcccccccd
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Start_IT+0x20>
 8002560:	2302      	movs	r3, #2
 8002562:	e04b      	b.n	80025fc <HAL_DMA_Start_IT+0xb8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d13a      	bne.n	80025ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f9eb 	bl	8002978 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 020e 	orr.w	r2, r2, #14
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e00f      	b.n	80025dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0204 	bic.w	r2, r2, #4
 80025ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 020a 	orr.w	r2, r2, #10
 80025da:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e005      	b.n	80025fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d008      	beq.n	800262e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e020      	b.n	8002670 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020e 	bic.w	r2, r2, #14
 800263c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d005      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2204      	movs	r2, #4
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	e051      	b.n	8002744 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 020e 	bic.w	r2, r2, #14
 80026ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a22      	ldr	r2, [pc, #136]	; (8002750 <HAL_DMA_Abort_IT+0xd4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d029      	beq.n	800271e <HAL_DMA_Abort_IT+0xa2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_DMA_Abort_IT+0xd8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_Abort_IT+0x9e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_DMA_Abort_IT+0xdc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01a      	beq.n	8002714 <HAL_DMA_Abort_IT+0x98>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_DMA_Abort_IT+0xe0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d012      	beq.n	800270e <HAL_DMA_Abort_IT+0x92>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_DMA_Abort_IT+0xe4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00a      	beq.n	8002708 <HAL_DMA_Abort_IT+0x8c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_DMA_Abort_IT+0xe8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d102      	bne.n	8002702 <HAL_DMA_Abort_IT+0x86>
 80026fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002700:	e00e      	b.n	8002720 <HAL_DMA_Abort_IT+0xa4>
 8002702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002706:	e00b      	b.n	8002720 <HAL_DMA_Abort_IT+0xa4>
 8002708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270c:	e008      	b.n	8002720 <HAL_DMA_Abort_IT+0xa4>
 800270e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002712:	e005      	b.n	8002720 <HAL_DMA_Abort_IT+0xa4>
 8002714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002718:	e002      	b.n	8002720 <HAL_DMA_Abort_IT+0xa4>
 800271a:	2310      	movs	r3, #16
 800271c:	e000      	b.n	8002720 <HAL_DMA_Abort_IT+0xa4>
 800271e:	2301      	movs	r3, #1
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_DMA_Abort_IT+0xec>)
 8002722:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
    } 
  }
  return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020008 	.word	0x40020008
 8002754:	4002001c 	.word	0x4002001c
 8002758:	40020030 	.word	0x40020030
 800275c:	40020044 	.word	0x40020044
 8002760:	40020058 	.word	0x40020058
 8002764:	4002006c 	.word	0x4002006c
 8002768:	40020000 	.word	0x40020000

0800276c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2204      	movs	r2, #4
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d04f      	beq.n	8002834 <HAL_DMA_IRQHandler+0xc8>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04a      	beq.n	8002834 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a66      	ldr	r2, [pc, #408]	; (800295c <HAL_DMA_IRQHandler+0x1f0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d029      	beq.n	800281a <HAL_DMA_IRQHandler+0xae>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_DMA_IRQHandler+0x1f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_DMA_IRQHandler+0xaa>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a63      	ldr	r2, [pc, #396]	; (8002964 <HAL_DMA_IRQHandler+0x1f8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01a      	beq.n	8002810 <HAL_DMA_IRQHandler+0xa4>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a62      	ldr	r2, [pc, #392]	; (8002968 <HAL_DMA_IRQHandler+0x1fc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d012      	beq.n	800280a <HAL_DMA_IRQHandler+0x9e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a60      	ldr	r2, [pc, #384]	; (800296c <HAL_DMA_IRQHandler+0x200>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00a      	beq.n	8002804 <HAL_DMA_IRQHandler+0x98>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <HAL_DMA_IRQHandler+0x204>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d102      	bne.n	80027fe <HAL_DMA_IRQHandler+0x92>
 80027f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027fc:	e00e      	b.n	800281c <HAL_DMA_IRQHandler+0xb0>
 80027fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002802:	e00b      	b.n	800281c <HAL_DMA_IRQHandler+0xb0>
 8002804:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002808:	e008      	b.n	800281c <HAL_DMA_IRQHandler+0xb0>
 800280a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800280e:	e005      	b.n	800281c <HAL_DMA_IRQHandler+0xb0>
 8002810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002814:	e002      	b.n	800281c <HAL_DMA_IRQHandler+0xb0>
 8002816:	2340      	movs	r3, #64	; 0x40
 8002818:	e000      	b.n	800281c <HAL_DMA_IRQHandler+0xb0>
 800281a:	2304      	movs	r3, #4
 800281c:	4a55      	ldr	r2, [pc, #340]	; (8002974 <HAL_DMA_IRQHandler+0x208>)
 800281e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8094 	beq.w	8002952 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002832:	e08e      	b.n	8002952 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2202      	movs	r2, #2
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d056      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x186>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d051      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 020a 	bic.w	r2, r2, #10
 800286a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a38      	ldr	r2, [pc, #224]	; (800295c <HAL_DMA_IRQHandler+0x1f0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d029      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x166>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a37      	ldr	r2, [pc, #220]	; (8002960 <HAL_DMA_IRQHandler+0x1f4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0x162>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a35      	ldr	r2, [pc, #212]	; (8002964 <HAL_DMA_IRQHandler+0x1f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x15c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a34      	ldr	r2, [pc, #208]	; (8002968 <HAL_DMA_IRQHandler+0x1fc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d012      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x156>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a32      	ldr	r2, [pc, #200]	; (800296c <HAL_DMA_IRQHandler+0x200>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00a      	beq.n	80028bc <HAL_DMA_IRQHandler+0x150>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a31      	ldr	r2, [pc, #196]	; (8002970 <HAL_DMA_IRQHandler+0x204>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d102      	bne.n	80028b6 <HAL_DMA_IRQHandler+0x14a>
 80028b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028b4:	e00e      	b.n	80028d4 <HAL_DMA_IRQHandler+0x168>
 80028b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ba:	e00b      	b.n	80028d4 <HAL_DMA_IRQHandler+0x168>
 80028bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c0:	e008      	b.n	80028d4 <HAL_DMA_IRQHandler+0x168>
 80028c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c6:	e005      	b.n	80028d4 <HAL_DMA_IRQHandler+0x168>
 80028c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028cc:	e002      	b.n	80028d4 <HAL_DMA_IRQHandler+0x168>
 80028ce:	2320      	movs	r3, #32
 80028d0:	e000      	b.n	80028d4 <HAL_DMA_IRQHandler+0x168>
 80028d2:	2302      	movs	r3, #2
 80028d4:	4a27      	ldr	r2, [pc, #156]	; (8002974 <HAL_DMA_IRQHandler+0x208>)
 80028d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d034      	beq.n	8002952 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028f0:	e02f      	b.n	8002952 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2208      	movs	r2, #8
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d028      	beq.n	8002954 <HAL_DMA_IRQHandler+0x1e8>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 020e 	bic.w	r2, r2, #14
 800291a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
    }
  }
  return;
 8002952:	bf00      	nop
 8002954:	bf00      	nop
}
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40020008 	.word	0x40020008
 8002960:	4002001c 	.word	0x4002001c
 8002964:	40020030 	.word	0x40020030
 8002968:	40020044 	.word	0x40020044
 800296c:	40020058 	.word	0x40020058
 8002970:	4002006c 	.word	0x4002006c
 8002974:	40020000 	.word	0x40020000

08002978 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	2101      	movs	r1, #1
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d108      	bne.n	80029b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029b6:	e007      	b.n	80029c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	60da      	str	r2, [r3, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b08b      	sub	sp, #44	; 0x2c
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e6:	e169      	b.n	8002cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029e8:	2201      	movs	r2, #1
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	f040 8158 	bne.w	8002cb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a9a      	ldr	r2, [pc, #616]	; (8002c74 <HAL_GPIO_Init+0x2a0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d05e      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a10:	4a98      	ldr	r2, [pc, #608]	; (8002c74 <HAL_GPIO_Init+0x2a0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d875      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a16:	4a98      	ldr	r2, [pc, #608]	; (8002c78 <HAL_GPIO_Init+0x2a4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d058      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a1c:	4a96      	ldr	r2, [pc, #600]	; (8002c78 <HAL_GPIO_Init+0x2a4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d86f      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a22:	4a96      	ldr	r2, [pc, #600]	; (8002c7c <HAL_GPIO_Init+0x2a8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d052      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a28:	4a94      	ldr	r2, [pc, #592]	; (8002c7c <HAL_GPIO_Init+0x2a8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d869      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a2e:	4a94      	ldr	r2, [pc, #592]	; (8002c80 <HAL_GPIO_Init+0x2ac>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d04c      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a34:	4a92      	ldr	r2, [pc, #584]	; (8002c80 <HAL_GPIO_Init+0x2ac>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d863      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a3a:	4a92      	ldr	r2, [pc, #584]	; (8002c84 <HAL_GPIO_Init+0x2b0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d046      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
 8002a40:	4a90      	ldr	r2, [pc, #576]	; (8002c84 <HAL_GPIO_Init+0x2b0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d85d      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d82a      	bhi.n	8002aa0 <HAL_GPIO_Init+0xcc>
 8002a4a:	2b12      	cmp	r3, #18
 8002a4c:	d859      	bhi.n	8002b02 <HAL_GPIO_Init+0x12e>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_GPIO_Init+0x80>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002acf 	.word	0x08002acf
 8002a58:	08002aa9 	.word	0x08002aa9
 8002a5c:	08002abb 	.word	0x08002abb
 8002a60:	08002afd 	.word	0x08002afd
 8002a64:	08002b03 	.word	0x08002b03
 8002a68:	08002b03 	.word	0x08002b03
 8002a6c:	08002b03 	.word	0x08002b03
 8002a70:	08002b03 	.word	0x08002b03
 8002a74:	08002b03 	.word	0x08002b03
 8002a78:	08002b03 	.word	0x08002b03
 8002a7c:	08002b03 	.word	0x08002b03
 8002a80:	08002b03 	.word	0x08002b03
 8002a84:	08002b03 	.word	0x08002b03
 8002a88:	08002b03 	.word	0x08002b03
 8002a8c:	08002b03 	.word	0x08002b03
 8002a90:	08002b03 	.word	0x08002b03
 8002a94:	08002b03 	.word	0x08002b03
 8002a98:	08002ab1 	.word	0x08002ab1
 8002a9c:	08002ac5 	.word	0x08002ac5
 8002aa0:	4a79      	ldr	r2, [pc, #484]	; (8002c88 <HAL_GPIO_Init+0x2b4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aa6:	e02c      	b.n	8002b02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	623b      	str	r3, [r7, #32]
          break;
 8002aae:	e029      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	623b      	str	r3, [r7, #32]
          break;
 8002ab8:	e024      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	3308      	adds	r3, #8
 8002ac0:	623b      	str	r3, [r7, #32]
          break;
 8002ac2:	e01f      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	623b      	str	r3, [r7, #32]
          break;
 8002acc:	e01a      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	623b      	str	r3, [r7, #32]
          break;
 8002ada:	e013      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	611a      	str	r2, [r3, #16]
          break;
 8002aee:	e009      	b.n	8002b04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af0:	2308      	movs	r3, #8
 8002af2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	615a      	str	r2, [r3, #20]
          break;
 8002afa:	e003      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
          break;
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x130>
          break;
 8002b02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2bff      	cmp	r3, #255	; 0xff
 8002b08:	d801      	bhi.n	8002b0e <HAL_GPIO_Init+0x13a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	e001      	b.n	8002b12 <HAL_GPIO_Init+0x13e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2bff      	cmp	r3, #255	; 0xff
 8002b18:	d802      	bhi.n	8002b20 <HAL_GPIO_Init+0x14c>
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	e002      	b.n	8002b26 <HAL_GPIO_Init+0x152>
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3b08      	subs	r3, #8
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	210f      	movs	r1, #15
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	431a      	orrs	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b1 	beq.w	8002cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b54:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <HAL_GPIO_Init+0x2b8>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a4c      	ldr	r2, [pc, #304]	; (8002c8c <HAL_GPIO_Init+0x2b8>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_GPIO_Init+0x2b8>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b6c:	4a48      	ldr	r2, [pc, #288]	; (8002c90 <HAL_GPIO_Init+0x2bc>)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <HAL_GPIO_Init+0x2c0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <HAL_GPIO_Init+0x1ec>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3f      	ldr	r2, [pc, #252]	; (8002c98 <HAL_GPIO_Init+0x2c4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00d      	beq.n	8002bbc <HAL_GPIO_Init+0x1e8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3e      	ldr	r2, [pc, #248]	; (8002c9c <HAL_GPIO_Init+0x2c8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d007      	beq.n	8002bb8 <HAL_GPIO_Init+0x1e4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3d      	ldr	r2, [pc, #244]	; (8002ca0 <HAL_GPIO_Init+0x2cc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_GPIO_Init+0x1e0>
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e006      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e004      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e002      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_GPIO_Init+0x1ee>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	f002 0203 	and.w	r2, r2, #3
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	4093      	lsls	r3, r2
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bd2:	492f      	ldr	r1, [pc, #188]	; (8002c90 <HAL_GPIO_Init+0x2bc>)
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	492c      	ldr	r1, [pc, #176]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	4928      	ldr	r1, [pc, #160]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d006      	beq.n	8002c22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4922      	ldr	r1, [pc, #136]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
 8002c20:	e006      	b.n	8002c30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	491e      	ldr	r1, [pc, #120]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	4918      	ldr	r1, [pc, #96]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4914      	ldr	r1, [pc, #80]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d021      	beq.n	8002ca8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e021      	b.n	8002cb6 <HAL_GPIO_Init+0x2e2>
 8002c72:	bf00      	nop
 8002c74:	10320000 	.word	0x10320000
 8002c78:	10310000 	.word	0x10310000
 8002c7c:	10220000 	.word	0x10220000
 8002c80:	10210000 	.word	0x10210000
 8002c84:	10120000 	.word	0x10120000
 8002c88:	10110000 	.word	0x10110000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40010800 	.word	0x40010800
 8002c98:	40010c00 	.word	0x40010c00
 8002c9c:	40011000 	.word	0x40011000
 8002ca0:	40011400 	.word	0x40011400
 8002ca4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_GPIO_Init+0x304>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <HAL_GPIO_Init+0x304>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	3301      	adds	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f47f ae8e 	bne.w	80029e8 <HAL_GPIO_Init+0x14>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	372c      	adds	r7, #44	; 0x2c
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e272      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8087 	beq.w	8002e0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cfc:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d00c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d08:	4b8f      	ldr	r3, [pc, #572]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d112      	bne.n	8002d3a <HAL_RCC_OscConfig+0x5e>
 8002d14:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d10b      	bne.n	8002d3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d06c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x12c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d168      	bne.n	8002e08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e24c      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x76>
 8002d44:	4b80      	ldr	r3, [pc, #512]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7f      	ldr	r2, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e02e      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b7b      	ldr	r3, [pc, #492]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7a      	ldr	r2, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b78      	ldr	r3, [pc, #480]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a77      	ldr	r2, [pc, #476]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0xbc>
 8002d7e:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a71      	ldr	r2, [pc, #452]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b6f      	ldr	r3, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6e      	ldr	r2, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d98:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a6a      	ldr	r2, [pc, #424]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a67      	ldr	r2, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fa52 	bl	8002260 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff fa4e 	bl	8002260 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e200      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xe4>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7ff fa3e 	bl	8002260 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7ff fa3a 	bl	8002260 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1ec      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x10c>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e16:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x18c>
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x176>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1c0      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4939      	ldr	r1, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCC_OscConfig+0x270>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7ff f9f3 	bl	8002260 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7ff f9ef 	bl	8002260 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1a1      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4927      	ldr	r1, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCC_OscConfig+0x270>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f9d2 	bl	8002260 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7ff f9ce 	bl	8002260 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e180      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d03a      	beq.n	8002f60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d019      	beq.n	8002f26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef8:	f7ff f9b2 	bl	8002260 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f00:	f7ff f9ae 	bl	8002260 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e160      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f000 face 	bl	80034c0 <RCC_Delay>
 8002f24:	e01c      	b.n	8002f60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_OscConfig+0x274>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7ff f998 	bl	8002260 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f32:	e00f      	b.n	8002f54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f34:	f7ff f994 	bl	8002260 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d908      	bls.n	8002f54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e146      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	42420000 	.word	0x42420000
 8002f50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b92      	ldr	r3, [pc, #584]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e9      	bne.n	8002f34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80a6 	beq.w	80030ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b8b      	ldr	r3, [pc, #556]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10d      	bne.n	8002f9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a87      	ldr	r2, [pc, #540]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f88:	61d3      	str	r3, [r2, #28]
 8002f8a:	4b85      	ldr	r3, [pc, #532]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b82      	ldr	r3, [pc, #520]	; (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a7e      	ldr	r2, [pc, #504]	; (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7ff f955 	bl	8002260 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7ff f951 	bl	8002260 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e103      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x312>
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4a6e      	ldr	r2, [pc, #440]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6213      	str	r3, [r2, #32]
 8002fec:	e02d      	b.n	800304a <HAL_RCC_OscConfig+0x36e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x334>
 8002ff6:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a69      	ldr	r2, [pc, #420]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a66      	ldr	r2, [pc, #408]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	e01c      	b.n	800304a <HAL_RCC_OscConfig+0x36e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b05      	cmp	r3, #5
 8003016:	d10c      	bne.n	8003032 <HAL_RCC_OscConfig+0x356>
 8003018:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a60      	ldr	r2, [pc, #384]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	4b5e      	ldr	r3, [pc, #376]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a5d      	ldr	r2, [pc, #372]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e00b      	b.n	800304a <HAL_RCC_OscConfig+0x36e>
 8003032:	4b5b      	ldr	r3, [pc, #364]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a5a      	ldr	r2, [pc, #360]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4a57      	ldr	r2, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d015      	beq.n	800307e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7ff f905 	bl	8002260 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7ff f901 	bl	8002260 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e0b1      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003070:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ee      	beq.n	800305a <HAL_RCC_OscConfig+0x37e>
 800307c:	e014      	b.n	80030a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7ff f8ef 	bl	8002260 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7ff f8eb 	bl	8002260 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e09b      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309c:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ee      	bne.n	8003086 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b3c      	ldr	r3, [pc, #240]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8087 	beq.w	80031d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c4:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d061      	beq.n	8003194 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d146      	bne.n	8003166 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d8:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0x4cc>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7ff f8bf 	bl	8002260 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7ff f8bb 	bl	8002260 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e06d      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f8:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d108      	bne.n	8003120 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4921      	ldr	r1, [pc, #132]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a19      	ldr	r1, [r3, #32]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	430b      	orrs	r3, r1
 8003132:	491b      	ldr	r1, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x4cc>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7ff f88f 	bl	8002260 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003146:	f7ff f88b 	bl	8002260 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e03d      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x46a>
 8003164:	e035      	b.n	80031d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7ff f878 	bl	8002260 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7ff f874 	bl	8002260 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e026      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x498>
 8003192:	e01e      	b.n	80031d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e019      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_OscConfig+0x500>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0d0      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d910      	bls.n	8003224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4965      	ldr	r1, [pc, #404]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0b8      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d020      	beq.n	8003272 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800323c:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003246:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800325e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	494d      	ldr	r1, [pc, #308]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d040      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d115      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e07f      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e073      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06b      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4936      	ldr	r1, [pc, #216]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fe ffc6 	bl	8002260 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe ffc2 	bl	8002260 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e053      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d210      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4922      	ldr	r1, [pc, #136]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e032      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4916      	ldr	r1, [pc, #88]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	490e      	ldr	r1, [pc, #56]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800336e:	f000 f821 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8003372:	4602      	mov	r2, r0
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	490a      	ldr	r1, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	5ccb      	ldrb	r3, [r1, r3]
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1cc>)
 8003388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1d0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe ff24 	bl	80021dc <HAL_InitTick>

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	0800acec 	.word	0x0800acec
 80033ac:	20000000 	.word	0x20000000
 80033b0:	20000004 	.word	0x20000004

080033b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_GetSysClockFreq+0x94>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x30>
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x36>
 80033e2:	e027      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_GetSysClockFreq+0x98>)
 80033e6:	613b      	str	r3, [r7, #16]
      break;
 80033e8:	e027      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033f4:	5cd3      	ldrb	r3, [r2, r3]
 80033f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d010      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_GetSysClockFreq+0x94>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0c5b      	lsrs	r3, r3, #17
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_RCC_GetSysClockFreq+0xa0>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <HAL_RCC_GetSysClockFreq+0x98>)
 8003416:	fb03 f202 	mul.w	r2, r3, r2
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e004      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	613b      	str	r3, [r7, #16]
      break;
 8003432:	e002      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetSysClockFreq+0x98>)
 8003436:	613b      	str	r3, [r7, #16]
      break;
 8003438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343a:	693b      	ldr	r3, [r7, #16]
}
 800343c:	4618      	mov	r0, r3
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	007a1200 	.word	0x007a1200
 8003450:	0800ad04 	.word	0x0800ad04
 8003454:	0800ad14 	.word	0x0800ad14
 8003458:	003d0900 	.word	0x003d0900

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b02      	ldr	r3, [pc, #8]	; (800346c <HAL_RCC_GetHCLKFreq+0x10>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	20000000 	.word	0x20000000

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff2 	bl	800345c <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	0800acfc 	.word	0x0800acfc

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffde 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	0adb      	lsrs	r3, r3, #11
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	0800acfc 	.word	0x0800acfc

080034c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <RCC_Delay+0x34>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <RCC_Delay+0x38>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a5b      	lsrs	r3, r3, #9
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034dc:	bf00      	nop
  }
  while (Delay --);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f9      	bne.n	80034dc <RCC_Delay+0x1c>
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	20000000 	.word	0x20000000
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e041      	b.n	8003592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f930 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 fc18 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e03a      	b.n	800362a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <HAL_TIM_Base_Start_IT+0x98>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x58>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d009      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x58>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <HAL_TIM_Base_Start_IT+0x9c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x58>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a13      	ldr	r2, [pc, #76]	; (800363c <HAL_TIM_Base_Start_IT+0xa0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b06      	cmp	r3, #6
 8003604:	d010      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	e007      	b.n	8003628 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800

08003640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f839 	bl	80036de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 fb76 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x24>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e022      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d109      	bne.n	800372e <HAL_TIM_PWM_Start+0x3e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e015      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start+0x58>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e008      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e05e      	b.n	8003820 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0x82>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003770:	e013      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0x92>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003780:	e00b      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	e003      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2201      	movs	r2, #1
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fd70 	bl	8004288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_TIM_PWM_Start+0x138>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_TIM_PWM_Start+0x138>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_TIM_PWM_Start+0xfa>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d009      	beq.n	80037ea <HAL_TIM_PWM_Start+0xfa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a14      	ldr	r2, [pc, #80]	; (800382c <HAL_TIM_PWM_Start+0x13c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIM_PWM_Start+0xfa>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_TIM_PWM_Start+0x140>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d111      	bne.n	800380e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d010      	beq.n	800381e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	e007      	b.n	800381e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800

08003834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d020      	beq.n	8003898 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0202 	mvn.w	r2, #2
 8003868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa5a 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fa4d 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fa5c 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d020      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01b      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0204 	mvn.w	r2, #4
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa34 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fa27 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa36 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d020      	beq.n	8003930 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0208 	mvn.w	r2, #8
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2204      	movs	r2, #4
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa0e 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa01 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa10 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0210 	mvn.w	r2, #16
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2208      	movs	r2, #8
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f9e8 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f9db 	bl	8003d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f9ea 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fc50 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fced 	bl	800439e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9ba 	bl	8003d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0220 	mvn.w	r2, #32
 8003a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fcc0 	bl	800438c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e0ae      	b.n	8003b90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	f200 809f 	bhi.w	8003b80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003b81 	.word	0x08003b81
 8003a50:	08003b81 	.word	0x08003b81
 8003a54:	08003b81 	.word	0x08003b81
 8003a58:	08003abd 	.word	0x08003abd
 8003a5c:	08003b81 	.word	0x08003b81
 8003a60:	08003b81 	.word	0x08003b81
 8003a64:	08003b81 	.word	0x08003b81
 8003a68:	08003aff 	.word	0x08003aff
 8003a6c:	08003b81 	.word	0x08003b81
 8003a70:	08003b81 	.word	0x08003b81
 8003a74:	08003b81 	.word	0x08003b81
 8003a78:	08003b3f 	.word	0x08003b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f9e2 	bl	8003e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0208 	orr.w	r2, r2, #8
 8003a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	619a      	str	r2, [r3, #24]
      break;
 8003aba:	e064      	b.n	8003b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fa28 	bl	8003f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	619a      	str	r2, [r3, #24]
      break;
 8003afc:	e043      	b.n	8003b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fa71 	bl	8003fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0208 	orr.w	r2, r2, #8
 8003b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
      break;
 8003b3c:	e023      	b.n	8003b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fabb 	bl	80040c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75fb      	strb	r3, [r7, #23]
      break;
 8003b84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e0b4      	b.n	8003d1e <HAL_TIM_ConfigClockSource+0x186>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bec:	d03e      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0xd4>
 8003bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf2:	f200 8087 	bhi.w	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	f000 8086 	beq.w	8003d0a <HAL_TIM_ConfigClockSource+0x172>
 8003bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c02:	d87f      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b70      	cmp	r3, #112	; 0x70
 8003c06:	d01a      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xa6>
 8003c08:	2b70      	cmp	r3, #112	; 0x70
 8003c0a:	d87b      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b60      	cmp	r3, #96	; 0x60
 8003c0e:	d050      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003c10:	2b60      	cmp	r3, #96	; 0x60
 8003c12:	d877      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b50      	cmp	r3, #80	; 0x50
 8003c16:	d03c      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0xfa>
 8003c18:	2b50      	cmp	r3, #80	; 0x50
 8003c1a:	d873      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d058      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d86f      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d064      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d86b      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d060      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d867      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d05c      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d05a      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c3c:	e062      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c4e:	f000 fafc 	bl	800424a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	609a      	str	r2, [r3, #8]
      break;
 8003c6a:	e04f      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c7c:	f000 fae5 	bl	800424a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8e:	609a      	str	r2, [r3, #8]
      break;
 8003c90:	e03c      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 fa5c 	bl	800415c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2150      	movs	r1, #80	; 0x50
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fab3 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e02c      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f000 fa7a 	bl	80041b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2160      	movs	r1, #96	; 0x60
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 faa3 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003cd0:	e01c      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f000 fa3c 	bl	800415c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2140      	movs	r1, #64	; 0x40
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fa93 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e00c      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f000 fa8a 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003d02:	e003      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      break;
 8003d08:	e000      	b.n	8003d0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
	...

08003d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a2f      	ldr	r2, [pc, #188]	; (8003e40 <TIM_Base_SetConfig+0xd0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2c      	ldr	r2, [pc, #176]	; (8003e44 <TIM_Base_SetConfig+0xd4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <TIM_Base_SetConfig+0xd8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <TIM_Base_SetConfig+0xd0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <TIM_Base_SetConfig+0xd4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <TIM_Base_SetConfig+0xd8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <TIM_Base_SetConfig+0xd0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f023 0201 	bic.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]
  }
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800

08003e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 0201 	bic.w	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f023 0302 	bic.w	r3, r3, #2
 8003e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <TIM_OC1_SetConfig+0xc8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10c      	bne.n	8003ec2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0308 	bic.w	r3, r3, #8
 8003eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <TIM_OC1_SetConfig+0xc8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40012c00 	.word	0x40012c00

08003f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f023 0210 	bic.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0320 	bic.w	r3, r3, #32
 8003f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <TIM_OC2_SetConfig+0xd0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10d      	bne.n	8003f94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <TIM_OC2_SetConfig+0xd0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d113      	bne.n	8003fc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00

08003fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <TIM_OC3_SetConfig+0xd0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10d      	bne.n	8004066 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <TIM_OC3_SetConfig+0xd0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d113      	bne.n	8004096 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00

080040c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	031b      	lsls	r3, r3, #12
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0f      	ldr	r2, [pc, #60]	; (8004158 <TIM_OC4_SetConfig+0x98>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d109      	bne.n	8004134 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	40012c00 	.word	0x40012c00

0800415c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0201 	bic.w	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 030a 	bic.w	r3, r3, #10
 8004198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0210 	bic.w	r2, r3, #16
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	031b      	lsls	r3, r3, #12
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	f043 0307 	orr.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004264:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	021a      	lsls	r2, r3, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	431a      	orrs	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4313      	orrs	r3, r2
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	609a      	str	r2, [r3, #8]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2201      	movs	r2, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e046      	b.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d009      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a10      	ldr	r2, [pc, #64]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10c      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800

0800438c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e042      	b.n	8004448 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fa68 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fe6d 	bl	80050d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	; 0x30
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b20      	cmp	r3, #32
 8004468:	d156      	bne.n	8004518 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_UART_Transmit_DMA+0x26>
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e04f      	b.n	800451a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2221      	movs	r2, #33	; 0x21
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	4a21      	ldr	r2, [pc, #132]	; (8004524 <HAL_UART_Transmit_DMA+0xd4>)
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	4a20      	ldr	r2, [pc, #128]	; (8004528 <HAL_UART_Transmit_DMA+0xd8>)
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	4a1f      	ldr	r2, [pc, #124]	; (800452c <HAL_UART_Transmit_DMA+0xdc>)
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	2200      	movs	r2, #0
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	6819      	ldr	r1, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	461a      	mov	r2, r3
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	f7fe f837 	bl	8002544 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	617b      	str	r3, [r7, #20]
   return(result);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3314      	adds	r3, #20
 80044fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004500:	627a      	str	r2, [r7, #36]	; 0x24
 8004502:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6a39      	ldr	r1, [r7, #32]
 8004506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	61fb      	str	r3, [r7, #28]
   return(result);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3730      	adds	r7, #48	; 0x30
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	08004b93 	.word	0x08004b93
 8004528:	08004c2d 	.word	0x08004c2d
 800452c:	08004c49 	.word	0x08004c49

08004530 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	; 0x30
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b20      	cmp	r3, #32
 8004548:	d14a      	bne.n	80045e0 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e043      	b.n	80045e2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	461a      	mov	r2, r3
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fbb5 	bl	8004cdc <UART_Start_Receive_IT>
 8004572:	4603      	mov	r3, r0
 8004574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800457c:	2b00      	cmp	r3, #0
 800457e:	d12c      	bne.n	80045da <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	2b01      	cmp	r3, #1
 8004586:	d125      	bne.n	80045d4 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	617b      	str	r3, [r7, #20]
   return(result);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f043 0310 	orr.w	r3, r3, #16
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045be:	627a      	str	r2, [r7, #36]	; 0x24
 80045c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6a39      	ldr	r1, [r7, #32]
 80045c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e5      	bne.n	800459e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80045d2:	e002      	b.n	80045da <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80045da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045de:	e000      	b.n	80045e2 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3730      	adds	r7, #48	; 0x30
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b0ba      	sub	sp, #232	; 0xe8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800462a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10f      	bne.n	8004652 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_UART_IRQHandler+0x66>
 800463e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fc83 	bl	8004f56 <UART_Receive_IT>
      return;
 8004650:	e25b      	b.n	8004b0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80de 	beq.w	8004818 <HAL_UART_IRQHandler+0x22c>
 800465c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d106      	bne.n	8004676 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80d1 	beq.w	8004818 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_UART_IRQHandler+0xae>
 8004682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_UART_IRQHandler+0xd2>
 80046a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xf6>
 80046ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f043 0204 	orr.w	r2, r3, #4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d011      	beq.n	8004712 <HAL_UART_IRQHandler+0x126>
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	f043 0208 	orr.w	r2, r3, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 81f2 	beq.w	8004b00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_UART_IRQHandler+0x14e>
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fc0e 	bl	8004f56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <HAL_UART_IRQHandler+0x17a>
 800475e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d04f      	beq.n	8004806 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fb18 	bl	8004d9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d041      	beq.n	80047fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1d9      	bne.n	800477a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d013      	beq.n	80047f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	4a7e      	ldr	r2, [pc, #504]	; (80049cc <HAL_UART_IRQHandler+0x3e0>)
 80047d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd ff4e 	bl	800267c <HAL_DMA_Abort_IT>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047f0:	4610      	mov	r0, r2
 80047f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	e00e      	b.n	8004814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9a5 	bl	8004b46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	e00a      	b.n	8004814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f9a1 	bl	8004b46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	e006      	b.n	8004814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f99d 	bl	8004b46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004812:	e175      	b.n	8004b00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	bf00      	nop
    return;
 8004816:	e173      	b.n	8004b00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 814f 	bne.w	8004ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8148 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8141 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80b6 	beq.w	80049d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004870:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8145 	beq.w	8004b04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800487e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004882:	429a      	cmp	r2, r3
 8004884:	f080 813e 	bcs.w	8004b04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800488e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b20      	cmp	r3, #32
 8004898:	f000 8088 	beq.w	80049ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1d9      	bne.n	800489c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800490c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004910:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800491e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e1      	bne.n	80048e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3314      	adds	r3, #20
 8004944:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004948:	66fa      	str	r2, [r7, #108]	; 0x6c
 800494a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800494e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e3      	bne.n	8004924 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800497a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497c:	f023 0310 	bic.w	r3, r3, #16
 8004980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800498e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004990:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800499c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e3      	bne.n	800496a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd fe2c 	bl	8002604 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd fb8a 	bl	80020dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049c8:	e09c      	b.n	8004b04 <HAL_UART_IRQHandler+0x518>
 80049ca:	bf00      	nop
 80049cc:	08004e61 	.word	0x08004e61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 808e 	beq.w	8004b08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8089 	beq.w	8004b08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e3      	bne.n	80049f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3314      	adds	r3, #20
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a52:	633a      	str	r2, [r7, #48]	; 0x30
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e3      	bne.n	8004a2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0310 	bic.w	r3, r3, #16
 8004a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	69b9      	ldr	r1, [r7, #24]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e3      	bne.n	8004a74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ab2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7fd fb0f 	bl	80020dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004abe:	e023      	b.n	8004b08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x4f4>
 8004acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f9d5 	bl	8004e88 <UART_Transmit_IT>
    return;
 8004ade:	e014      	b.n	8004b0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <HAL_UART_IRQHandler+0x51e>
 8004aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fa14 	bl	8004f26 <UART_EndTransmit_IT>
    return;
 8004afe:	e004      	b.n	8004b0a <HAL_UART_IRQHandler+0x51e>
    return;
 8004b00:	bf00      	nop
 8004b02:	e002      	b.n	8004b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b04:	bf00      	nop
 8004b06:	e000      	b.n	8004b0a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b08:	bf00      	nop
  }
}
 8004b0a:	37e8      	adds	r7, #232	; 0xe8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	2300      	movs	r3, #0
 8004b66:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	4313      	orrs	r3, r2
 8004b86:	b2db      	uxtb	r3, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b090      	sub	sp, #64	; 0x40
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d137      	bne.n	8004c1e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bd4:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8004c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c08:	61fa      	str	r2, [r7, #28]
 8004c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	617b      	str	r3, [r7, #20]
   return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c1c:	e002      	b.n	8004c24 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004c1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c20:	f7ff ff76 	bl	8004b10 <HAL_UART_TxCpltCallback>
}
 8004c24:	bf00      	nop
 8004c26:	3740      	adds	r7, #64	; 0x40
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff ff71 	bl	8004b22 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b21      	cmp	r3, #33	; 0x21
 8004c7a:	d108      	bne.n	8004c8e <UART_DMAError+0x46>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2200      	movs	r2, #0
 8004c86:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c88:	68b8      	ldr	r0, [r7, #8]
 8004c8a:	f000 f860 	bl	8004d4e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b22      	cmp	r3, #34	; 0x22
 8004cae:	d108      	bne.n	8004cc2 <UART_DMAError+0x7a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004cbc:	68b8      	ldr	r0, [r7, #8]
 8004cbe:	f000 f86d 	bl	8004d9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f043 0210 	orr.w	r2, r3, #16
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cce:	68b8      	ldr	r0, [r7, #8]
 8004cd0:	f7ff ff39 	bl	8004b46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	88fa      	ldrh	r2, [r7, #6]
 8004cfa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2222      	movs	r2, #34	; 0x22
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0220 	orr.w	r2, r2, #32
 8004d40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b089      	sub	sp, #36	; 0x24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	61ba      	str	r2, [r7, #24]
 8004d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6979      	ldr	r1, [r7, #20]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	613b      	str	r3, [r7, #16]
   return(result);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	; 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b095      	sub	sp, #84	; 0x54
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc4:	643a      	str	r2, [r7, #64]	; 0x40
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d119      	bne.n	8004e48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0310 	bic.w	r3, r3, #16
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e34:	61ba      	str	r2, [r7, #24]
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e56:	bf00      	nop
 8004e58:	3754      	adds	r7, #84	; 0x54
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff fe63 	bl	8004b46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b21      	cmp	r3, #33	; 0x21
 8004e9a:	d13e      	bne.n	8004f1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea4:	d114      	bne.n	8004ed0 <UART_Transmit_IT+0x48>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d110      	bne.n	8004ed0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]
 8004ece:	e008      	b.n	8004ee2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6211      	str	r1, [r2, #32]
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e000      	b.n	8004f1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fde2 	bl	8004b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b08c      	sub	sp, #48	; 0x30
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b22      	cmp	r3, #34	; 0x22
 8004f68:	f040 80ae 	bne.w	80050c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	d117      	bne.n	8004fa6 <UART_Receive_IT+0x50>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d113      	bne.n	8004fa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	1c9a      	adds	r2, r3, #2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa4:	e026      	b.n	8004ff4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb8:	d007      	beq.n	8004fca <UART_Receive_IT+0x74>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <UART_Receive_IT+0x82>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e008      	b.n	8004fea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4619      	mov	r1, r3
 8005002:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005004:	2b00      	cmp	r3, #0
 8005006:	d15d      	bne.n	80050c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0220 	bic.w	r2, r2, #32
 8005016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	2b01      	cmp	r3, #1
 800504c:	d135      	bne.n	80050ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 0310 	bic.w	r3, r3, #16
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	623a      	str	r2, [r7, #32]
 8005076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61bb      	str	r3, [r7, #24]
   return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b10      	cmp	r3, #16
 8005094:	d10a      	bne.n	80050ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd f812 	bl	80020dc <HAL_UARTEx_RxEventCallback>
 80050b8:	e002      	b.n	80050c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff fd3a 	bl	8004b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e002      	b.n	80050ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3730      	adds	r7, #48	; 0x30
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800510e:	f023 030c 	bic.w	r3, r3, #12
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	430b      	orrs	r3, r1
 800511a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <UART_SetConfig+0x114>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d103      	bne.n	8005144 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fe f9ac 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	e002      	b.n	800514a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005144:	f7fe f994 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8005148:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009a      	lsls	r2, r3, #2
 8005154:	441a      	add	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <UART_SetConfig+0x118>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	0119      	lsls	r1, r3, #4
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009a      	lsls	r2, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <UART_SetConfig+0x118>)
 8005182:	fba3 0302 	umull	r0, r3, r3, r2
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2064      	movs	r0, #100	; 0x64
 800518a:	fb00 f303 	mul.w	r3, r0, r3
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	3332      	adds	r3, #50	; 0x32
 8005194:	4a15      	ldr	r2, [pc, #84]	; (80051ec <UART_SetConfig+0x118>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a0:	4419      	add	r1, r3
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009a      	lsls	r2, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <UART_SetConfig+0x118>)
 80051ba:	fba3 0302 	umull	r0, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2064      	movs	r0, #100	; 0x64
 80051c2:	fb00 f303 	mul.w	r3, r0, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	3332      	adds	r3, #50	; 0x32
 80051cc:	4a07      	ldr	r2, [pc, #28]	; (80051ec <UART_SetConfig+0x118>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	440a      	add	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40013800 	.word	0x40013800
 80051ec:	51eb851f 	.word	0x51eb851f

080051f0 <atof>:
 80051f0:	2100      	movs	r1, #0
 80051f2:	f000 be1b 	b.w	8005e2c <strtod>

080051f6 <sulp>:
 80051f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fa:	460f      	mov	r7, r1
 80051fc:	4690      	mov	r8, r2
 80051fe:	f003 fcdb 	bl	8008bb8 <__ulp>
 8005202:	4604      	mov	r4, r0
 8005204:	460d      	mov	r5, r1
 8005206:	f1b8 0f00 	cmp.w	r8, #0
 800520a:	d011      	beq.n	8005230 <sulp+0x3a>
 800520c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005210:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005214:	2b00      	cmp	r3, #0
 8005216:	dd0b      	ble.n	8005230 <sulp+0x3a>
 8005218:	2400      	movs	r4, #0
 800521a:	051b      	lsls	r3, r3, #20
 800521c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005220:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005224:	4622      	mov	r2, r4
 8005226:	462b      	mov	r3, r5
 8005228:	f7fb f956 	bl	80004d8 <__aeabi_dmul>
 800522c:	4604      	mov	r4, r0
 800522e:	460d      	mov	r5, r1
 8005230:	4620      	mov	r0, r4
 8005232:	4629      	mov	r1, r5
 8005234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005238 <_strtod_l>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	b09f      	sub	sp, #124	; 0x7c
 800523e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005240:	2200      	movs	r2, #0
 8005242:	4604      	mov	r4, r0
 8005244:	921a      	str	r2, [sp, #104]	; 0x68
 8005246:	460d      	mov	r5, r1
 8005248:	f04f 0800 	mov.w	r8, #0
 800524c:	f04f 0900 	mov.w	r9, #0
 8005250:	460a      	mov	r2, r1
 8005252:	9219      	str	r2, [sp, #100]	; 0x64
 8005254:	7811      	ldrb	r1, [r2, #0]
 8005256:	292b      	cmp	r1, #43	; 0x2b
 8005258:	d04a      	beq.n	80052f0 <_strtod_l+0xb8>
 800525a:	d838      	bhi.n	80052ce <_strtod_l+0x96>
 800525c:	290d      	cmp	r1, #13
 800525e:	d832      	bhi.n	80052c6 <_strtod_l+0x8e>
 8005260:	2908      	cmp	r1, #8
 8005262:	d832      	bhi.n	80052ca <_strtod_l+0x92>
 8005264:	2900      	cmp	r1, #0
 8005266:	d03b      	beq.n	80052e0 <_strtod_l+0xa8>
 8005268:	2200      	movs	r2, #0
 800526a:	920e      	str	r2, [sp, #56]	; 0x38
 800526c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800526e:	7832      	ldrb	r2, [r6, #0]
 8005270:	2a30      	cmp	r2, #48	; 0x30
 8005272:	f040 80b2 	bne.w	80053da <_strtod_l+0x1a2>
 8005276:	7872      	ldrb	r2, [r6, #1]
 8005278:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800527c:	2a58      	cmp	r2, #88	; 0x58
 800527e:	d16e      	bne.n	800535e <_strtod_l+0x126>
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005284:	4620      	mov	r0, r4
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	ab1a      	add	r3, sp, #104	; 0x68
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	4a8c      	ldr	r2, [pc, #560]	; (80054c0 <_strtod_l+0x288>)
 800528e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005290:	a919      	add	r1, sp, #100	; 0x64
 8005292:	f002 fd6d 	bl	8007d70 <__gethex>
 8005296:	f010 070f 	ands.w	r7, r0, #15
 800529a:	4605      	mov	r5, r0
 800529c:	d005      	beq.n	80052aa <_strtod_l+0x72>
 800529e:	2f06      	cmp	r7, #6
 80052a0:	d128      	bne.n	80052f4 <_strtod_l+0xbc>
 80052a2:	2300      	movs	r3, #0
 80052a4:	3601      	adds	r6, #1
 80052a6:	9619      	str	r6, [sp, #100]	; 0x64
 80052a8:	930e      	str	r3, [sp, #56]	; 0x38
 80052aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 85a0 	bne.w	8005df2 <_strtod_l+0xbba>
 80052b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052b4:	b1cb      	cbz	r3, 80052ea <_strtod_l+0xb2>
 80052b6:	4642      	mov	r2, r8
 80052b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	b01f      	add	sp, #124	; 0x7c
 80052c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c6:	2920      	cmp	r1, #32
 80052c8:	d1ce      	bne.n	8005268 <_strtod_l+0x30>
 80052ca:	3201      	adds	r2, #1
 80052cc:	e7c1      	b.n	8005252 <_strtod_l+0x1a>
 80052ce:	292d      	cmp	r1, #45	; 0x2d
 80052d0:	d1ca      	bne.n	8005268 <_strtod_l+0x30>
 80052d2:	2101      	movs	r1, #1
 80052d4:	910e      	str	r1, [sp, #56]	; 0x38
 80052d6:	1c51      	adds	r1, r2, #1
 80052d8:	9119      	str	r1, [sp, #100]	; 0x64
 80052da:	7852      	ldrb	r2, [r2, #1]
 80052dc:	2a00      	cmp	r2, #0
 80052de:	d1c5      	bne.n	800526c <_strtod_l+0x34>
 80052e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052e2:	9519      	str	r5, [sp, #100]	; 0x64
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 8582 	bne.w	8005dee <_strtod_l+0xbb6>
 80052ea:	4642      	mov	r2, r8
 80052ec:	464b      	mov	r3, r9
 80052ee:	e7e5      	b.n	80052bc <_strtod_l+0x84>
 80052f0:	2100      	movs	r1, #0
 80052f2:	e7ef      	b.n	80052d4 <_strtod_l+0x9c>
 80052f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80052f6:	b13a      	cbz	r2, 8005308 <_strtod_l+0xd0>
 80052f8:	2135      	movs	r1, #53	; 0x35
 80052fa:	a81c      	add	r0, sp, #112	; 0x70
 80052fc:	f003 fd48 	bl	8008d90 <__copybits>
 8005300:	4620      	mov	r0, r4
 8005302:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005304:	f003 f92c 	bl	8008560 <_Bfree>
 8005308:	3f01      	subs	r7, #1
 800530a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800530c:	2f04      	cmp	r7, #4
 800530e:	d806      	bhi.n	800531e <_strtod_l+0xe6>
 8005310:	e8df f007 	tbb	[pc, r7]
 8005314:	201d0314 	.word	0x201d0314
 8005318:	14          	.byte	0x14
 8005319:	00          	.byte	0x00
 800531a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800531e:	05e9      	lsls	r1, r5, #23
 8005320:	bf48      	it	mi
 8005322:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800532a:	0d1b      	lsrs	r3, r3, #20
 800532c:	051b      	lsls	r3, r3, #20
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1bb      	bne.n	80052aa <_strtod_l+0x72>
 8005332:	f001 fdab 	bl	8006e8c <__errno>
 8005336:	2322      	movs	r3, #34	; 0x22
 8005338:	6003      	str	r3, [r0, #0]
 800533a:	e7b6      	b.n	80052aa <_strtod_l+0x72>
 800533c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005340:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005344:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005348:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800534c:	e7e7      	b.n	800531e <_strtod_l+0xe6>
 800534e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80054c4 <_strtod_l+0x28c>
 8005352:	e7e4      	b.n	800531e <_strtod_l+0xe6>
 8005354:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005358:	f04f 38ff 	mov.w	r8, #4294967295
 800535c:	e7df      	b.n	800531e <_strtod_l+0xe6>
 800535e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	9219      	str	r2, [sp, #100]	; 0x64
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	2b30      	cmp	r3, #48	; 0x30
 8005368:	d0f9      	beq.n	800535e <_strtod_l+0x126>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d09d      	beq.n	80052aa <_strtod_l+0x72>
 800536e:	2301      	movs	r3, #1
 8005370:	f04f 0a00 	mov.w	sl, #0
 8005374:	220a      	movs	r2, #10
 8005376:	46d3      	mov	fp, sl
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800537c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005380:	930b      	str	r3, [sp, #44]	; 0x2c
 8005382:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005384:	7806      	ldrb	r6, [r0, #0]
 8005386:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800538a:	b2d9      	uxtb	r1, r3
 800538c:	2909      	cmp	r1, #9
 800538e:	d926      	bls.n	80053de <_strtod_l+0x1a6>
 8005390:	2201      	movs	r2, #1
 8005392:	494d      	ldr	r1, [pc, #308]	; (80054c8 <_strtod_l+0x290>)
 8005394:	f001 fd1d 	bl	8006dd2 <strncmp>
 8005398:	2800      	cmp	r0, #0
 800539a:	d030      	beq.n	80053fe <_strtod_l+0x1c6>
 800539c:	2000      	movs	r0, #0
 800539e:	4632      	mov	r2, r6
 80053a0:	4603      	mov	r3, r0
 80053a2:	465e      	mov	r6, fp
 80053a4:	9008      	str	r0, [sp, #32]
 80053a6:	2a65      	cmp	r2, #101	; 0x65
 80053a8:	d001      	beq.n	80053ae <_strtod_l+0x176>
 80053aa:	2a45      	cmp	r2, #69	; 0x45
 80053ac:	d113      	bne.n	80053d6 <_strtod_l+0x19e>
 80053ae:	b91e      	cbnz	r6, 80053b8 <_strtod_l+0x180>
 80053b0:	9a05      	ldr	r2, [sp, #20]
 80053b2:	4302      	orrs	r2, r0
 80053b4:	d094      	beq.n	80052e0 <_strtod_l+0xa8>
 80053b6:	2600      	movs	r6, #0
 80053b8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80053ba:	1c6a      	adds	r2, r5, #1
 80053bc:	9219      	str	r2, [sp, #100]	; 0x64
 80053be:	786a      	ldrb	r2, [r5, #1]
 80053c0:	2a2b      	cmp	r2, #43	; 0x2b
 80053c2:	d074      	beq.n	80054ae <_strtod_l+0x276>
 80053c4:	2a2d      	cmp	r2, #45	; 0x2d
 80053c6:	d078      	beq.n	80054ba <_strtod_l+0x282>
 80053c8:	f04f 0c00 	mov.w	ip, #0
 80053cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80053d0:	2909      	cmp	r1, #9
 80053d2:	d97f      	bls.n	80054d4 <_strtod_l+0x29c>
 80053d4:	9519      	str	r5, [sp, #100]	; 0x64
 80053d6:	2700      	movs	r7, #0
 80053d8:	e09e      	b.n	8005518 <_strtod_l+0x2e0>
 80053da:	2300      	movs	r3, #0
 80053dc:	e7c8      	b.n	8005370 <_strtod_l+0x138>
 80053de:	f1bb 0f08 	cmp.w	fp, #8
 80053e2:	bfd8      	it	le
 80053e4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80053e6:	f100 0001 	add.w	r0, r0, #1
 80053ea:	bfd6      	itet	le
 80053ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80053f0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80053f4:	930a      	strle	r3, [sp, #40]	; 0x28
 80053f6:	f10b 0b01 	add.w	fp, fp, #1
 80053fa:	9019      	str	r0, [sp, #100]	; 0x64
 80053fc:	e7c1      	b.n	8005382 <_strtod_l+0x14a>
 80053fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	9219      	str	r2, [sp, #100]	; 0x64
 8005404:	785a      	ldrb	r2, [r3, #1]
 8005406:	f1bb 0f00 	cmp.w	fp, #0
 800540a:	d037      	beq.n	800547c <_strtod_l+0x244>
 800540c:	465e      	mov	r6, fp
 800540e:	9008      	str	r0, [sp, #32]
 8005410:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d912      	bls.n	800543e <_strtod_l+0x206>
 8005418:	2301      	movs	r3, #1
 800541a:	e7c4      	b.n	80053a6 <_strtod_l+0x16e>
 800541c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800541e:	3001      	adds	r0, #1
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	9219      	str	r2, [sp, #100]	; 0x64
 8005424:	785a      	ldrb	r2, [r3, #1]
 8005426:	2a30      	cmp	r2, #48	; 0x30
 8005428:	d0f8      	beq.n	800541c <_strtod_l+0x1e4>
 800542a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800542e:	2b08      	cmp	r3, #8
 8005430:	f200 84e4 	bhi.w	8005dfc <_strtod_l+0xbc4>
 8005434:	9008      	str	r0, [sp, #32]
 8005436:	2000      	movs	r0, #0
 8005438:	4606      	mov	r6, r0
 800543a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800543c:	930b      	str	r3, [sp, #44]	; 0x2c
 800543e:	3a30      	subs	r2, #48	; 0x30
 8005440:	f100 0301 	add.w	r3, r0, #1
 8005444:	d014      	beq.n	8005470 <_strtod_l+0x238>
 8005446:	9908      	ldr	r1, [sp, #32]
 8005448:	eb00 0c06 	add.w	ip, r0, r6
 800544c:	4419      	add	r1, r3
 800544e:	9108      	str	r1, [sp, #32]
 8005450:	4633      	mov	r3, r6
 8005452:	210a      	movs	r1, #10
 8005454:	4563      	cmp	r3, ip
 8005456:	d113      	bne.n	8005480 <_strtod_l+0x248>
 8005458:	1833      	adds	r3, r6, r0
 800545a:	2b08      	cmp	r3, #8
 800545c:	f106 0601 	add.w	r6, r6, #1
 8005460:	4406      	add	r6, r0
 8005462:	dc1a      	bgt.n	800549a <_strtod_l+0x262>
 8005464:	230a      	movs	r3, #10
 8005466:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005468:	fb03 2301 	mla	r3, r3, r1, r2
 800546c:	930a      	str	r3, [sp, #40]	; 0x28
 800546e:	2300      	movs	r3, #0
 8005470:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005472:	4618      	mov	r0, r3
 8005474:	1c51      	adds	r1, r2, #1
 8005476:	9119      	str	r1, [sp, #100]	; 0x64
 8005478:	7852      	ldrb	r2, [r2, #1]
 800547a:	e7c9      	b.n	8005410 <_strtod_l+0x1d8>
 800547c:	4658      	mov	r0, fp
 800547e:	e7d2      	b.n	8005426 <_strtod_l+0x1ee>
 8005480:	2b08      	cmp	r3, #8
 8005482:	f103 0301 	add.w	r3, r3, #1
 8005486:	dc03      	bgt.n	8005490 <_strtod_l+0x258>
 8005488:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800548a:	434f      	muls	r7, r1
 800548c:	970a      	str	r7, [sp, #40]	; 0x28
 800548e:	e7e1      	b.n	8005454 <_strtod_l+0x21c>
 8005490:	2b10      	cmp	r3, #16
 8005492:	bfd8      	it	le
 8005494:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005498:	e7dc      	b.n	8005454 <_strtod_l+0x21c>
 800549a:	2e10      	cmp	r6, #16
 800549c:	bfdc      	itt	le
 800549e:	230a      	movle	r3, #10
 80054a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80054a4:	e7e3      	b.n	800546e <_strtod_l+0x236>
 80054a6:	2300      	movs	r3, #0
 80054a8:	9308      	str	r3, [sp, #32]
 80054aa:	2301      	movs	r3, #1
 80054ac:	e780      	b.n	80053b0 <_strtod_l+0x178>
 80054ae:	f04f 0c00 	mov.w	ip, #0
 80054b2:	1caa      	adds	r2, r5, #2
 80054b4:	9219      	str	r2, [sp, #100]	; 0x64
 80054b6:	78aa      	ldrb	r2, [r5, #2]
 80054b8:	e788      	b.n	80053cc <_strtod_l+0x194>
 80054ba:	f04f 0c01 	mov.w	ip, #1
 80054be:	e7f8      	b.n	80054b2 <_strtod_l+0x27a>
 80054c0:	0800ad18 	.word	0x0800ad18
 80054c4:	7ff00000 	.word	0x7ff00000
 80054c8:	0800ad16 	.word	0x0800ad16
 80054cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054ce:	1c51      	adds	r1, r2, #1
 80054d0:	9119      	str	r1, [sp, #100]	; 0x64
 80054d2:	7852      	ldrb	r2, [r2, #1]
 80054d4:	2a30      	cmp	r2, #48	; 0x30
 80054d6:	d0f9      	beq.n	80054cc <_strtod_l+0x294>
 80054d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80054dc:	2908      	cmp	r1, #8
 80054de:	f63f af7a 	bhi.w	80053d6 <_strtod_l+0x19e>
 80054e2:	3a30      	subs	r2, #48	; 0x30
 80054e4:	9209      	str	r2, [sp, #36]	; 0x24
 80054e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054e8:	920c      	str	r2, [sp, #48]	; 0x30
 80054ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80054ec:	1c57      	adds	r7, r2, #1
 80054ee:	9719      	str	r7, [sp, #100]	; 0x64
 80054f0:	7852      	ldrb	r2, [r2, #1]
 80054f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80054f6:	f1be 0f09 	cmp.w	lr, #9
 80054fa:	d938      	bls.n	800556e <_strtod_l+0x336>
 80054fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054fe:	1a7f      	subs	r7, r7, r1
 8005500:	2f08      	cmp	r7, #8
 8005502:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005506:	dc03      	bgt.n	8005510 <_strtod_l+0x2d8>
 8005508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800550a:	428f      	cmp	r7, r1
 800550c:	bfa8      	it	ge
 800550e:	460f      	movge	r7, r1
 8005510:	f1bc 0f00 	cmp.w	ip, #0
 8005514:	d000      	beq.n	8005518 <_strtod_l+0x2e0>
 8005516:	427f      	negs	r7, r7
 8005518:	2e00      	cmp	r6, #0
 800551a:	d14f      	bne.n	80055bc <_strtod_l+0x384>
 800551c:	9905      	ldr	r1, [sp, #20]
 800551e:	4301      	orrs	r1, r0
 8005520:	f47f aec3 	bne.w	80052aa <_strtod_l+0x72>
 8005524:	2b00      	cmp	r3, #0
 8005526:	f47f aedb 	bne.w	80052e0 <_strtod_l+0xa8>
 800552a:	2a69      	cmp	r2, #105	; 0x69
 800552c:	d029      	beq.n	8005582 <_strtod_l+0x34a>
 800552e:	dc26      	bgt.n	800557e <_strtod_l+0x346>
 8005530:	2a49      	cmp	r2, #73	; 0x49
 8005532:	d026      	beq.n	8005582 <_strtod_l+0x34a>
 8005534:	2a4e      	cmp	r2, #78	; 0x4e
 8005536:	f47f aed3 	bne.w	80052e0 <_strtod_l+0xa8>
 800553a:	499a      	ldr	r1, [pc, #616]	; (80057a4 <_strtod_l+0x56c>)
 800553c:	a819      	add	r0, sp, #100	; 0x64
 800553e:	f002 fe59 	bl	80081f4 <__match>
 8005542:	2800      	cmp	r0, #0
 8005544:	f43f aecc 	beq.w	80052e0 <_strtod_l+0xa8>
 8005548:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b28      	cmp	r3, #40	; 0x28
 800554e:	d12f      	bne.n	80055b0 <_strtod_l+0x378>
 8005550:	4995      	ldr	r1, [pc, #596]	; (80057a8 <_strtod_l+0x570>)
 8005552:	aa1c      	add	r2, sp, #112	; 0x70
 8005554:	a819      	add	r0, sp, #100	; 0x64
 8005556:	f002 fe61 	bl	800821c <__hexnan>
 800555a:	2805      	cmp	r0, #5
 800555c:	d128      	bne.n	80055b0 <_strtod_l+0x378>
 800555e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005560:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005564:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005568:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800556c:	e69d      	b.n	80052aa <_strtod_l+0x72>
 800556e:	210a      	movs	r1, #10
 8005570:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005572:	fb01 2107 	mla	r1, r1, r7, r2
 8005576:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800557a:	9209      	str	r2, [sp, #36]	; 0x24
 800557c:	e7b5      	b.n	80054ea <_strtod_l+0x2b2>
 800557e:	2a6e      	cmp	r2, #110	; 0x6e
 8005580:	e7d9      	b.n	8005536 <_strtod_l+0x2fe>
 8005582:	498a      	ldr	r1, [pc, #552]	; (80057ac <_strtod_l+0x574>)
 8005584:	a819      	add	r0, sp, #100	; 0x64
 8005586:	f002 fe35 	bl	80081f4 <__match>
 800558a:	2800      	cmp	r0, #0
 800558c:	f43f aea8 	beq.w	80052e0 <_strtod_l+0xa8>
 8005590:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005592:	4987      	ldr	r1, [pc, #540]	; (80057b0 <_strtod_l+0x578>)
 8005594:	3b01      	subs	r3, #1
 8005596:	a819      	add	r0, sp, #100	; 0x64
 8005598:	9319      	str	r3, [sp, #100]	; 0x64
 800559a:	f002 fe2b 	bl	80081f4 <__match>
 800559e:	b910      	cbnz	r0, 80055a6 <_strtod_l+0x36e>
 80055a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055a2:	3301      	adds	r3, #1
 80055a4:	9319      	str	r3, [sp, #100]	; 0x64
 80055a6:	f04f 0800 	mov.w	r8, #0
 80055aa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80057b4 <_strtod_l+0x57c>
 80055ae:	e67c      	b.n	80052aa <_strtod_l+0x72>
 80055b0:	4881      	ldr	r0, [pc, #516]	; (80057b8 <_strtod_l+0x580>)
 80055b2:	f001 fcb5 	bl	8006f20 <nan>
 80055b6:	4680      	mov	r8, r0
 80055b8:	4689      	mov	r9, r1
 80055ba:	e676      	b.n	80052aa <_strtod_l+0x72>
 80055bc:	9b08      	ldr	r3, [sp, #32]
 80055be:	f1bb 0f00 	cmp.w	fp, #0
 80055c2:	bf08      	it	eq
 80055c4:	46b3      	moveq	fp, r6
 80055c6:	1afb      	subs	r3, r7, r3
 80055c8:	2e10      	cmp	r6, #16
 80055ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055cc:	4635      	mov	r5, r6
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	bfa8      	it	ge
 80055d2:	2510      	movge	r5, #16
 80055d4:	f7fa ff06 	bl	80003e4 <__aeabi_ui2d>
 80055d8:	2e09      	cmp	r6, #9
 80055da:	4680      	mov	r8, r0
 80055dc:	4689      	mov	r9, r1
 80055de:	dd13      	ble.n	8005608 <_strtod_l+0x3d0>
 80055e0:	4b76      	ldr	r3, [pc, #472]	; (80057bc <_strtod_l+0x584>)
 80055e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80055e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	4680      	mov	r8, r0
 80055f0:	4650      	mov	r0, sl
 80055f2:	4689      	mov	r9, r1
 80055f4:	f7fa fef6 	bl	80003e4 <__aeabi_ui2d>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4640      	mov	r0, r8
 80055fe:	4649      	mov	r1, r9
 8005600:	f7fa fdb4 	bl	800016c <__adddf3>
 8005604:	4680      	mov	r8, r0
 8005606:	4689      	mov	r9, r1
 8005608:	2e0f      	cmp	r6, #15
 800560a:	dc36      	bgt.n	800567a <_strtod_l+0x442>
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	f43f ae4b 	beq.w	80052aa <_strtod_l+0x72>
 8005614:	dd22      	ble.n	800565c <_strtod_l+0x424>
 8005616:	2b16      	cmp	r3, #22
 8005618:	dc09      	bgt.n	800562e <_strtod_l+0x3f6>
 800561a:	4968      	ldr	r1, [pc, #416]	; (80057bc <_strtod_l+0x584>)
 800561c:	4642      	mov	r2, r8
 800561e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005622:	464b      	mov	r3, r9
 8005624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005628:	f7fa ff56 	bl	80004d8 <__aeabi_dmul>
 800562c:	e7c3      	b.n	80055b6 <_strtod_l+0x37e>
 800562e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005630:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005634:	4293      	cmp	r3, r2
 8005636:	db20      	blt.n	800567a <_strtod_l+0x442>
 8005638:	4c60      	ldr	r4, [pc, #384]	; (80057bc <_strtod_l+0x584>)
 800563a:	f1c6 060f 	rsb	r6, r6, #15
 800563e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005642:	4642      	mov	r2, r8
 8005644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005648:	464b      	mov	r3, r9
 800564a:	f7fa ff45 	bl	80004d8 <__aeabi_dmul>
 800564e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005650:	1b9e      	subs	r6, r3, r6
 8005652:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005656:	e9d4 2300 	ldrd	r2, r3, [r4]
 800565a:	e7e5      	b.n	8005628 <_strtod_l+0x3f0>
 800565c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565e:	3316      	adds	r3, #22
 8005660:	db0b      	blt.n	800567a <_strtod_l+0x442>
 8005662:	9b08      	ldr	r3, [sp, #32]
 8005664:	4640      	mov	r0, r8
 8005666:	1bdf      	subs	r7, r3, r7
 8005668:	4b54      	ldr	r3, [pc, #336]	; (80057bc <_strtod_l+0x584>)
 800566a:	4649      	mov	r1, r9
 800566c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005674:	f7fb f85a 	bl	800072c <__aeabi_ddiv>
 8005678:	e79d      	b.n	80055b6 <_strtod_l+0x37e>
 800567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567c:	1b75      	subs	r5, r6, r5
 800567e:	441d      	add	r5, r3
 8005680:	2d00      	cmp	r5, #0
 8005682:	dd70      	ble.n	8005766 <_strtod_l+0x52e>
 8005684:	f015 030f 	ands.w	r3, r5, #15
 8005688:	d00a      	beq.n	80056a0 <_strtod_l+0x468>
 800568a:	494c      	ldr	r1, [pc, #304]	; (80057bc <_strtod_l+0x584>)
 800568c:	4642      	mov	r2, r8
 800568e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005696:	464b      	mov	r3, r9
 8005698:	f7fa ff1e 	bl	80004d8 <__aeabi_dmul>
 800569c:	4680      	mov	r8, r0
 800569e:	4689      	mov	r9, r1
 80056a0:	f035 050f 	bics.w	r5, r5, #15
 80056a4:	d04d      	beq.n	8005742 <_strtod_l+0x50a>
 80056a6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80056aa:	dd22      	ble.n	80056f2 <_strtod_l+0x4ba>
 80056ac:	2600      	movs	r6, #0
 80056ae:	46b3      	mov	fp, r6
 80056b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80056b2:	9608      	str	r6, [sp, #32]
 80056b4:	2322      	movs	r3, #34	; 0x22
 80056b6:	f04f 0800 	mov.w	r8, #0
 80056ba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80057b4 <_strtod_l+0x57c>
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f43f adf1 	beq.w	80052aa <_strtod_l+0x72>
 80056c8:	4620      	mov	r0, r4
 80056ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056cc:	f002 ff48 	bl	8008560 <_Bfree>
 80056d0:	4620      	mov	r0, r4
 80056d2:	9908      	ldr	r1, [sp, #32]
 80056d4:	f002 ff44 	bl	8008560 <_Bfree>
 80056d8:	4659      	mov	r1, fp
 80056da:	4620      	mov	r0, r4
 80056dc:	f002 ff40 	bl	8008560 <_Bfree>
 80056e0:	4620      	mov	r0, r4
 80056e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056e4:	f002 ff3c 	bl	8008560 <_Bfree>
 80056e8:	4631      	mov	r1, r6
 80056ea:	4620      	mov	r0, r4
 80056ec:	f002 ff38 	bl	8008560 <_Bfree>
 80056f0:	e5db      	b.n	80052aa <_strtod_l+0x72>
 80056f2:	4b33      	ldr	r3, [pc, #204]	; (80057c0 <_strtod_l+0x588>)
 80056f4:	4640      	mov	r0, r8
 80056f6:	9305      	str	r3, [sp, #20]
 80056f8:	2300      	movs	r3, #0
 80056fa:	4649      	mov	r1, r9
 80056fc:	469a      	mov	sl, r3
 80056fe:	112d      	asrs	r5, r5, #4
 8005700:	2d01      	cmp	r5, #1
 8005702:	dc21      	bgt.n	8005748 <_strtod_l+0x510>
 8005704:	b10b      	cbz	r3, 800570a <_strtod_l+0x4d2>
 8005706:	4680      	mov	r8, r0
 8005708:	4689      	mov	r9, r1
 800570a:	492d      	ldr	r1, [pc, #180]	; (80057c0 <_strtod_l+0x588>)
 800570c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005710:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005714:	4642      	mov	r2, r8
 8005716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800571a:	464b      	mov	r3, r9
 800571c:	f7fa fedc 	bl	80004d8 <__aeabi_dmul>
 8005720:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <_strtod_l+0x57c>)
 8005722:	460a      	mov	r2, r1
 8005724:	400b      	ands	r3, r1
 8005726:	4927      	ldr	r1, [pc, #156]	; (80057c4 <_strtod_l+0x58c>)
 8005728:	4680      	mov	r8, r0
 800572a:	428b      	cmp	r3, r1
 800572c:	d8be      	bhi.n	80056ac <_strtod_l+0x474>
 800572e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005732:	428b      	cmp	r3, r1
 8005734:	bf86      	itte	hi
 8005736:	f04f 38ff 	movhi.w	r8, #4294967295
 800573a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80057c8 <_strtod_l+0x590>
 800573e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005742:	2300      	movs	r3, #0
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	e07b      	b.n	8005840 <_strtod_l+0x608>
 8005748:	07ea      	lsls	r2, r5, #31
 800574a:	d505      	bpl.n	8005758 <_strtod_l+0x520>
 800574c:	9b05      	ldr	r3, [sp, #20]
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fec1 	bl	80004d8 <__aeabi_dmul>
 8005756:	2301      	movs	r3, #1
 8005758:	9a05      	ldr	r2, [sp, #20]
 800575a:	f10a 0a01 	add.w	sl, sl, #1
 800575e:	3208      	adds	r2, #8
 8005760:	106d      	asrs	r5, r5, #1
 8005762:	9205      	str	r2, [sp, #20]
 8005764:	e7cc      	b.n	8005700 <_strtod_l+0x4c8>
 8005766:	d0ec      	beq.n	8005742 <_strtod_l+0x50a>
 8005768:	426d      	negs	r5, r5
 800576a:	f015 020f 	ands.w	r2, r5, #15
 800576e:	d00a      	beq.n	8005786 <_strtod_l+0x54e>
 8005770:	4b12      	ldr	r3, [pc, #72]	; (80057bc <_strtod_l+0x584>)
 8005772:	4640      	mov	r0, r8
 8005774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005778:	4649      	mov	r1, r9
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa ffd5 	bl	800072c <__aeabi_ddiv>
 8005782:	4680      	mov	r8, r0
 8005784:	4689      	mov	r9, r1
 8005786:	112d      	asrs	r5, r5, #4
 8005788:	d0db      	beq.n	8005742 <_strtod_l+0x50a>
 800578a:	2d1f      	cmp	r5, #31
 800578c:	dd1e      	ble.n	80057cc <_strtod_l+0x594>
 800578e:	2600      	movs	r6, #0
 8005790:	46b3      	mov	fp, r6
 8005792:	960b      	str	r6, [sp, #44]	; 0x2c
 8005794:	9608      	str	r6, [sp, #32]
 8005796:	2322      	movs	r3, #34	; 0x22
 8005798:	f04f 0800 	mov.w	r8, #0
 800579c:	f04f 0900 	mov.w	r9, #0
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	e78d      	b.n	80056c0 <_strtod_l+0x488>
 80057a4:	0800ad75 	.word	0x0800ad75
 80057a8:	0800ad2c 	.word	0x0800ad2c
 80057ac:	0800ad6d 	.word	0x0800ad6d
 80057b0:	0800adac 	.word	0x0800adac
 80057b4:	7ff00000 	.word	0x7ff00000
 80057b8:	0800b139 	.word	0x0800b139
 80057bc:	0800af18 	.word	0x0800af18
 80057c0:	0800aef0 	.word	0x0800aef0
 80057c4:	7ca00000 	.word	0x7ca00000
 80057c8:	7fefffff 	.word	0x7fefffff
 80057cc:	f015 0310 	ands.w	r3, r5, #16
 80057d0:	bf18      	it	ne
 80057d2:	236a      	movne	r3, #106	; 0x6a
 80057d4:	4640      	mov	r0, r8
 80057d6:	9305      	str	r3, [sp, #20]
 80057d8:	4649      	mov	r1, r9
 80057da:	2300      	movs	r3, #0
 80057dc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8005aa8 <_strtod_l+0x870>
 80057e0:	07ea      	lsls	r2, r5, #31
 80057e2:	d504      	bpl.n	80057ee <_strtod_l+0x5b6>
 80057e4:	e9da 2300 	ldrd	r2, r3, [sl]
 80057e8:	f7fa fe76 	bl	80004d8 <__aeabi_dmul>
 80057ec:	2301      	movs	r3, #1
 80057ee:	106d      	asrs	r5, r5, #1
 80057f0:	f10a 0a08 	add.w	sl, sl, #8
 80057f4:	d1f4      	bne.n	80057e0 <_strtod_l+0x5a8>
 80057f6:	b10b      	cbz	r3, 80057fc <_strtod_l+0x5c4>
 80057f8:	4680      	mov	r8, r0
 80057fa:	4689      	mov	r9, r1
 80057fc:	9b05      	ldr	r3, [sp, #20]
 80057fe:	b1bb      	cbz	r3, 8005830 <_strtod_l+0x5f8>
 8005800:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005804:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005808:	2b00      	cmp	r3, #0
 800580a:	4649      	mov	r1, r9
 800580c:	dd10      	ble.n	8005830 <_strtod_l+0x5f8>
 800580e:	2b1f      	cmp	r3, #31
 8005810:	f340 8128 	ble.w	8005a64 <_strtod_l+0x82c>
 8005814:	2b34      	cmp	r3, #52	; 0x34
 8005816:	bfd8      	it	le
 8005818:	f04f 33ff 	movle.w	r3, #4294967295
 800581c:	f04f 0800 	mov.w	r8, #0
 8005820:	bfcf      	iteee	gt
 8005822:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005826:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800582a:	4093      	lslle	r3, r2
 800582c:	ea03 0901 	andle.w	r9, r3, r1
 8005830:	2200      	movs	r2, #0
 8005832:	2300      	movs	r3, #0
 8005834:	4640      	mov	r0, r8
 8005836:	4649      	mov	r1, r9
 8005838:	f7fb f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800583c:	2800      	cmp	r0, #0
 800583e:	d1a6      	bne.n	800578e <_strtod_l+0x556>
 8005840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005842:	465a      	mov	r2, fp
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	4620      	mov	r0, r4
 8005848:	4633      	mov	r3, r6
 800584a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800584c:	f002 fef0 	bl	8008630 <__s2b>
 8005850:	900b      	str	r0, [sp, #44]	; 0x2c
 8005852:	2800      	cmp	r0, #0
 8005854:	f43f af2a 	beq.w	80056ac <_strtod_l+0x474>
 8005858:	2600      	movs	r6, #0
 800585a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800585c:	9b08      	ldr	r3, [sp, #32]
 800585e:	2a00      	cmp	r2, #0
 8005860:	eba3 0307 	sub.w	r3, r3, r7
 8005864:	bfa8      	it	ge
 8005866:	2300      	movge	r3, #0
 8005868:	46b3      	mov	fp, r6
 800586a:	9312      	str	r3, [sp, #72]	; 0x48
 800586c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005870:	9316      	str	r3, [sp, #88]	; 0x58
 8005872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005874:	4620      	mov	r0, r4
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	f002 fe32 	bl	80084e0 <_Balloc>
 800587c:	9008      	str	r0, [sp, #32]
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f af18 	beq.w	80056b4 <_strtod_l+0x47c>
 8005884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005886:	300c      	adds	r0, #12
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	f103 010c 	add.w	r1, r3, #12
 800588e:	3202      	adds	r2, #2
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	f001 fb36 	bl	8006f02 <memcpy>
 8005896:	ab1c      	add	r3, sp, #112	; 0x70
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	ab1b      	add	r3, sp, #108	; 0x6c
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	4642      	mov	r2, r8
 80058a0:	464b      	mov	r3, r9
 80058a2:	4620      	mov	r0, r4
 80058a4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80058a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80058ac:	f003 f9ec 	bl	8008c88 <__d2b>
 80058b0:	901a      	str	r0, [sp, #104]	; 0x68
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f43f aefe 	beq.w	80056b4 <_strtod_l+0x47c>
 80058b8:	2101      	movs	r1, #1
 80058ba:	4620      	mov	r0, r4
 80058bc:	f002 ff50 	bl	8008760 <__i2b>
 80058c0:	4683      	mov	fp, r0
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f43f aef6 	beq.w	80056b4 <_strtod_l+0x47c>
 80058c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80058ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	bfab      	itete	ge
 80058d0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80058d2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80058d4:	eb07 0a03 	addge.w	sl, r7, r3
 80058d8:	1bdd      	sublt	r5, r3, r7
 80058da:	9b05      	ldr	r3, [sp, #20]
 80058dc:	bfa8      	it	ge
 80058de:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80058e0:	eba7 0703 	sub.w	r7, r7, r3
 80058e4:	4417      	add	r7, r2
 80058e6:	4b71      	ldr	r3, [pc, #452]	; (8005aac <_strtod_l+0x874>)
 80058e8:	f107 37ff 	add.w	r7, r7, #4294967295
 80058ec:	bfb8      	it	lt
 80058ee:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80058f2:	429f      	cmp	r7, r3
 80058f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80058f8:	f280 80c7 	bge.w	8005a8a <_strtod_l+0x852>
 80058fc:	1bdb      	subs	r3, r3, r7
 80058fe:	2b1f      	cmp	r3, #31
 8005900:	f04f 0101 	mov.w	r1, #1
 8005904:	eba2 0203 	sub.w	r2, r2, r3
 8005908:	f300 80b3 	bgt.w	8005a72 <_strtod_l+0x83a>
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	9313      	str	r3, [sp, #76]	; 0x4c
 8005912:	2300      	movs	r3, #0
 8005914:	9310      	str	r3, [sp, #64]	; 0x40
 8005916:	eb0a 0702 	add.w	r7, sl, r2
 800591a:	9b05      	ldr	r3, [sp, #20]
 800591c:	45ba      	cmp	sl, r7
 800591e:	4415      	add	r5, r2
 8005920:	441d      	add	r5, r3
 8005922:	4653      	mov	r3, sl
 8005924:	bfa8      	it	ge
 8005926:	463b      	movge	r3, r7
 8005928:	42ab      	cmp	r3, r5
 800592a:	bfa8      	it	ge
 800592c:	462b      	movge	r3, r5
 800592e:	2b00      	cmp	r3, #0
 8005930:	bfc2      	ittt	gt
 8005932:	1aff      	subgt	r7, r7, r3
 8005934:	1aed      	subgt	r5, r5, r3
 8005936:	ebaa 0a03 	subgt.w	sl, sl, r3
 800593a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800593c:	2b00      	cmp	r3, #0
 800593e:	dd17      	ble.n	8005970 <_strtod_l+0x738>
 8005940:	4659      	mov	r1, fp
 8005942:	461a      	mov	r2, r3
 8005944:	4620      	mov	r0, r4
 8005946:	f002 ffc9 	bl	80088dc <__pow5mult>
 800594a:	4683      	mov	fp, r0
 800594c:	2800      	cmp	r0, #0
 800594e:	f43f aeb1 	beq.w	80056b4 <_strtod_l+0x47c>
 8005952:	4601      	mov	r1, r0
 8005954:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005956:	4620      	mov	r0, r4
 8005958:	f002 ff18 	bl	800878c <__multiply>
 800595c:	900a      	str	r0, [sp, #40]	; 0x28
 800595e:	2800      	cmp	r0, #0
 8005960:	f43f aea8 	beq.w	80056b4 <_strtod_l+0x47c>
 8005964:	4620      	mov	r0, r4
 8005966:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005968:	f002 fdfa 	bl	8008560 <_Bfree>
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	931a      	str	r3, [sp, #104]	; 0x68
 8005970:	2f00      	cmp	r7, #0
 8005972:	f300 808f 	bgt.w	8005a94 <_strtod_l+0x85c>
 8005976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	dd08      	ble.n	800598e <_strtod_l+0x756>
 800597c:	4620      	mov	r0, r4
 800597e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005980:	9908      	ldr	r1, [sp, #32]
 8005982:	f002 ffab 	bl	80088dc <__pow5mult>
 8005986:	9008      	str	r0, [sp, #32]
 8005988:	2800      	cmp	r0, #0
 800598a:	f43f ae93 	beq.w	80056b4 <_strtod_l+0x47c>
 800598e:	2d00      	cmp	r5, #0
 8005990:	dd08      	ble.n	80059a4 <_strtod_l+0x76c>
 8005992:	462a      	mov	r2, r5
 8005994:	4620      	mov	r0, r4
 8005996:	9908      	ldr	r1, [sp, #32]
 8005998:	f002 fffa 	bl	8008990 <__lshift>
 800599c:	9008      	str	r0, [sp, #32]
 800599e:	2800      	cmp	r0, #0
 80059a0:	f43f ae88 	beq.w	80056b4 <_strtod_l+0x47c>
 80059a4:	f1ba 0f00 	cmp.w	sl, #0
 80059a8:	dd08      	ble.n	80059bc <_strtod_l+0x784>
 80059aa:	4659      	mov	r1, fp
 80059ac:	4652      	mov	r2, sl
 80059ae:	4620      	mov	r0, r4
 80059b0:	f002 ffee 	bl	8008990 <__lshift>
 80059b4:	4683      	mov	fp, r0
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f43f ae7c 	beq.w	80056b4 <_strtod_l+0x47c>
 80059bc:	4620      	mov	r0, r4
 80059be:	9a08      	ldr	r2, [sp, #32]
 80059c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059c2:	f003 f86d 	bl	8008aa0 <__mdiff>
 80059c6:	4606      	mov	r6, r0
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f43f ae73 	beq.w	80056b4 <_strtod_l+0x47c>
 80059ce:	2500      	movs	r5, #0
 80059d0:	68c3      	ldr	r3, [r0, #12]
 80059d2:	4659      	mov	r1, fp
 80059d4:	60c5      	str	r5, [r0, #12]
 80059d6:	930a      	str	r3, [sp, #40]	; 0x28
 80059d8:	f003 f846 	bl	8008a68 <__mcmp>
 80059dc:	42a8      	cmp	r0, r5
 80059de:	da6b      	bge.n	8005ab8 <_strtod_l+0x880>
 80059e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e2:	ea53 0308 	orrs.w	r3, r3, r8
 80059e6:	f040 808f 	bne.w	8005b08 <_strtod_l+0x8d0>
 80059ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 808a 	bne.w	8005b08 <_strtod_l+0x8d0>
 80059f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059f8:	0d1b      	lsrs	r3, r3, #20
 80059fa:	051b      	lsls	r3, r3, #20
 80059fc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005a00:	f240 8082 	bls.w	8005b08 <_strtod_l+0x8d0>
 8005a04:	6973      	ldr	r3, [r6, #20]
 8005a06:	b913      	cbnz	r3, 8005a0e <_strtod_l+0x7d6>
 8005a08:	6933      	ldr	r3, [r6, #16]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	dd7c      	ble.n	8005b08 <_strtod_l+0x8d0>
 8005a0e:	4631      	mov	r1, r6
 8005a10:	2201      	movs	r2, #1
 8005a12:	4620      	mov	r0, r4
 8005a14:	f002 ffbc 	bl	8008990 <__lshift>
 8005a18:	4659      	mov	r1, fp
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	f003 f824 	bl	8008a68 <__mcmp>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	dd71      	ble.n	8005b08 <_strtod_l+0x8d0>
 8005a24:	9905      	ldr	r1, [sp, #20]
 8005a26:	464b      	mov	r3, r9
 8005a28:	4a21      	ldr	r2, [pc, #132]	; (8005ab0 <_strtod_l+0x878>)
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	f000 808d 	beq.w	8005b4a <_strtod_l+0x912>
 8005a30:	ea02 0109 	and.w	r1, r2, r9
 8005a34:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005a38:	f300 8087 	bgt.w	8005b4a <_strtod_l+0x912>
 8005a3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005a40:	f77f aea9 	ble.w	8005796 <_strtod_l+0x55e>
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <_strtod_l+0x87c>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f7fa fd44 	bl	80004d8 <__aeabi_dmul>
 8005a50:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <_strtod_l+0x878>)
 8005a52:	4680      	mov	r8, r0
 8005a54:	400b      	ands	r3, r1
 8005a56:	4689      	mov	r9, r1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f ae35 	bne.w	80056c8 <_strtod_l+0x490>
 8005a5e:	2322      	movs	r3, #34	; 0x22
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	e631      	b.n	80056c8 <_strtod_l+0x490>
 8005a64:	f04f 32ff 	mov.w	r2, #4294967295
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	ea03 0808 	and.w	r8, r3, r8
 8005a70:	e6de      	b.n	8005830 <_strtod_l+0x5f8>
 8005a72:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8005a76:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8005a7a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8005a7e:	37e2      	adds	r7, #226	; 0xe2
 8005a80:	fa01 f307 	lsl.w	r3, r1, r7
 8005a84:	9310      	str	r3, [sp, #64]	; 0x40
 8005a86:	9113      	str	r1, [sp, #76]	; 0x4c
 8005a88:	e745      	b.n	8005916 <_strtod_l+0x6de>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9310      	str	r3, [sp, #64]	; 0x40
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a92:	e740      	b.n	8005916 <_strtod_l+0x6de>
 8005a94:	463a      	mov	r2, r7
 8005a96:	4620      	mov	r0, r4
 8005a98:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a9a:	f002 ff79 	bl	8008990 <__lshift>
 8005a9e:	901a      	str	r0, [sp, #104]	; 0x68
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f47f af68 	bne.w	8005976 <_strtod_l+0x73e>
 8005aa6:	e605      	b.n	80056b4 <_strtod_l+0x47c>
 8005aa8:	0800ad40 	.word	0x0800ad40
 8005aac:	fffffc02 	.word	0xfffffc02
 8005ab0:	7ff00000 	.word	0x7ff00000
 8005ab4:	39500000 	.word	0x39500000
 8005ab8:	46ca      	mov	sl, r9
 8005aba:	d165      	bne.n	8005b88 <_strtod_l+0x950>
 8005abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005abe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ac2:	b352      	cbz	r2, 8005b1a <_strtod_l+0x8e2>
 8005ac4:	4a9e      	ldr	r2, [pc, #632]	; (8005d40 <_strtod_l+0xb08>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d12a      	bne.n	8005b20 <_strtod_l+0x8e8>
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	4641      	mov	r1, r8
 8005ace:	b1fb      	cbz	r3, 8005b10 <_strtod_l+0x8d8>
 8005ad0:	4b9c      	ldr	r3, [pc, #624]	; (8005d44 <_strtod_l+0xb0c>)
 8005ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad6:	ea09 0303 	and.w	r3, r9, r3
 8005ada:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ade:	d81a      	bhi.n	8005b16 <_strtod_l+0x8de>
 8005ae0:	0d1b      	lsrs	r3, r3, #20
 8005ae2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d118      	bne.n	8005b20 <_strtod_l+0x8e8>
 8005aee:	4b96      	ldr	r3, [pc, #600]	; (8005d48 <_strtod_l+0xb10>)
 8005af0:	459a      	cmp	sl, r3
 8005af2:	d102      	bne.n	8005afa <_strtod_l+0x8c2>
 8005af4:	3101      	adds	r1, #1
 8005af6:	f43f addd 	beq.w	80056b4 <_strtod_l+0x47c>
 8005afa:	f04f 0800 	mov.w	r8, #0
 8005afe:	4b91      	ldr	r3, [pc, #580]	; (8005d44 <_strtod_l+0xb0c>)
 8005b00:	ea0a 0303 	and.w	r3, sl, r3
 8005b04:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005b08:	9b05      	ldr	r3, [sp, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d19a      	bne.n	8005a44 <_strtod_l+0x80c>
 8005b0e:	e5db      	b.n	80056c8 <_strtod_l+0x490>
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
 8005b14:	e7e9      	b.n	8005aea <_strtod_l+0x8b2>
 8005b16:	4613      	mov	r3, r2
 8005b18:	e7e7      	b.n	8005aea <_strtod_l+0x8b2>
 8005b1a:	ea53 0308 	orrs.w	r3, r3, r8
 8005b1e:	d081      	beq.n	8005a24 <_strtod_l+0x7ec>
 8005b20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b22:	b1e3      	cbz	r3, 8005b5e <_strtod_l+0x926>
 8005b24:	ea13 0f0a 	tst.w	r3, sl
 8005b28:	d0ee      	beq.n	8005b08 <_strtod_l+0x8d0>
 8005b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	4649      	mov	r1, r9
 8005b30:	9a05      	ldr	r2, [sp, #20]
 8005b32:	b1c3      	cbz	r3, 8005b66 <_strtod_l+0x92e>
 8005b34:	f7ff fb5f 	bl	80051f6 <sulp>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b40:	f7fa fb14 	bl	800016c <__adddf3>
 8005b44:	4680      	mov	r8, r0
 8005b46:	4689      	mov	r9, r1
 8005b48:	e7de      	b.n	8005b08 <_strtod_l+0x8d0>
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b50:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005b54:	f04f 38ff 	mov.w	r8, #4294967295
 8005b58:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005b5c:	e7d4      	b.n	8005b08 <_strtod_l+0x8d0>
 8005b5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b60:	ea13 0f08 	tst.w	r3, r8
 8005b64:	e7e0      	b.n	8005b28 <_strtod_l+0x8f0>
 8005b66:	f7ff fb46 	bl	80051f6 <sulp>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b72:	f7fa faf9 	bl	8000168 <__aeabi_dsub>
 8005b76:	2200      	movs	r2, #0
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	4689      	mov	r9, r1
 8005b7e:	f7fa ff13 	bl	80009a8 <__aeabi_dcmpeq>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d0c0      	beq.n	8005b08 <_strtod_l+0x8d0>
 8005b86:	e606      	b.n	8005796 <_strtod_l+0x55e>
 8005b88:	4659      	mov	r1, fp
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f003 f8d2 	bl	8008d34 <__ratio>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b9e:	f7fa ff17 	bl	80009d0 <__aeabi_dcmple>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d06f      	beq.n	8005c86 <_strtod_l+0xa4e>
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d17c      	bne.n	8005ca6 <_strtod_l+0xa6e>
 8005bac:	f1b8 0f00 	cmp.w	r8, #0
 8005bb0:	d159      	bne.n	8005c66 <_strtod_l+0xa2e>
 8005bb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d17b      	bne.n	8005cb2 <_strtod_l+0xa7a>
 8005bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4b62      	ldr	r3, [pc, #392]	; (8005d4c <_strtod_l+0xb14>)
 8005bc2:	f7fa fefb 	bl	80009bc <__aeabi_dcmplt>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d15a      	bne.n	8005c80 <_strtod_l+0xa48>
 8005bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bce:	2200      	movs	r2, #0
 8005bd0:	4b5f      	ldr	r3, [pc, #380]	; (8005d50 <_strtod_l+0xb18>)
 8005bd2:	f7fa fc81 	bl	80004d8 <__aeabi_dmul>
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	460f      	mov	r7, r1
 8005bda:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005bde:	9506      	str	r5, [sp, #24]
 8005be0:	9307      	str	r3, [sp, #28]
 8005be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005be6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005bea:	4b56      	ldr	r3, [pc, #344]	; (8005d44 <_strtod_l+0xb0c>)
 8005bec:	4a55      	ldr	r2, [pc, #340]	; (8005d44 <_strtod_l+0xb0c>)
 8005bee:	ea0a 0303 	and.w	r3, sl, r3
 8005bf2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bf4:	4b57      	ldr	r3, [pc, #348]	; (8005d54 <_strtod_l+0xb1c>)
 8005bf6:	ea0a 0202 	and.w	r2, sl, r2
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	f040 80b0 	bne.w	8005d60 <_strtod_l+0xb28>
 8005c00:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005c04:	4640      	mov	r0, r8
 8005c06:	4649      	mov	r1, r9
 8005c08:	f002 ffd6 	bl	8008bb8 <__ulp>
 8005c0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c10:	f7fa fc62 	bl	80004d8 <__aeabi_dmul>
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	f7fa faa8 	bl	800016c <__adddf3>
 8005c1c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8005d44 <_strtod_l+0xb0c>
 8005c20:	4a4d      	ldr	r2, [pc, #308]	; (8005d58 <_strtod_l+0xb20>)
 8005c22:	ea01 0a0a 	and.w	sl, r1, sl
 8005c26:	4592      	cmp	sl, r2
 8005c28:	4680      	mov	r8, r0
 8005c2a:	d948      	bls.n	8005cbe <_strtod_l+0xa86>
 8005c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c2e:	4b46      	ldr	r3, [pc, #280]	; (8005d48 <_strtod_l+0xb10>)
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d103      	bne.n	8005c3c <_strtod_l+0xa04>
 8005c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c36:	3301      	adds	r3, #1
 8005c38:	f43f ad3c 	beq.w	80056b4 <_strtod_l+0x47c>
 8005c3c:	f04f 38ff 	mov.w	r8, #4294967295
 8005c40:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005d48 <_strtod_l+0xb10>
 8005c44:	4620      	mov	r0, r4
 8005c46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c48:	f002 fc8a 	bl	8008560 <_Bfree>
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	9908      	ldr	r1, [sp, #32]
 8005c50:	f002 fc86 	bl	8008560 <_Bfree>
 8005c54:	4659      	mov	r1, fp
 8005c56:	4620      	mov	r0, r4
 8005c58:	f002 fc82 	bl	8008560 <_Bfree>
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f002 fc7e 	bl	8008560 <_Bfree>
 8005c64:	e605      	b.n	8005872 <_strtod_l+0x63a>
 8005c66:	f1b8 0f01 	cmp.w	r8, #1
 8005c6a:	d103      	bne.n	8005c74 <_strtod_l+0xa3c>
 8005c6c:	f1b9 0f00 	cmp.w	r9, #0
 8005c70:	f43f ad91 	beq.w	8005796 <_strtod_l+0x55e>
 8005c74:	2200      	movs	r2, #0
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <_strtod_l+0xb24>)
 8005c78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005c7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c7e:	e016      	b.n	8005cae <_strtod_l+0xa76>
 8005c80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005c82:	4f33      	ldr	r7, [pc, #204]	; (8005d50 <_strtod_l+0xb18>)
 8005c84:	e7a9      	b.n	8005bda <_strtod_l+0x9a2>
 8005c86:	4b32      	ldr	r3, [pc, #200]	; (8005d50 <_strtod_l+0xb18>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c8e:	f7fa fc23 	bl	80004d8 <__aeabi_dmul>
 8005c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c94:	4605      	mov	r5, r0
 8005c96:	460f      	mov	r7, r1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d09e      	beq.n	8005bda <_strtod_l+0x9a2>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ca4:	e79d      	b.n	8005be2 <_strtod_l+0x9aa>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4b28      	ldr	r3, [pc, #160]	; (8005d4c <_strtod_l+0xb14>)
 8005caa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cae:	4f27      	ldr	r7, [pc, #156]	; (8005d4c <_strtod_l+0xb14>)
 8005cb0:	e797      	b.n	8005be2 <_strtod_l+0x9aa>
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <_strtod_l+0xb24>)
 8005cb6:	4645      	mov	r5, r8
 8005cb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cbc:	e7f7      	b.n	8005cae <_strtod_l+0xa76>
 8005cbe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	46ca      	mov	sl, r9
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1bc      	bne.n	8005c44 <_strtod_l+0xa0c>
 8005cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cd0:	0d1b      	lsrs	r3, r3, #20
 8005cd2:	051b      	lsls	r3, r3, #20
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1b5      	bne.n	8005c44 <_strtod_l+0xa0c>
 8005cd8:	4628      	mov	r0, r5
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fb fa38 	bl	8001150 <__aeabi_d2lz>
 8005ce0:	f7fa fbcc 	bl	800047c <__aeabi_l2d>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4628      	mov	r0, r5
 8005cea:	4639      	mov	r1, r7
 8005cec:	f7fa fa3c 	bl	8000168 <__aeabi_dsub>
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8005cf8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfe:	ea4a 0a08 	orr.w	sl, sl, r8
 8005d02:	ea5a 0a03 	orrs.w	sl, sl, r3
 8005d06:	d06c      	beq.n	8005de2 <_strtod_l+0xbaa>
 8005d08:	a309      	add	r3, pc, #36	; (adr r3, 8005d30 <_strtod_l+0xaf8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fe55 	bl	80009bc <__aeabi_dcmplt>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f47f acd8 	bne.w	80056c8 <_strtod_l+0x490>
 8005d18:	a307      	add	r3, pc, #28	; (adr r3, 8005d38 <_strtod_l+0xb00>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d22:	f7fa fe69 	bl	80009f8 <__aeabi_dcmpgt>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d08c      	beq.n	8005c44 <_strtod_l+0xa0c>
 8005d2a:	e4cd      	b.n	80056c8 <_strtod_l+0x490>
 8005d2c:	f3af 8000 	nop.w
 8005d30:	94a03595 	.word	0x94a03595
 8005d34:	3fdfffff 	.word	0x3fdfffff
 8005d38:	35afe535 	.word	0x35afe535
 8005d3c:	3fe00000 	.word	0x3fe00000
 8005d40:	000fffff 	.word	0x000fffff
 8005d44:	7ff00000 	.word	0x7ff00000
 8005d48:	7fefffff 	.word	0x7fefffff
 8005d4c:	3ff00000 	.word	0x3ff00000
 8005d50:	3fe00000 	.word	0x3fe00000
 8005d54:	7fe00000 	.word	0x7fe00000
 8005d58:	7c9fffff 	.word	0x7c9fffff
 8005d5c:	bff00000 	.word	0xbff00000
 8005d60:	9b05      	ldr	r3, [sp, #20]
 8005d62:	b333      	cbz	r3, 8005db2 <_strtod_l+0xb7a>
 8005d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d6a:	d822      	bhi.n	8005db2 <_strtod_l+0xb7a>
 8005d6c:	a328      	add	r3, pc, #160	; (adr r3, 8005e10 <_strtod_l+0xbd8>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	4628      	mov	r0, r5
 8005d74:	4639      	mov	r1, r7
 8005d76:	f7fa fe2b 	bl	80009d0 <__aeabi_dcmple>
 8005d7a:	b1a0      	cbz	r0, 8005da6 <_strtod_l+0xb6e>
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f7fa fe82 	bl	8000a88 <__aeabi_d2uiz>
 8005d84:	2801      	cmp	r0, #1
 8005d86:	bf38      	it	cc
 8005d88:	2001      	movcc	r0, #1
 8005d8a:	f7fa fb2b 	bl	80003e4 <__aeabi_ui2d>
 8005d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d90:	4605      	mov	r5, r0
 8005d92:	460f      	mov	r7, r1
 8005d94:	bb03      	cbnz	r3, 8005dd8 <_strtod_l+0xba0>
 8005d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d9a:	9014      	str	r0, [sp, #80]	; 0x50
 8005d9c:	9315      	str	r3, [sp, #84]	; 0x54
 8005d9e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005da2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005da8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005daa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	9311      	str	r3, [sp, #68]	; 0x44
 8005db2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005db4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005db6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8005dba:	f002 fefd 	bl	8008bb8 <__ulp>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fb87 	bl	80004d8 <__aeabi_dmul>
 8005dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dce:	f7fa f9cd 	bl	800016c <__adddf3>
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4689      	mov	r9, r1
 8005dd6:	e774      	b.n	8005cc2 <_strtod_l+0xa8a>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005de0:	e7dd      	b.n	8005d9e <_strtod_l+0xb66>
 8005de2:	a30d      	add	r3, pc, #52	; (adr r3, 8005e18 <_strtod_l+0xbe0>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f7fa fde8 	bl	80009bc <__aeabi_dcmplt>
 8005dec:	e79b      	b.n	8005d26 <_strtod_l+0xaee>
 8005dee:	2300      	movs	r3, #0
 8005df0:	930e      	str	r3, [sp, #56]	; 0x38
 8005df2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005df4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	f7ff ba5b 	b.w	80052b2 <_strtod_l+0x7a>
 8005dfc:	2a65      	cmp	r2, #101	; 0x65
 8005dfe:	f43f ab52 	beq.w	80054a6 <_strtod_l+0x26e>
 8005e02:	2a45      	cmp	r2, #69	; 0x45
 8005e04:	f43f ab4f 	beq.w	80054a6 <_strtod_l+0x26e>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f7ff bb87 	b.w	800551c <_strtod_l+0x2e4>
 8005e0e:	bf00      	nop
 8005e10:	ffc00000 	.word	0xffc00000
 8005e14:	41dfffff 	.word	0x41dfffff
 8005e18:	94a03595 	.word	0x94a03595
 8005e1c:	3fcfffff 	.word	0x3fcfffff

08005e20 <_strtod_r>:
 8005e20:	4b01      	ldr	r3, [pc, #4]	; (8005e28 <_strtod_r+0x8>)
 8005e22:	f7ff ba09 	b.w	8005238 <_strtod_l>
 8005e26:	bf00      	nop
 8005e28:	20000018 	.word	0x20000018

08005e2c <strtod>:
 8005e2c:	460a      	mov	r2, r1
 8005e2e:	4601      	mov	r1, r0
 8005e30:	4802      	ldr	r0, [pc, #8]	; (8005e3c <strtod+0x10>)
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <strtod+0x14>)
 8005e34:	6800      	ldr	r0, [r0, #0]
 8005e36:	f7ff b9ff 	b.w	8005238 <_strtod_l>
 8005e3a:	bf00      	nop
 8005e3c:	200001d0 	.word	0x200001d0
 8005e40:	20000018 	.word	0x20000018

08005e44 <__cvt>:
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4a:	461f      	mov	r7, r3
 8005e4c:	bfbb      	ittet	lt
 8005e4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e52:	461f      	movlt	r7, r3
 8005e54:	2300      	movge	r3, #0
 8005e56:	232d      	movlt	r3, #45	; 0x2d
 8005e58:	b088      	sub	sp, #32
 8005e5a:	4614      	mov	r4, r2
 8005e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e60:	7013      	strb	r3, [r2, #0]
 8005e62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e68:	f023 0820 	bic.w	r8, r3, #32
 8005e6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e70:	d005      	beq.n	8005e7e <__cvt+0x3a>
 8005e72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e76:	d100      	bne.n	8005e7a <__cvt+0x36>
 8005e78:	3501      	adds	r5, #1
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e000      	b.n	8005e80 <__cvt+0x3c>
 8005e7e:	2303      	movs	r3, #3
 8005e80:	aa07      	add	r2, sp, #28
 8005e82:	9204      	str	r2, [sp, #16]
 8005e84:	aa06      	add	r2, sp, #24
 8005e86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e8a:	e9cd 3500 	strd	r3, r5, [sp]
 8005e8e:	4622      	mov	r2, r4
 8005e90:	463b      	mov	r3, r7
 8005e92:	f001 f8d9 	bl	8007048 <_dtoa_r>
 8005e96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	d102      	bne.n	8005ea4 <__cvt+0x60>
 8005e9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ea0:	07db      	lsls	r3, r3, #31
 8005ea2:	d522      	bpl.n	8005eea <__cvt+0xa6>
 8005ea4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ea8:	eb06 0905 	add.w	r9, r6, r5
 8005eac:	d110      	bne.n	8005ed0 <__cvt+0x8c>
 8005eae:	7833      	ldrb	r3, [r6, #0]
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d10a      	bne.n	8005eca <__cvt+0x86>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f7fa fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8005ec0:	b918      	cbnz	r0, 8005eca <__cvt+0x86>
 8005ec2:	f1c5 0501 	rsb	r5, r5, #1
 8005ec6:	f8ca 5000 	str.w	r5, [sl]
 8005eca:	f8da 3000 	ldr.w	r3, [sl]
 8005ece:	4499      	add	r9, r3
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	f7fa fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8005edc:	b108      	cbz	r0, 8005ee2 <__cvt+0x9e>
 8005ede:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ee2:	2230      	movs	r2, #48	; 0x30
 8005ee4:	9b07      	ldr	r3, [sp, #28]
 8005ee6:	454b      	cmp	r3, r9
 8005ee8:	d307      	bcc.n	8005efa <__cvt+0xb6>
 8005eea:	4630      	mov	r0, r6
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ef0:	1b9b      	subs	r3, r3, r6
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	b008      	add	sp, #32
 8005ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	9107      	str	r1, [sp, #28]
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e7f0      	b.n	8005ee4 <__cvt+0xa0>

08005f02 <__exponent>:
 8005f02:	4603      	mov	r3, r0
 8005f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f06:	2900      	cmp	r1, #0
 8005f08:	f803 2b02 	strb.w	r2, [r3], #2
 8005f0c:	bfb6      	itet	lt
 8005f0e:	222d      	movlt	r2, #45	; 0x2d
 8005f10:	222b      	movge	r2, #43	; 0x2b
 8005f12:	4249      	neglt	r1, r1
 8005f14:	2909      	cmp	r1, #9
 8005f16:	7042      	strb	r2, [r0, #1]
 8005f18:	dd2a      	ble.n	8005f70 <__exponent+0x6e>
 8005f1a:	f10d 0207 	add.w	r2, sp, #7
 8005f1e:	4617      	mov	r7, r2
 8005f20:	260a      	movs	r6, #10
 8005f22:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f26:	4694      	mov	ip, r2
 8005f28:	fb06 1415 	mls	r4, r6, r5, r1
 8005f2c:	3430      	adds	r4, #48	; 0x30
 8005f2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f32:	460c      	mov	r4, r1
 8005f34:	2c63      	cmp	r4, #99	; 0x63
 8005f36:	4629      	mov	r1, r5
 8005f38:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f3c:	dcf1      	bgt.n	8005f22 <__exponent+0x20>
 8005f3e:	3130      	adds	r1, #48	; 0x30
 8005f40:	f1ac 0402 	sub.w	r4, ip, #2
 8005f44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f48:	4622      	mov	r2, r4
 8005f4a:	1c41      	adds	r1, r0, #1
 8005f4c:	42ba      	cmp	r2, r7
 8005f4e:	d30a      	bcc.n	8005f66 <__exponent+0x64>
 8005f50:	f10d 0209 	add.w	r2, sp, #9
 8005f54:	eba2 020c 	sub.w	r2, r2, ip
 8005f58:	42bc      	cmp	r4, r7
 8005f5a:	bf88      	it	hi
 8005f5c:	2200      	movhi	r2, #0
 8005f5e:	4413      	add	r3, r2
 8005f60:	1a18      	subs	r0, r3, r0
 8005f62:	b003      	add	sp, #12
 8005f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f6e:	e7ed      	b.n	8005f4c <__exponent+0x4a>
 8005f70:	2330      	movs	r3, #48	; 0x30
 8005f72:	3130      	adds	r1, #48	; 0x30
 8005f74:	7083      	strb	r3, [r0, #2]
 8005f76:	70c1      	strb	r1, [r0, #3]
 8005f78:	1d03      	adds	r3, r0, #4
 8005f7a:	e7f1      	b.n	8005f60 <__exponent+0x5e>

08005f7c <_printf_float>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	b091      	sub	sp, #68	; 0x44
 8005f82:	460c      	mov	r4, r1
 8005f84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f88:	4616      	mov	r6, r2
 8005f8a:	461f      	mov	r7, r3
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	f000 ff33 	bl	8006df8 <_localeconv_r>
 8005f92:	6803      	ldr	r3, [r0, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	9309      	str	r3, [sp, #36]	; 0x24
 8005f98:	f7fa f8da 	bl	8000150 <strlen>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	930e      	str	r3, [sp, #56]	; 0x38
 8005fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8005fa6:	3307      	adds	r3, #7
 8005fa8:	f023 0307 	bic.w	r3, r3, #7
 8005fac:	f103 0208 	add.w	r2, r3, #8
 8005fb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005fb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005fb8:	f8c8 2000 	str.w	r2, [r8]
 8005fbc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4643      	mov	r3, r8
 8005fc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fc8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fce:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	4b9c      	ldr	r3, [pc, #624]	; (8006248 <_printf_float+0x2cc>)
 8005fd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fd8:	f7fa fd18 	bl	8000a0c <__aeabi_dcmpun>
 8005fdc:	bb70      	cbnz	r0, 800603c <_printf_float+0xc0>
 8005fde:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	4b98      	ldr	r3, [pc, #608]	; (8006248 <_printf_float+0x2cc>)
 8005fe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fe8:	f7fa fcf2 	bl	80009d0 <__aeabi_dcmple>
 8005fec:	bb30      	cbnz	r0, 800603c <_printf_float+0xc0>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	f7fa fce1 	bl	80009bc <__aeabi_dcmplt>
 8005ffa:	b110      	cbz	r0, 8006002 <_printf_float+0x86>
 8005ffc:	232d      	movs	r3, #45	; 0x2d
 8005ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006002:	4a92      	ldr	r2, [pc, #584]	; (800624c <_printf_float+0x2d0>)
 8006004:	4b92      	ldr	r3, [pc, #584]	; (8006250 <_printf_float+0x2d4>)
 8006006:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800600a:	bf94      	ite	ls
 800600c:	4690      	movls	r8, r2
 800600e:	4698      	movhi	r8, r3
 8006010:	2303      	movs	r3, #3
 8006012:	f04f 0a00 	mov.w	sl, #0
 8006016:	6123      	str	r3, [r4, #16]
 8006018:	f02b 0304 	bic.w	r3, fp, #4
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	4633      	mov	r3, r6
 8006020:	4621      	mov	r1, r4
 8006022:	4628      	mov	r0, r5
 8006024:	9700      	str	r7, [sp, #0]
 8006026:	aa0f      	add	r2, sp, #60	; 0x3c
 8006028:	f000 f9d6 	bl	80063d8 <_printf_common>
 800602c:	3001      	adds	r0, #1
 800602e:	f040 8090 	bne.w	8006152 <_printf_float+0x1d6>
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	b011      	add	sp, #68	; 0x44
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603c:	4652      	mov	r2, sl
 800603e:	4643      	mov	r3, r8
 8006040:	4650      	mov	r0, sl
 8006042:	4641      	mov	r1, r8
 8006044:	f7fa fce2 	bl	8000a0c <__aeabi_dcmpun>
 8006048:	b148      	cbz	r0, 800605e <_printf_float+0xe2>
 800604a:	f1b8 0f00 	cmp.w	r8, #0
 800604e:	bfb8      	it	lt
 8006050:	232d      	movlt	r3, #45	; 0x2d
 8006052:	4a80      	ldr	r2, [pc, #512]	; (8006254 <_printf_float+0x2d8>)
 8006054:	bfb8      	it	lt
 8006056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800605a:	4b7f      	ldr	r3, [pc, #508]	; (8006258 <_printf_float+0x2dc>)
 800605c:	e7d3      	b.n	8006006 <_printf_float+0x8a>
 800605e:	6863      	ldr	r3, [r4, #4]
 8006060:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	d142      	bne.n	80060ee <_printf_float+0x172>
 8006068:	2306      	movs	r3, #6
 800606a:	6063      	str	r3, [r4, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	9206      	str	r2, [sp, #24]
 8006070:	aa0e      	add	r2, sp, #56	; 0x38
 8006072:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006076:	aa0d      	add	r2, sp, #52	; 0x34
 8006078:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800607c:	9203      	str	r2, [sp, #12]
 800607e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006082:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	6863      	ldr	r3, [r4, #4]
 800608a:	4652      	mov	r2, sl
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4628      	mov	r0, r5
 8006090:	4643      	mov	r3, r8
 8006092:	910b      	str	r1, [sp, #44]	; 0x2c
 8006094:	f7ff fed6 	bl	8005e44 <__cvt>
 8006098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800609a:	4680      	mov	r8, r0
 800609c:	2947      	cmp	r1, #71	; 0x47
 800609e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060a0:	d108      	bne.n	80060b4 <_printf_float+0x138>
 80060a2:	1cc8      	adds	r0, r1, #3
 80060a4:	db02      	blt.n	80060ac <_printf_float+0x130>
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	4299      	cmp	r1, r3
 80060aa:	dd40      	ble.n	800612e <_printf_float+0x1b2>
 80060ac:	f1a9 0902 	sub.w	r9, r9, #2
 80060b0:	fa5f f989 	uxtb.w	r9, r9
 80060b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80060b8:	d81f      	bhi.n	80060fa <_printf_float+0x17e>
 80060ba:	464a      	mov	r2, r9
 80060bc:	3901      	subs	r1, #1
 80060be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060c2:	910d      	str	r1, [sp, #52]	; 0x34
 80060c4:	f7ff ff1d 	bl	8005f02 <__exponent>
 80060c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ca:	4682      	mov	sl, r0
 80060cc:	1813      	adds	r3, r2, r0
 80060ce:	2a01      	cmp	r2, #1
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	dc02      	bgt.n	80060da <_printf_float+0x15e>
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	07d2      	lsls	r2, r2, #31
 80060d8:	d501      	bpl.n	80060de <_printf_float+0x162>
 80060da:	3301      	adds	r3, #1
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d09b      	beq.n	800601e <_printf_float+0xa2>
 80060e6:	232d      	movs	r3, #45	; 0x2d
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ec:	e797      	b.n	800601e <_printf_float+0xa2>
 80060ee:	2947      	cmp	r1, #71	; 0x47
 80060f0:	d1bc      	bne.n	800606c <_printf_float+0xf0>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1ba      	bne.n	800606c <_printf_float+0xf0>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7b7      	b.n	800606a <_printf_float+0xee>
 80060fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80060fe:	d118      	bne.n	8006132 <_printf_float+0x1b6>
 8006100:	2900      	cmp	r1, #0
 8006102:	6863      	ldr	r3, [r4, #4]
 8006104:	dd0b      	ble.n	800611e <_printf_float+0x1a2>
 8006106:	6121      	str	r1, [r4, #16]
 8006108:	b913      	cbnz	r3, 8006110 <_printf_float+0x194>
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	07d0      	lsls	r0, r2, #31
 800610e:	d502      	bpl.n	8006116 <_printf_float+0x19a>
 8006110:	3301      	adds	r3, #1
 8006112:	440b      	add	r3, r1
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	f04f 0a00 	mov.w	sl, #0
 800611a:	65a1      	str	r1, [r4, #88]	; 0x58
 800611c:	e7df      	b.n	80060de <_printf_float+0x162>
 800611e:	b913      	cbnz	r3, 8006126 <_printf_float+0x1aa>
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	07d2      	lsls	r2, r2, #31
 8006124:	d501      	bpl.n	800612a <_printf_float+0x1ae>
 8006126:	3302      	adds	r3, #2
 8006128:	e7f4      	b.n	8006114 <_printf_float+0x198>
 800612a:	2301      	movs	r3, #1
 800612c:	e7f2      	b.n	8006114 <_printf_float+0x198>
 800612e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006134:	4299      	cmp	r1, r3
 8006136:	db05      	blt.n	8006144 <_printf_float+0x1c8>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	6121      	str	r1, [r4, #16]
 800613c:	07d8      	lsls	r0, r3, #31
 800613e:	d5ea      	bpl.n	8006116 <_printf_float+0x19a>
 8006140:	1c4b      	adds	r3, r1, #1
 8006142:	e7e7      	b.n	8006114 <_printf_float+0x198>
 8006144:	2900      	cmp	r1, #0
 8006146:	bfcc      	ite	gt
 8006148:	2201      	movgt	r2, #1
 800614a:	f1c1 0202 	rsble	r2, r1, #2
 800614e:	4413      	add	r3, r2
 8006150:	e7e0      	b.n	8006114 <_printf_float+0x198>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	055a      	lsls	r2, r3, #21
 8006156:	d407      	bmi.n	8006168 <_printf_float+0x1ec>
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	4642      	mov	r2, r8
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	d12b      	bne.n	80061be <_printf_float+0x242>
 8006166:	e764      	b.n	8006032 <_printf_float+0xb6>
 8006168:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800616c:	f240 80dd 	bls.w	800632a <_printf_float+0x3ae>
 8006170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	f7fa fc16 	bl	80009a8 <__aeabi_dcmpeq>
 800617c:	2800      	cmp	r0, #0
 800617e:	d033      	beq.n	80061e8 <_printf_float+0x26c>
 8006180:	2301      	movs	r3, #1
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	4a35      	ldr	r2, [pc, #212]	; (800625c <_printf_float+0x2e0>)
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f af51 	beq.w	8006032 <_printf_float+0xb6>
 8006190:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006194:	429a      	cmp	r2, r3
 8006196:	db02      	blt.n	800619e <_printf_float+0x222>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	07d8      	lsls	r0, r3, #31
 800619c:	d50f      	bpl.n	80061be <_printf_float+0x242>
 800619e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f af42 	beq.w	8006032 <_printf_float+0xb6>
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	f104 091a 	add.w	r9, r4, #26
 80061b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061b8:	3b01      	subs	r3, #1
 80061ba:	4543      	cmp	r3, r8
 80061bc:	dc09      	bgt.n	80061d2 <_printf_float+0x256>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	079b      	lsls	r3, r3, #30
 80061c2:	f100 8104 	bmi.w	80063ce <_printf_float+0x452>
 80061c6:	68e0      	ldr	r0, [r4, #12]
 80061c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061ca:	4298      	cmp	r0, r3
 80061cc:	bfb8      	it	lt
 80061ce:	4618      	movlt	r0, r3
 80061d0:	e731      	b.n	8006036 <_printf_float+0xba>
 80061d2:	2301      	movs	r3, #1
 80061d4:	464a      	mov	r2, r9
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f af28 	beq.w	8006032 <_printf_float+0xb6>
 80061e2:	f108 0801 	add.w	r8, r8, #1
 80061e6:	e7e6      	b.n	80061b6 <_printf_float+0x23a>
 80061e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dc38      	bgt.n	8006260 <_printf_float+0x2e4>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <_printf_float+0x2e0>)
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f af1a 	beq.w	8006032 <_printf_float+0xb6>
 80061fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006202:	4313      	orrs	r3, r2
 8006204:	d102      	bne.n	800620c <_printf_float+0x290>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	07d9      	lsls	r1, r3, #31
 800620a:	d5d8      	bpl.n	80061be <_printf_float+0x242>
 800620c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	f43f af0b 	beq.w	8006032 <_printf_float+0xb6>
 800621c:	f04f 0900 	mov.w	r9, #0
 8006220:	f104 0a1a 	add.w	sl, r4, #26
 8006224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006226:	425b      	negs	r3, r3
 8006228:	454b      	cmp	r3, r9
 800622a:	dc01      	bgt.n	8006230 <_printf_float+0x2b4>
 800622c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800622e:	e794      	b.n	800615a <_printf_float+0x1de>
 8006230:	2301      	movs	r3, #1
 8006232:	4652      	mov	r2, sl
 8006234:	4631      	mov	r1, r6
 8006236:	4628      	mov	r0, r5
 8006238:	47b8      	blx	r7
 800623a:	3001      	adds	r0, #1
 800623c:	f43f aef9 	beq.w	8006032 <_printf_float+0xb6>
 8006240:	f109 0901 	add.w	r9, r9, #1
 8006244:	e7ee      	b.n	8006224 <_printf_float+0x2a8>
 8006246:	bf00      	nop
 8006248:	7fefffff 	.word	0x7fefffff
 800624c:	0800ad68 	.word	0x0800ad68
 8006250:	0800ad6c 	.word	0x0800ad6c
 8006254:	0800ad70 	.word	0x0800ad70
 8006258:	0800ad74 	.word	0x0800ad74
 800625c:	0800ad78 	.word	0x0800ad78
 8006260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006264:	429a      	cmp	r2, r3
 8006266:	bfa8      	it	ge
 8006268:	461a      	movge	r2, r3
 800626a:	2a00      	cmp	r2, #0
 800626c:	4691      	mov	r9, r2
 800626e:	dc37      	bgt.n	80062e0 <_printf_float+0x364>
 8006270:	f04f 0b00 	mov.w	fp, #0
 8006274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006278:	f104 021a 	add.w	r2, r4, #26
 800627c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006280:	ebaa 0309 	sub.w	r3, sl, r9
 8006284:	455b      	cmp	r3, fp
 8006286:	dc33      	bgt.n	80062f0 <_printf_float+0x374>
 8006288:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800628c:	429a      	cmp	r2, r3
 800628e:	db3b      	blt.n	8006308 <_printf_float+0x38c>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	07da      	lsls	r2, r3, #31
 8006294:	d438      	bmi.n	8006308 <_printf_float+0x38c>
 8006296:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800629a:	eba2 0903 	sub.w	r9, r2, r3
 800629e:	eba2 020a 	sub.w	r2, r2, sl
 80062a2:	4591      	cmp	r9, r2
 80062a4:	bfa8      	it	ge
 80062a6:	4691      	movge	r9, r2
 80062a8:	f1b9 0f00 	cmp.w	r9, #0
 80062ac:	dc34      	bgt.n	8006318 <_printf_float+0x39c>
 80062ae:	f04f 0800 	mov.w	r8, #0
 80062b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062b6:	f104 0a1a 	add.w	sl, r4, #26
 80062ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	eba3 0309 	sub.w	r3, r3, r9
 80062c4:	4543      	cmp	r3, r8
 80062c6:	f77f af7a 	ble.w	80061be <_printf_float+0x242>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4652      	mov	r2, sl
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f aeac 	beq.w	8006032 <_printf_float+0xb6>
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	e7ec      	b.n	80062ba <_printf_float+0x33e>
 80062e0:	4613      	mov	r3, r2
 80062e2:	4631      	mov	r1, r6
 80062e4:	4642      	mov	r2, r8
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	d1c0      	bne.n	8006270 <_printf_float+0x2f4>
 80062ee:	e6a0      	b.n	8006032 <_printf_float+0xb6>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f ae99 	beq.w	8006032 <_printf_float+0xb6>
 8006300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006302:	f10b 0b01 	add.w	fp, fp, #1
 8006306:	e7b9      	b.n	800627c <_printf_float+0x300>
 8006308:	4631      	mov	r1, r6
 800630a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800630e:	4628      	mov	r0, r5
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	d1bf      	bne.n	8006296 <_printf_float+0x31a>
 8006316:	e68c      	b.n	8006032 <_printf_float+0xb6>
 8006318:	464b      	mov	r3, r9
 800631a:	4631      	mov	r1, r6
 800631c:	4628      	mov	r0, r5
 800631e:	eb08 020a 	add.w	r2, r8, sl
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	d1c2      	bne.n	80062ae <_printf_float+0x332>
 8006328:	e683      	b.n	8006032 <_printf_float+0xb6>
 800632a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800632c:	2a01      	cmp	r2, #1
 800632e:	dc01      	bgt.n	8006334 <_printf_float+0x3b8>
 8006330:	07db      	lsls	r3, r3, #31
 8006332:	d539      	bpl.n	80063a8 <_printf_float+0x42c>
 8006334:	2301      	movs	r3, #1
 8006336:	4642      	mov	r2, r8
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	f43f ae77 	beq.w	8006032 <_printf_float+0xb6>
 8006344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f ae6f 	beq.w	8006032 <_printf_float+0xb6>
 8006354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006358:	2200      	movs	r2, #0
 800635a:	2300      	movs	r3, #0
 800635c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006360:	f7fa fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8006364:	b9d8      	cbnz	r0, 800639e <_printf_float+0x422>
 8006366:	f109 33ff 	add.w	r3, r9, #4294967295
 800636a:	f108 0201 	add.w	r2, r8, #1
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	d10e      	bne.n	8006396 <_printf_float+0x41a>
 8006378:	e65b      	b.n	8006032 <_printf_float+0xb6>
 800637a:	2301      	movs	r3, #1
 800637c:	464a      	mov	r2, r9
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	f43f ae54 	beq.w	8006032 <_printf_float+0xb6>
 800638a:	f108 0801 	add.w	r8, r8, #1
 800638e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006390:	3b01      	subs	r3, #1
 8006392:	4543      	cmp	r3, r8
 8006394:	dcf1      	bgt.n	800637a <_printf_float+0x3fe>
 8006396:	4653      	mov	r3, sl
 8006398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800639c:	e6de      	b.n	800615c <_printf_float+0x1e0>
 800639e:	f04f 0800 	mov.w	r8, #0
 80063a2:	f104 091a 	add.w	r9, r4, #26
 80063a6:	e7f2      	b.n	800638e <_printf_float+0x412>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4642      	mov	r2, r8
 80063ac:	e7df      	b.n	800636e <_printf_float+0x3f2>
 80063ae:	2301      	movs	r3, #1
 80063b0:	464a      	mov	r2, r9
 80063b2:	4631      	mov	r1, r6
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b8      	blx	r7
 80063b8:	3001      	adds	r0, #1
 80063ba:	f43f ae3a 	beq.w	8006032 <_printf_float+0xb6>
 80063be:	f108 0801 	add.w	r8, r8, #1
 80063c2:	68e3      	ldr	r3, [r4, #12]
 80063c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063c6:	1a5b      	subs	r3, r3, r1
 80063c8:	4543      	cmp	r3, r8
 80063ca:	dcf0      	bgt.n	80063ae <_printf_float+0x432>
 80063cc:	e6fb      	b.n	80061c6 <_printf_float+0x24a>
 80063ce:	f04f 0800 	mov.w	r8, #0
 80063d2:	f104 0919 	add.w	r9, r4, #25
 80063d6:	e7f4      	b.n	80063c2 <_printf_float+0x446>

080063d8 <_printf_common>:
 80063d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	4616      	mov	r6, r2
 80063de:	4699      	mov	r9, r3
 80063e0:	688a      	ldr	r2, [r1, #8]
 80063e2:	690b      	ldr	r3, [r1, #16]
 80063e4:	4607      	mov	r7, r0
 80063e6:	4293      	cmp	r3, r2
 80063e8:	bfb8      	it	lt
 80063ea:	4613      	movlt	r3, r2
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063f2:	460c      	mov	r4, r1
 80063f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f8:	b10a      	cbz	r2, 80063fe <_printf_common+0x26>
 80063fa:	3301      	adds	r3, #1
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	0699      	lsls	r1, r3, #26
 8006402:	bf42      	ittt	mi
 8006404:	6833      	ldrmi	r3, [r6, #0]
 8006406:	3302      	addmi	r3, #2
 8006408:	6033      	strmi	r3, [r6, #0]
 800640a:	6825      	ldr	r5, [r4, #0]
 800640c:	f015 0506 	ands.w	r5, r5, #6
 8006410:	d106      	bne.n	8006420 <_printf_common+0x48>
 8006412:	f104 0a19 	add.w	sl, r4, #25
 8006416:	68e3      	ldr	r3, [r4, #12]
 8006418:	6832      	ldr	r2, [r6, #0]
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	42ab      	cmp	r3, r5
 800641e:	dc2b      	bgt.n	8006478 <_printf_common+0xa0>
 8006420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006424:	1e13      	subs	r3, r2, #0
 8006426:	6822      	ldr	r2, [r4, #0]
 8006428:	bf18      	it	ne
 800642a:	2301      	movne	r3, #1
 800642c:	0692      	lsls	r2, r2, #26
 800642e:	d430      	bmi.n	8006492 <_printf_common+0xba>
 8006430:	4649      	mov	r1, r9
 8006432:	4638      	mov	r0, r7
 8006434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006438:	47c0      	blx	r8
 800643a:	3001      	adds	r0, #1
 800643c:	d023      	beq.n	8006486 <_printf_common+0xae>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	f003 0306 	and.w	r3, r3, #6
 8006446:	2b04      	cmp	r3, #4
 8006448:	bf14      	ite	ne
 800644a:	2500      	movne	r5, #0
 800644c:	6833      	ldreq	r3, [r6, #0]
 800644e:	f04f 0600 	mov.w	r6, #0
 8006452:	bf08      	it	eq
 8006454:	68e5      	ldreq	r5, [r4, #12]
 8006456:	f104 041a 	add.w	r4, r4, #26
 800645a:	bf08      	it	eq
 800645c:	1aed      	subeq	r5, r5, r3
 800645e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006462:	bf08      	it	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	4293      	cmp	r3, r2
 800646a:	bfc4      	itt	gt
 800646c:	1a9b      	subgt	r3, r3, r2
 800646e:	18ed      	addgt	r5, r5, r3
 8006470:	42b5      	cmp	r5, r6
 8006472:	d11a      	bne.n	80064aa <_printf_common+0xd2>
 8006474:	2000      	movs	r0, #0
 8006476:	e008      	b.n	800648a <_printf_common+0xb2>
 8006478:	2301      	movs	r3, #1
 800647a:	4652      	mov	r2, sl
 800647c:	4649      	mov	r1, r9
 800647e:	4638      	mov	r0, r7
 8006480:	47c0      	blx	r8
 8006482:	3001      	adds	r0, #1
 8006484:	d103      	bne.n	800648e <_printf_common+0xb6>
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648e:	3501      	adds	r5, #1
 8006490:	e7c1      	b.n	8006416 <_printf_common+0x3e>
 8006492:	2030      	movs	r0, #48	; 0x30
 8006494:	18e1      	adds	r1, r4, r3
 8006496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a0:	4422      	add	r2, r4
 80064a2:	3302      	adds	r3, #2
 80064a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064a8:	e7c2      	b.n	8006430 <_printf_common+0x58>
 80064aa:	2301      	movs	r3, #1
 80064ac:	4622      	mov	r2, r4
 80064ae:	4649      	mov	r1, r9
 80064b0:	4638      	mov	r0, r7
 80064b2:	47c0      	blx	r8
 80064b4:	3001      	adds	r0, #1
 80064b6:	d0e6      	beq.n	8006486 <_printf_common+0xae>
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7d9      	b.n	8006470 <_printf_common+0x98>

080064bc <_printf_i>:
 80064bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c0:	7e0f      	ldrb	r7, [r1, #24]
 80064c2:	4691      	mov	r9, r2
 80064c4:	2f78      	cmp	r7, #120	; 0x78
 80064c6:	4680      	mov	r8, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	469a      	mov	sl, r3
 80064cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064d2:	d807      	bhi.n	80064e4 <_printf_i+0x28>
 80064d4:	2f62      	cmp	r7, #98	; 0x62
 80064d6:	d80a      	bhi.n	80064ee <_printf_i+0x32>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	f000 80d5 	beq.w	8006688 <_printf_i+0x1cc>
 80064de:	2f58      	cmp	r7, #88	; 0x58
 80064e0:	f000 80c1 	beq.w	8006666 <_printf_i+0x1aa>
 80064e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064ec:	e03a      	b.n	8006564 <_printf_i+0xa8>
 80064ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064f2:	2b15      	cmp	r3, #21
 80064f4:	d8f6      	bhi.n	80064e4 <_printf_i+0x28>
 80064f6:	a101      	add	r1, pc, #4	; (adr r1, 80064fc <_printf_i+0x40>)
 80064f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064fc:	08006555 	.word	0x08006555
 8006500:	08006569 	.word	0x08006569
 8006504:	080064e5 	.word	0x080064e5
 8006508:	080064e5 	.word	0x080064e5
 800650c:	080064e5 	.word	0x080064e5
 8006510:	080064e5 	.word	0x080064e5
 8006514:	08006569 	.word	0x08006569
 8006518:	080064e5 	.word	0x080064e5
 800651c:	080064e5 	.word	0x080064e5
 8006520:	080064e5 	.word	0x080064e5
 8006524:	080064e5 	.word	0x080064e5
 8006528:	0800666f 	.word	0x0800666f
 800652c:	08006595 	.word	0x08006595
 8006530:	08006629 	.word	0x08006629
 8006534:	080064e5 	.word	0x080064e5
 8006538:	080064e5 	.word	0x080064e5
 800653c:	08006691 	.word	0x08006691
 8006540:	080064e5 	.word	0x080064e5
 8006544:	08006595 	.word	0x08006595
 8006548:	080064e5 	.word	0x080064e5
 800654c:	080064e5 	.word	0x080064e5
 8006550:	08006631 	.word	0x08006631
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	1d1a      	adds	r2, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	602a      	str	r2, [r5, #0]
 800655c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006564:	2301      	movs	r3, #1
 8006566:	e0a0      	b.n	80066aa <_printf_i+0x1ee>
 8006568:	6820      	ldr	r0, [r4, #0]
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	0607      	lsls	r7, r0, #24
 800656e:	f103 0104 	add.w	r1, r3, #4
 8006572:	6029      	str	r1, [r5, #0]
 8006574:	d501      	bpl.n	800657a <_printf_i+0xbe>
 8006576:	681e      	ldr	r6, [r3, #0]
 8006578:	e003      	b.n	8006582 <_printf_i+0xc6>
 800657a:	0646      	lsls	r6, r0, #25
 800657c:	d5fb      	bpl.n	8006576 <_printf_i+0xba>
 800657e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006582:	2e00      	cmp	r6, #0
 8006584:	da03      	bge.n	800658e <_printf_i+0xd2>
 8006586:	232d      	movs	r3, #45	; 0x2d
 8006588:	4276      	negs	r6, r6
 800658a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658e:	230a      	movs	r3, #10
 8006590:	4859      	ldr	r0, [pc, #356]	; (80066f8 <_printf_i+0x23c>)
 8006592:	e012      	b.n	80065ba <_printf_i+0xfe>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	6820      	ldr	r0, [r4, #0]
 8006598:	1d19      	adds	r1, r3, #4
 800659a:	6029      	str	r1, [r5, #0]
 800659c:	0605      	lsls	r5, r0, #24
 800659e:	d501      	bpl.n	80065a4 <_printf_i+0xe8>
 80065a0:	681e      	ldr	r6, [r3, #0]
 80065a2:	e002      	b.n	80065aa <_printf_i+0xee>
 80065a4:	0641      	lsls	r1, r0, #25
 80065a6:	d5fb      	bpl.n	80065a0 <_printf_i+0xe4>
 80065a8:	881e      	ldrh	r6, [r3, #0]
 80065aa:	2f6f      	cmp	r7, #111	; 0x6f
 80065ac:	bf0c      	ite	eq
 80065ae:	2308      	moveq	r3, #8
 80065b0:	230a      	movne	r3, #10
 80065b2:	4851      	ldr	r0, [pc, #324]	; (80066f8 <_printf_i+0x23c>)
 80065b4:	2100      	movs	r1, #0
 80065b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ba:	6865      	ldr	r5, [r4, #4]
 80065bc:	2d00      	cmp	r5, #0
 80065be:	bfa8      	it	ge
 80065c0:	6821      	ldrge	r1, [r4, #0]
 80065c2:	60a5      	str	r5, [r4, #8]
 80065c4:	bfa4      	itt	ge
 80065c6:	f021 0104 	bicge.w	r1, r1, #4
 80065ca:	6021      	strge	r1, [r4, #0]
 80065cc:	b90e      	cbnz	r6, 80065d2 <_printf_i+0x116>
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	d04b      	beq.n	800666a <_printf_i+0x1ae>
 80065d2:	4615      	mov	r5, r2
 80065d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80065d8:	fb03 6711 	mls	r7, r3, r1, r6
 80065dc:	5dc7      	ldrb	r7, [r0, r7]
 80065de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065e2:	4637      	mov	r7, r6
 80065e4:	42bb      	cmp	r3, r7
 80065e6:	460e      	mov	r6, r1
 80065e8:	d9f4      	bls.n	80065d4 <_printf_i+0x118>
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d10b      	bne.n	8006606 <_printf_i+0x14a>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	07de      	lsls	r6, r3, #31
 80065f2:	d508      	bpl.n	8006606 <_printf_i+0x14a>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	6861      	ldr	r1, [r4, #4]
 80065f8:	4299      	cmp	r1, r3
 80065fa:	bfde      	ittt	le
 80065fc:	2330      	movle	r3, #48	; 0x30
 80065fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006602:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006606:	1b52      	subs	r2, r2, r5
 8006608:	6122      	str	r2, [r4, #16]
 800660a:	464b      	mov	r3, r9
 800660c:	4621      	mov	r1, r4
 800660e:	4640      	mov	r0, r8
 8006610:	f8cd a000 	str.w	sl, [sp]
 8006614:	aa03      	add	r2, sp, #12
 8006616:	f7ff fedf 	bl	80063d8 <_printf_common>
 800661a:	3001      	adds	r0, #1
 800661c:	d14a      	bne.n	80066b4 <_printf_i+0x1f8>
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	b004      	add	sp, #16
 8006624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	f043 0320 	orr.w	r3, r3, #32
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	2778      	movs	r7, #120	; 0x78
 8006632:	4832      	ldr	r0, [pc, #200]	; (80066fc <_printf_i+0x240>)
 8006634:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	6829      	ldr	r1, [r5, #0]
 800663c:	061f      	lsls	r7, r3, #24
 800663e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006642:	d402      	bmi.n	800664a <_printf_i+0x18e>
 8006644:	065f      	lsls	r7, r3, #25
 8006646:	bf48      	it	mi
 8006648:	b2b6      	uxthmi	r6, r6
 800664a:	07df      	lsls	r7, r3, #31
 800664c:	bf48      	it	mi
 800664e:	f043 0320 	orrmi.w	r3, r3, #32
 8006652:	6029      	str	r1, [r5, #0]
 8006654:	bf48      	it	mi
 8006656:	6023      	strmi	r3, [r4, #0]
 8006658:	b91e      	cbnz	r6, 8006662 <_printf_i+0x1a6>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f023 0320 	bic.w	r3, r3, #32
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	2310      	movs	r3, #16
 8006664:	e7a6      	b.n	80065b4 <_printf_i+0xf8>
 8006666:	4824      	ldr	r0, [pc, #144]	; (80066f8 <_printf_i+0x23c>)
 8006668:	e7e4      	b.n	8006634 <_printf_i+0x178>
 800666a:	4615      	mov	r5, r2
 800666c:	e7bd      	b.n	80065ea <_printf_i+0x12e>
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	6826      	ldr	r6, [r4, #0]
 8006672:	1d18      	adds	r0, r3, #4
 8006674:	6961      	ldr	r1, [r4, #20]
 8006676:	6028      	str	r0, [r5, #0]
 8006678:	0635      	lsls	r5, r6, #24
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	d501      	bpl.n	8006682 <_printf_i+0x1c6>
 800667e:	6019      	str	r1, [r3, #0]
 8006680:	e002      	b.n	8006688 <_printf_i+0x1cc>
 8006682:	0670      	lsls	r0, r6, #25
 8006684:	d5fb      	bpl.n	800667e <_printf_i+0x1c2>
 8006686:	8019      	strh	r1, [r3, #0]
 8006688:	2300      	movs	r3, #0
 800668a:	4615      	mov	r5, r2
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	e7bc      	b.n	800660a <_printf_i+0x14e>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	2100      	movs	r1, #0
 8006694:	1d1a      	adds	r2, r3, #4
 8006696:	602a      	str	r2, [r5, #0]
 8006698:	681d      	ldr	r5, [r3, #0]
 800669a:	6862      	ldr	r2, [r4, #4]
 800669c:	4628      	mov	r0, r5
 800669e:	f000 fc22 	bl	8006ee6 <memchr>
 80066a2:	b108      	cbz	r0, 80066a8 <_printf_i+0x1ec>
 80066a4:	1b40      	subs	r0, r0, r5
 80066a6:	6060      	str	r0, [r4, #4]
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	2300      	movs	r3, #0
 80066ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b2:	e7aa      	b.n	800660a <_printf_i+0x14e>
 80066b4:	462a      	mov	r2, r5
 80066b6:	4649      	mov	r1, r9
 80066b8:	4640      	mov	r0, r8
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	47d0      	blx	sl
 80066be:	3001      	adds	r0, #1
 80066c0:	d0ad      	beq.n	800661e <_printf_i+0x162>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	079b      	lsls	r3, r3, #30
 80066c6:	d413      	bmi.n	80066f0 <_printf_i+0x234>
 80066c8:	68e0      	ldr	r0, [r4, #12]
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	4298      	cmp	r0, r3
 80066ce:	bfb8      	it	lt
 80066d0:	4618      	movlt	r0, r3
 80066d2:	e7a6      	b.n	8006622 <_printf_i+0x166>
 80066d4:	2301      	movs	r3, #1
 80066d6:	4632      	mov	r2, r6
 80066d8:	4649      	mov	r1, r9
 80066da:	4640      	mov	r0, r8
 80066dc:	47d0      	blx	sl
 80066de:	3001      	adds	r0, #1
 80066e0:	d09d      	beq.n	800661e <_printf_i+0x162>
 80066e2:	3501      	adds	r5, #1
 80066e4:	68e3      	ldr	r3, [r4, #12]
 80066e6:	9903      	ldr	r1, [sp, #12]
 80066e8:	1a5b      	subs	r3, r3, r1
 80066ea:	42ab      	cmp	r3, r5
 80066ec:	dcf2      	bgt.n	80066d4 <_printf_i+0x218>
 80066ee:	e7eb      	b.n	80066c8 <_printf_i+0x20c>
 80066f0:	2500      	movs	r5, #0
 80066f2:	f104 0619 	add.w	r6, r4, #25
 80066f6:	e7f5      	b.n	80066e4 <_printf_i+0x228>
 80066f8:	0800ad7a 	.word	0x0800ad7a
 80066fc:	0800ad8b 	.word	0x0800ad8b

08006700 <_scanf_float>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	b087      	sub	sp, #28
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	688b      	ldr	r3, [r1, #8]
 800670a:	4617      	mov	r7, r2
 800670c:	1e5a      	subs	r2, r3, #1
 800670e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006712:	bf85      	ittet	hi
 8006714:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006718:	195b      	addhi	r3, r3, r5
 800671a:	2300      	movls	r3, #0
 800671c:	9302      	strhi	r3, [sp, #8]
 800671e:	bf88      	it	hi
 8006720:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006724:	468b      	mov	fp, r1
 8006726:	f04f 0500 	mov.w	r5, #0
 800672a:	bf8c      	ite	hi
 800672c:	608b      	strhi	r3, [r1, #8]
 800672e:	9302      	strls	r3, [sp, #8]
 8006730:	680b      	ldr	r3, [r1, #0]
 8006732:	4680      	mov	r8, r0
 8006734:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006738:	f84b 3b1c 	str.w	r3, [fp], #28
 800673c:	460c      	mov	r4, r1
 800673e:	465e      	mov	r6, fp
 8006740:	46aa      	mov	sl, r5
 8006742:	46a9      	mov	r9, r5
 8006744:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006748:	9501      	str	r5, [sp, #4]
 800674a:	68a2      	ldr	r2, [r4, #8]
 800674c:	b152      	cbz	r2, 8006764 <_scanf_float+0x64>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b4e      	cmp	r3, #78	; 0x4e
 8006754:	d864      	bhi.n	8006820 <_scanf_float+0x120>
 8006756:	2b40      	cmp	r3, #64	; 0x40
 8006758:	d83c      	bhi.n	80067d4 <_scanf_float+0xd4>
 800675a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800675e:	b2c8      	uxtb	r0, r1
 8006760:	280e      	cmp	r0, #14
 8006762:	d93a      	bls.n	80067da <_scanf_float+0xda>
 8006764:	f1b9 0f00 	cmp.w	r9, #0
 8006768:	d003      	beq.n	8006772 <_scanf_float+0x72>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006776:	f1ba 0f01 	cmp.w	sl, #1
 800677a:	f200 8113 	bhi.w	80069a4 <_scanf_float+0x2a4>
 800677e:	455e      	cmp	r6, fp
 8006780:	f200 8105 	bhi.w	800698e <_scanf_float+0x28e>
 8006784:	2501      	movs	r5, #1
 8006786:	4628      	mov	r0, r5
 8006788:	b007      	add	sp, #28
 800678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006792:	2a0d      	cmp	r2, #13
 8006794:	d8e6      	bhi.n	8006764 <_scanf_float+0x64>
 8006796:	a101      	add	r1, pc, #4	; (adr r1, 800679c <_scanf_float+0x9c>)
 8006798:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800679c:	080068db 	.word	0x080068db
 80067a0:	08006765 	.word	0x08006765
 80067a4:	08006765 	.word	0x08006765
 80067a8:	08006765 	.word	0x08006765
 80067ac:	0800693b 	.word	0x0800693b
 80067b0:	08006913 	.word	0x08006913
 80067b4:	08006765 	.word	0x08006765
 80067b8:	08006765 	.word	0x08006765
 80067bc:	080068e9 	.word	0x080068e9
 80067c0:	08006765 	.word	0x08006765
 80067c4:	08006765 	.word	0x08006765
 80067c8:	08006765 	.word	0x08006765
 80067cc:	08006765 	.word	0x08006765
 80067d0:	080068a1 	.word	0x080068a1
 80067d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80067d8:	e7db      	b.n	8006792 <_scanf_float+0x92>
 80067da:	290e      	cmp	r1, #14
 80067dc:	d8c2      	bhi.n	8006764 <_scanf_float+0x64>
 80067de:	a001      	add	r0, pc, #4	; (adr r0, 80067e4 <_scanf_float+0xe4>)
 80067e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067e4:	08006893 	.word	0x08006893
 80067e8:	08006765 	.word	0x08006765
 80067ec:	08006893 	.word	0x08006893
 80067f0:	08006927 	.word	0x08006927
 80067f4:	08006765 	.word	0x08006765
 80067f8:	08006841 	.word	0x08006841
 80067fc:	0800687d 	.word	0x0800687d
 8006800:	0800687d 	.word	0x0800687d
 8006804:	0800687d 	.word	0x0800687d
 8006808:	0800687d 	.word	0x0800687d
 800680c:	0800687d 	.word	0x0800687d
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800687d 	.word	0x0800687d
 8006818:	0800687d 	.word	0x0800687d
 800681c:	0800687d 	.word	0x0800687d
 8006820:	2b6e      	cmp	r3, #110	; 0x6e
 8006822:	d809      	bhi.n	8006838 <_scanf_float+0x138>
 8006824:	2b60      	cmp	r3, #96	; 0x60
 8006826:	d8b2      	bhi.n	800678e <_scanf_float+0x8e>
 8006828:	2b54      	cmp	r3, #84	; 0x54
 800682a:	d077      	beq.n	800691c <_scanf_float+0x21c>
 800682c:	2b59      	cmp	r3, #89	; 0x59
 800682e:	d199      	bne.n	8006764 <_scanf_float+0x64>
 8006830:	2d07      	cmp	r5, #7
 8006832:	d197      	bne.n	8006764 <_scanf_float+0x64>
 8006834:	2508      	movs	r5, #8
 8006836:	e029      	b.n	800688c <_scanf_float+0x18c>
 8006838:	2b74      	cmp	r3, #116	; 0x74
 800683a:	d06f      	beq.n	800691c <_scanf_float+0x21c>
 800683c:	2b79      	cmp	r3, #121	; 0x79
 800683e:	e7f6      	b.n	800682e <_scanf_float+0x12e>
 8006840:	6821      	ldr	r1, [r4, #0]
 8006842:	05c8      	lsls	r0, r1, #23
 8006844:	d51a      	bpl.n	800687c <_scanf_float+0x17c>
 8006846:	9b02      	ldr	r3, [sp, #8]
 8006848:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800684c:	6021      	str	r1, [r4, #0]
 800684e:	f109 0901 	add.w	r9, r9, #1
 8006852:	b11b      	cbz	r3, 800685c <_scanf_float+0x15c>
 8006854:	3b01      	subs	r3, #1
 8006856:	3201      	adds	r2, #1
 8006858:	9302      	str	r3, [sp, #8]
 800685a:	60a2      	str	r2, [r4, #8]
 800685c:	68a3      	ldr	r3, [r4, #8]
 800685e:	3b01      	subs	r3, #1
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	3301      	adds	r3, #1
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3b01      	subs	r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	607b      	str	r3, [r7, #4]
 8006870:	f340 8084 	ble.w	800697c <_scanf_float+0x27c>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	e766      	b.n	800674a <_scanf_float+0x4a>
 800687c:	eb1a 0f05 	cmn.w	sl, r5
 8006880:	f47f af70 	bne.w	8006764 <_scanf_float+0x64>
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800688a:	6022      	str	r2, [r4, #0]
 800688c:	f806 3b01 	strb.w	r3, [r6], #1
 8006890:	e7e4      	b.n	800685c <_scanf_float+0x15c>
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	0610      	lsls	r0, r2, #24
 8006896:	f57f af65 	bpl.w	8006764 <_scanf_float+0x64>
 800689a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800689e:	e7f4      	b.n	800688a <_scanf_float+0x18a>
 80068a0:	f1ba 0f00 	cmp.w	sl, #0
 80068a4:	d10e      	bne.n	80068c4 <_scanf_float+0x1c4>
 80068a6:	f1b9 0f00 	cmp.w	r9, #0
 80068aa:	d10e      	bne.n	80068ca <_scanf_float+0x1ca>
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068b6:	d108      	bne.n	80068ca <_scanf_float+0x1ca>
 80068b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068bc:	f04f 0a01 	mov.w	sl, #1
 80068c0:	6022      	str	r2, [r4, #0]
 80068c2:	e7e3      	b.n	800688c <_scanf_float+0x18c>
 80068c4:	f1ba 0f02 	cmp.w	sl, #2
 80068c8:	d055      	beq.n	8006976 <_scanf_float+0x276>
 80068ca:	2d01      	cmp	r5, #1
 80068cc:	d002      	beq.n	80068d4 <_scanf_float+0x1d4>
 80068ce:	2d04      	cmp	r5, #4
 80068d0:	f47f af48 	bne.w	8006764 <_scanf_float+0x64>
 80068d4:	3501      	adds	r5, #1
 80068d6:	b2ed      	uxtb	r5, r5
 80068d8:	e7d8      	b.n	800688c <_scanf_float+0x18c>
 80068da:	f1ba 0f01 	cmp.w	sl, #1
 80068de:	f47f af41 	bne.w	8006764 <_scanf_float+0x64>
 80068e2:	f04f 0a02 	mov.w	sl, #2
 80068e6:	e7d1      	b.n	800688c <_scanf_float+0x18c>
 80068e8:	b97d      	cbnz	r5, 800690a <_scanf_float+0x20a>
 80068ea:	f1b9 0f00 	cmp.w	r9, #0
 80068ee:	f47f af3c 	bne.w	800676a <_scanf_float+0x6a>
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068fc:	f47f af39 	bne.w	8006772 <_scanf_float+0x72>
 8006900:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006904:	2501      	movs	r5, #1
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	e7c0      	b.n	800688c <_scanf_float+0x18c>
 800690a:	2d03      	cmp	r5, #3
 800690c:	d0e2      	beq.n	80068d4 <_scanf_float+0x1d4>
 800690e:	2d05      	cmp	r5, #5
 8006910:	e7de      	b.n	80068d0 <_scanf_float+0x1d0>
 8006912:	2d02      	cmp	r5, #2
 8006914:	f47f af26 	bne.w	8006764 <_scanf_float+0x64>
 8006918:	2503      	movs	r5, #3
 800691a:	e7b7      	b.n	800688c <_scanf_float+0x18c>
 800691c:	2d06      	cmp	r5, #6
 800691e:	f47f af21 	bne.w	8006764 <_scanf_float+0x64>
 8006922:	2507      	movs	r5, #7
 8006924:	e7b2      	b.n	800688c <_scanf_float+0x18c>
 8006926:	6822      	ldr	r2, [r4, #0]
 8006928:	0591      	lsls	r1, r2, #22
 800692a:	f57f af1b 	bpl.w	8006764 <_scanf_float+0x64>
 800692e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	f8cd 9004 	str.w	r9, [sp, #4]
 8006938:	e7a8      	b.n	800688c <_scanf_float+0x18c>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006940:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006944:	d006      	beq.n	8006954 <_scanf_float+0x254>
 8006946:	0550      	lsls	r0, r2, #21
 8006948:	f57f af0c 	bpl.w	8006764 <_scanf_float+0x64>
 800694c:	f1b9 0f00 	cmp.w	r9, #0
 8006950:	f43f af0f 	beq.w	8006772 <_scanf_float+0x72>
 8006954:	0591      	lsls	r1, r2, #22
 8006956:	bf58      	it	pl
 8006958:	9901      	ldrpl	r1, [sp, #4]
 800695a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800695e:	bf58      	it	pl
 8006960:	eba9 0101 	subpl.w	r1, r9, r1
 8006964:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006968:	f04f 0900 	mov.w	r9, #0
 800696c:	bf58      	it	pl
 800696e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	e78a      	b.n	800688c <_scanf_float+0x18c>
 8006976:	f04f 0a03 	mov.w	sl, #3
 800697a:	e787      	b.n	800688c <_scanf_float+0x18c>
 800697c:	4639      	mov	r1, r7
 800697e:	4640      	mov	r0, r8
 8006980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006984:	4798      	blx	r3
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f aedf 	beq.w	800674a <_scanf_float+0x4a>
 800698c:	e6ea      	b.n	8006764 <_scanf_float+0x64>
 800698e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006992:	463a      	mov	r2, r7
 8006994:	4640      	mov	r0, r8
 8006996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800699a:	4798      	blx	r3
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	3b01      	subs	r3, #1
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	e6ec      	b.n	800677e <_scanf_float+0x7e>
 80069a4:	1e6b      	subs	r3, r5, #1
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d825      	bhi.n	80069f6 <_scanf_float+0x2f6>
 80069aa:	2d02      	cmp	r5, #2
 80069ac:	d836      	bhi.n	8006a1c <_scanf_float+0x31c>
 80069ae:	455e      	cmp	r6, fp
 80069b0:	f67f aee8 	bls.w	8006784 <_scanf_float+0x84>
 80069b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069b8:	463a      	mov	r2, r7
 80069ba:	4640      	mov	r0, r8
 80069bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069c0:	4798      	blx	r3
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	e7f1      	b.n	80069ae <_scanf_float+0x2ae>
 80069ca:	9802      	ldr	r0, [sp, #8]
 80069cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80069d4:	463a      	mov	r2, r7
 80069d6:	9002      	str	r0, [sp, #8]
 80069d8:	4640      	mov	r0, r8
 80069da:	4798      	blx	r3
 80069dc:	6923      	ldr	r3, [r4, #16]
 80069de:	3b01      	subs	r3, #1
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069e6:	fa5f fa8a 	uxtb.w	sl, sl
 80069ea:	f1ba 0f02 	cmp.w	sl, #2
 80069ee:	d1ec      	bne.n	80069ca <_scanf_float+0x2ca>
 80069f0:	3d03      	subs	r5, #3
 80069f2:	b2ed      	uxtb	r5, r5
 80069f4:	1b76      	subs	r6, r6, r5
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	05da      	lsls	r2, r3, #23
 80069fa:	d52f      	bpl.n	8006a5c <_scanf_float+0x35c>
 80069fc:	055b      	lsls	r3, r3, #21
 80069fe:	d510      	bpl.n	8006a22 <_scanf_float+0x322>
 8006a00:	455e      	cmp	r6, fp
 8006a02:	f67f aebf 	bls.w	8006784 <_scanf_float+0x84>
 8006a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a0a:	463a      	mov	r2, r7
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a12:	4798      	blx	r3
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	6123      	str	r3, [r4, #16]
 8006a1a:	e7f1      	b.n	8006a00 <_scanf_float+0x300>
 8006a1c:	46aa      	mov	sl, r5
 8006a1e:	9602      	str	r6, [sp, #8]
 8006a20:	e7df      	b.n	80069e2 <_scanf_float+0x2e2>
 8006a22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	2965      	cmp	r1, #101	; 0x65
 8006a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	d00c      	beq.n	8006a50 <_scanf_float+0x350>
 8006a36:	2945      	cmp	r1, #69	; 0x45
 8006a38:	d00a      	beq.n	8006a50 <_scanf_float+0x350>
 8006a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a3e:	463a      	mov	r2, r7
 8006a40:	4640      	mov	r0, r8
 8006a42:	4798      	blx	r3
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	1eb5      	subs	r5, r6, #2
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	463a      	mov	r2, r7
 8006a52:	4640      	mov	r0, r8
 8006a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a58:	4798      	blx	r3
 8006a5a:	462e      	mov	r6, r5
 8006a5c:	6825      	ldr	r5, [r4, #0]
 8006a5e:	f015 0510 	ands.w	r5, r5, #16
 8006a62:	d155      	bne.n	8006b10 <_scanf_float+0x410>
 8006a64:	7035      	strb	r5, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d11d      	bne.n	8006aae <_scanf_float+0x3ae>
 8006a72:	9b01      	ldr	r3, [sp, #4]
 8006a74:	454b      	cmp	r3, r9
 8006a76:	eba3 0209 	sub.w	r2, r3, r9
 8006a7a:	d125      	bne.n	8006ac8 <_scanf_float+0x3c8>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4659      	mov	r1, fp
 8006a80:	4640      	mov	r0, r8
 8006a82:	f7ff f9cd 	bl	8005e20 <_strtod_r>
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	f8d4 c000 	ldr.w	ip, [r4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f01c 0f02 	tst.w	ip, #2
 8006a92:	4606      	mov	r6, r0
 8006a94:	460f      	mov	r7, r1
 8006a96:	f103 0204 	add.w	r2, r3, #4
 8006a9a:	d020      	beq.n	8006ade <_scanf_float+0x3de>
 8006a9c:	9903      	ldr	r1, [sp, #12]
 8006a9e:	600a      	str	r2, [r1, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	e9c3 6700 	strd	r6, r7, [r3]
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60e3      	str	r3, [r4, #12]
 8006aac:	e66b      	b.n	8006786 <_scanf_float+0x86>
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0e3      	beq.n	8006a7c <_scanf_float+0x37c>
 8006ab4:	9905      	ldr	r1, [sp, #20]
 8006ab6:	230a      	movs	r3, #10
 8006ab8:	462a      	mov	r2, r5
 8006aba:	4640      	mov	r0, r8
 8006abc:	3101      	adds	r1, #1
 8006abe:	f002 fa29 	bl	8008f14 <_strtol_r>
 8006ac2:	9b04      	ldr	r3, [sp, #16]
 8006ac4:	9e05      	ldr	r6, [sp, #20]
 8006ac6:	1ac2      	subs	r2, r0, r3
 8006ac8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006acc:	429e      	cmp	r6, r3
 8006ace:	bf28      	it	cs
 8006ad0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	490f      	ldr	r1, [pc, #60]	; (8006b14 <_scanf_float+0x414>)
 8006ad8:	f000 f8e2 	bl	8006ca0 <siprintf>
 8006adc:	e7ce      	b.n	8006a7c <_scanf_float+0x37c>
 8006ade:	f01c 0f04 	tst.w	ip, #4
 8006ae2:	d1db      	bne.n	8006a9c <_scanf_float+0x39c>
 8006ae4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006ae8:	f8cc 2000 	str.w	r2, [ip]
 8006aec:	f8d3 8000 	ldr.w	r8, [r3]
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	f7f9 ff8a 	bl	8000a0c <__aeabi_dcmpun>
 8006af8:	b128      	cbz	r0, 8006b06 <_scanf_float+0x406>
 8006afa:	4807      	ldr	r0, [pc, #28]	; (8006b18 <_scanf_float+0x418>)
 8006afc:	f000 fa16 	bl	8006f2c <nanf>
 8006b00:	f8c8 0000 	str.w	r0, [r8]
 8006b04:	e7cf      	b.n	8006aa6 <_scanf_float+0x3a6>
 8006b06:	4630      	mov	r0, r6
 8006b08:	4639      	mov	r1, r7
 8006b0a:	f7f9 ffdd 	bl	8000ac8 <__aeabi_d2f>
 8006b0e:	e7f7      	b.n	8006b00 <_scanf_float+0x400>
 8006b10:	2500      	movs	r5, #0
 8006b12:	e638      	b.n	8006786 <_scanf_float+0x86>
 8006b14:	0800ad9c 	.word	0x0800ad9c
 8006b18:	0800b139 	.word	0x0800b139

08006b1c <std>:
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	e9c0 3300 	strd	r3, r3, [r0]
 8006b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2a:	6083      	str	r3, [r0, #8]
 8006b2c:	8181      	strh	r1, [r0, #12]
 8006b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b30:	81c2      	strh	r2, [r0, #14]
 8006b32:	6183      	str	r3, [r0, #24]
 8006b34:	4619      	mov	r1, r3
 8006b36:	2208      	movs	r2, #8
 8006b38:	305c      	adds	r0, #92	; 0x5c
 8006b3a:	f000 f935 	bl	8006da8 <memset>
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <std+0x58>)
 8006b40:	6224      	str	r4, [r4, #32]
 8006b42:	6263      	str	r3, [r4, #36]	; 0x24
 8006b44:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <std+0x5c>)
 8006b46:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b48:	4b0c      	ldr	r3, [pc, #48]	; (8006b7c <std+0x60>)
 8006b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b4c:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <std+0x64>)
 8006b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b50:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <std+0x68>)
 8006b52:	429c      	cmp	r4, r3
 8006b54:	d006      	beq.n	8006b64 <std+0x48>
 8006b56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b5a:	4294      	cmp	r4, r2
 8006b5c:	d002      	beq.n	8006b64 <std+0x48>
 8006b5e:	33d0      	adds	r3, #208	; 0xd0
 8006b60:	429c      	cmp	r4, r3
 8006b62:	d105      	bne.n	8006b70 <std+0x54>
 8006b64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6c:	f000 b9b8 	b.w	8006ee0 <__retarget_lock_init_recursive>
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	08006ce1 	.word	0x08006ce1
 8006b78:	08006d03 	.word	0x08006d03
 8006b7c:	08006d3b 	.word	0x08006d3b
 8006b80:	08006d5f 	.word	0x08006d5f
 8006b84:	200003bc 	.word	0x200003bc

08006b88 <stdio_exit_handler>:
 8006b88:	4a02      	ldr	r2, [pc, #8]	; (8006b94 <stdio_exit_handler+0xc>)
 8006b8a:	4903      	ldr	r1, [pc, #12]	; (8006b98 <stdio_exit_handler+0x10>)
 8006b8c:	4803      	ldr	r0, [pc, #12]	; (8006b9c <stdio_exit_handler+0x14>)
 8006b8e:	f000 b869 	b.w	8006c64 <_fwalk_sglue>
 8006b92:	bf00      	nop
 8006b94:	2000000c 	.word	0x2000000c
 8006b98:	080092e9 	.word	0x080092e9
 8006b9c:	20000184 	.word	0x20000184

08006ba0 <cleanup_stdio>:
 8006ba0:	6841      	ldr	r1, [r0, #4]
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <cleanup_stdio+0x34>)
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	4604      	mov	r4, r0
 8006baa:	d001      	beq.n	8006bb0 <cleanup_stdio+0x10>
 8006bac:	f002 fb9c 	bl	80092e8 <_fflush_r>
 8006bb0:	68a1      	ldr	r1, [r4, #8]
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <cleanup_stdio+0x38>)
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d002      	beq.n	8006bbe <cleanup_stdio+0x1e>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f002 fb95 	bl	80092e8 <_fflush_r>
 8006bbe:	68e1      	ldr	r1, [r4, #12]
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <cleanup_stdio+0x3c>)
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	d004      	beq.n	8006bd0 <cleanup_stdio+0x30>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bcc:	f002 bb8c 	b.w	80092e8 <_fflush_r>
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200003bc 	.word	0x200003bc
 8006bd8:	20000424 	.word	0x20000424
 8006bdc:	2000048c 	.word	0x2000048c

08006be0 <global_stdio_init.part.0>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <global_stdio_init.part.0+0x30>)
 8006be4:	4c0b      	ldr	r4, [pc, #44]	; (8006c14 <global_stdio_init.part.0+0x34>)
 8006be6:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <global_stdio_init.part.0+0x38>)
 8006be8:	4620      	mov	r0, r4
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	2104      	movs	r1, #4
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f7ff ff94 	bl	8006b1c <std>
 8006bf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2109      	movs	r1, #9
 8006bfc:	f7ff ff8e 	bl	8006b1c <std>
 8006c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c04:	2202      	movs	r2, #2
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0a:	2112      	movs	r1, #18
 8006c0c:	f7ff bf86 	b.w	8006b1c <std>
 8006c10:	200004f4 	.word	0x200004f4
 8006c14:	200003bc 	.word	0x200003bc
 8006c18:	08006b89 	.word	0x08006b89

08006c1c <__sfp_lock_acquire>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	; (8006c24 <__sfp_lock_acquire+0x8>)
 8006c1e:	f000 b960 	b.w	8006ee2 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	200004fd 	.word	0x200004fd

08006c28 <__sfp_lock_release>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__sfp_lock_release+0x8>)
 8006c2a:	f000 b95b 	b.w	8006ee4 <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	200004fd 	.word	0x200004fd

08006c34 <__sinit>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4604      	mov	r4, r0
 8006c38:	f7ff fff0 	bl	8006c1c <__sfp_lock_acquire>
 8006c3c:	6a23      	ldr	r3, [r4, #32]
 8006c3e:	b11b      	cbz	r3, 8006c48 <__sinit+0x14>
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f7ff bff0 	b.w	8006c28 <__sfp_lock_release>
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <__sinit+0x28>)
 8006c4a:	6223      	str	r3, [r4, #32]
 8006c4c:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <__sinit+0x2c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f5      	bne.n	8006c40 <__sinit+0xc>
 8006c54:	f7ff ffc4 	bl	8006be0 <global_stdio_init.part.0>
 8006c58:	e7f2      	b.n	8006c40 <__sinit+0xc>
 8006c5a:	bf00      	nop
 8006c5c:	08006ba1 	.word	0x08006ba1
 8006c60:	200004f4 	.word	0x200004f4

08006c64 <_fwalk_sglue>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4607      	mov	r7, r0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	2600      	movs	r6, #0
 8006c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c74:	f1b9 0901 	subs.w	r9, r9, #1
 8006c78:	d505      	bpl.n	8006c86 <_fwalk_sglue+0x22>
 8006c7a:	6824      	ldr	r4, [r4, #0]
 8006c7c:	2c00      	cmp	r4, #0
 8006c7e:	d1f7      	bne.n	8006c70 <_fwalk_sglue+0xc>
 8006c80:	4630      	mov	r0, r6
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d907      	bls.n	8006c9c <_fwalk_sglue+0x38>
 8006c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c90:	3301      	adds	r3, #1
 8006c92:	d003      	beq.n	8006c9c <_fwalk_sglue+0x38>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c0      	blx	r8
 8006c9a:	4306      	orrs	r6, r0
 8006c9c:	3568      	adds	r5, #104	; 0x68
 8006c9e:	e7e9      	b.n	8006c74 <_fwalk_sglue+0x10>

08006ca0 <siprintf>:
 8006ca0:	b40e      	push	{r1, r2, r3}
 8006ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ca6:	b500      	push	{lr}
 8006ca8:	b09c      	sub	sp, #112	; 0x70
 8006caa:	ab1d      	add	r3, sp, #116	; 0x74
 8006cac:	9002      	str	r0, [sp, #8]
 8006cae:	9006      	str	r0, [sp, #24]
 8006cb0:	9107      	str	r1, [sp, #28]
 8006cb2:	9104      	str	r1, [sp, #16]
 8006cb4:	4808      	ldr	r0, [pc, #32]	; (8006cd8 <siprintf+0x38>)
 8006cb6:	4909      	ldr	r1, [pc, #36]	; (8006cdc <siprintf+0x3c>)
 8006cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cbc:	9105      	str	r1, [sp, #20]
 8006cbe:	6800      	ldr	r0, [r0, #0]
 8006cc0:	a902      	add	r1, sp, #8
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	f002 f990 	bl	8008fe8 <_svfiprintf_r>
 8006cc8:	2200      	movs	r2, #0
 8006cca:	9b02      	ldr	r3, [sp, #8]
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	b01c      	add	sp, #112	; 0x70
 8006cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cd4:	b003      	add	sp, #12
 8006cd6:	4770      	bx	lr
 8006cd8:	200001d0 	.word	0x200001d0
 8006cdc:	ffff0208 	.word	0xffff0208

08006ce0 <__sread>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	f000 f8ac 	bl	8006e44 <_read_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	bfab      	itete	ge
 8006cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf4:	181b      	addge	r3, r3, r0
 8006cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cfa:	bfac      	ite	ge
 8006cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cfe:	81a3      	strhlt	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__swrite>:
 8006d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	461f      	mov	r7, r3
 8006d08:	898b      	ldrh	r3, [r1, #12]
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	05db      	lsls	r3, r3, #23
 8006d0e:	460c      	mov	r4, r1
 8006d10:	4616      	mov	r6, r2
 8006d12:	d505      	bpl.n	8006d20 <__swrite+0x1e>
 8006d14:	2302      	movs	r3, #2
 8006d16:	2200      	movs	r2, #0
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	f000 f880 	bl	8006e20 <_lseek_r>
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	4632      	mov	r2, r6
 8006d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d36:	f000 b897 	b.w	8006e68 <_write_r>

08006d3a <__sseek>:
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 f86d 	bl	8006e20 <_lseek_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	bf15      	itete	ne
 8006d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d56:	81a3      	strheq	r3, [r4, #12]
 8006d58:	bf18      	it	ne
 8006d5a:	81a3      	strhne	r3, [r4, #12]
 8006d5c:	bd10      	pop	{r4, pc}

08006d5e <__sclose>:
 8006d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d62:	f000 b84d 	b.w	8006e00 <_close_r>
	...

08006d68 <_vsiprintf_r>:
 8006d68:	b500      	push	{lr}
 8006d6a:	b09b      	sub	sp, #108	; 0x6c
 8006d6c:	9100      	str	r1, [sp, #0]
 8006d6e:	9104      	str	r1, [sp, #16]
 8006d70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	9102      	str	r1, [sp, #8]
 8006d78:	4905      	ldr	r1, [pc, #20]	; (8006d90 <_vsiprintf_r+0x28>)
 8006d7a:	9103      	str	r1, [sp, #12]
 8006d7c:	4669      	mov	r1, sp
 8006d7e:	f002 f933 	bl	8008fe8 <_svfiprintf_r>
 8006d82:	2200      	movs	r2, #0
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	b01b      	add	sp, #108	; 0x6c
 8006d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d8e:	bf00      	nop
 8006d90:	ffff0208 	.word	0xffff0208

08006d94 <vsiprintf>:
 8006d94:	4613      	mov	r3, r2
 8006d96:	460a      	mov	r2, r1
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4802      	ldr	r0, [pc, #8]	; (8006da4 <vsiprintf+0x10>)
 8006d9c:	6800      	ldr	r0, [r0, #0]
 8006d9e:	f7ff bfe3 	b.w	8006d68 <_vsiprintf_r>
 8006da2:	bf00      	nop
 8006da4:	200001d0 	.word	0x200001d0

08006da8 <memset>:
 8006da8:	4603      	mov	r3, r0
 8006daa:	4402      	add	r2, r0
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d100      	bne.n	8006db2 <memset+0xa>
 8006db0:	4770      	bx	lr
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	e7f9      	b.n	8006dac <memset+0x4>

08006db8 <strchr>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	b2c9      	uxtb	r1, r1
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc2:	b112      	cbz	r2, 8006dca <strchr+0x12>
 8006dc4:	428a      	cmp	r2, r1
 8006dc6:	d1f9      	bne.n	8006dbc <strchr+0x4>
 8006dc8:	4770      	bx	lr
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	bf18      	it	ne
 8006dce:	2000      	movne	r0, #0
 8006dd0:	4770      	bx	lr

08006dd2 <strncmp>:
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	b16a      	cbz	r2, 8006df2 <strncmp+0x20>
 8006dd6:	3901      	subs	r1, #1
 8006dd8:	1884      	adds	r4, r0, r2
 8006dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dde:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d103      	bne.n	8006dee <strncmp+0x1c>
 8006de6:	42a0      	cmp	r0, r4
 8006de8:	d001      	beq.n	8006dee <strncmp+0x1c>
 8006dea:	2a00      	cmp	r2, #0
 8006dec:	d1f5      	bne.n	8006dda <strncmp+0x8>
 8006dee:	1ad0      	subs	r0, r2, r3
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	4610      	mov	r0, r2
 8006df4:	e7fc      	b.n	8006df0 <strncmp+0x1e>
	...

08006df8 <_localeconv_r>:
 8006df8:	4800      	ldr	r0, [pc, #0]	; (8006dfc <_localeconv_r+0x4>)
 8006dfa:	4770      	bx	lr
 8006dfc:	20000108 	.word	0x20000108

08006e00 <_close_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	2300      	movs	r3, #0
 8006e04:	4d05      	ldr	r5, [pc, #20]	; (8006e1c <_close_r+0x1c>)
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7fa fb76 	bl	80014fc <_close>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_close_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_close_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	200004f8 	.word	0x200004f8

08006e20 <_lseek_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	4611      	mov	r1, r2
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4d05      	ldr	r5, [pc, #20]	; (8006e40 <_lseek_r+0x20>)
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fa fb88 	bl	8001544 <_lseek>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_lseek_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_lseek_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	200004f8 	.word	0x200004f8

08006e44 <_read_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4d05      	ldr	r5, [pc, #20]	; (8006e64 <_read_r+0x20>)
 8006e50:	602a      	str	r2, [r5, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f7fa fb19 	bl	800148a <_read>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_read_r+0x1e>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_read_r+0x1e>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	200004f8 	.word	0x200004f8

08006e68 <_write_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	2200      	movs	r2, #0
 8006e72:	4d05      	ldr	r5, [pc, #20]	; (8006e88 <_write_r+0x20>)
 8006e74:	602a      	str	r2, [r5, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f7fa fb24 	bl	80014c4 <_write>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_write_r+0x1e>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_write_r+0x1e>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	200004f8 	.word	0x200004f8

08006e8c <__errno>:
 8006e8c:	4b01      	ldr	r3, [pc, #4]	; (8006e94 <__errno+0x8>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	200001d0 	.word	0x200001d0

08006e98 <__libc_init_array>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	4d0c      	ldr	r5, [pc, #48]	; (8006ed0 <__libc_init_array+0x38>)
 8006e9e:	4c0d      	ldr	r4, [pc, #52]	; (8006ed4 <__libc_init_array+0x3c>)
 8006ea0:	1b64      	subs	r4, r4, r5
 8006ea2:	10a4      	asrs	r4, r4, #2
 8006ea4:	42a6      	cmp	r6, r4
 8006ea6:	d109      	bne.n	8006ebc <__libc_init_array+0x24>
 8006ea8:	f003 ff02 	bl	800acb0 <_init>
 8006eac:	2600      	movs	r6, #0
 8006eae:	4d0a      	ldr	r5, [pc, #40]	; (8006ed8 <__libc_init_array+0x40>)
 8006eb0:	4c0a      	ldr	r4, [pc, #40]	; (8006edc <__libc_init_array+0x44>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	42a6      	cmp	r6, r4
 8006eb8:	d105      	bne.n	8006ec6 <__libc_init_array+0x2e>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec0:	4798      	blx	r3
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7ee      	b.n	8006ea4 <__libc_init_array+0xc>
 8006ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eca:	4798      	blx	r3
 8006ecc:	3601      	adds	r6, #1
 8006ece:	e7f2      	b.n	8006eb6 <__libc_init_array+0x1e>
 8006ed0:	0800b328 	.word	0x0800b328
 8006ed4:	0800b328 	.word	0x0800b328
 8006ed8:	0800b328 	.word	0x0800b328
 8006edc:	0800b32c 	.word	0x0800b32c

08006ee0 <__retarget_lock_init_recursive>:
 8006ee0:	4770      	bx	lr

08006ee2 <__retarget_lock_acquire_recursive>:
 8006ee2:	4770      	bx	lr

08006ee4 <__retarget_lock_release_recursive>:
 8006ee4:	4770      	bx	lr

08006ee6 <memchr>:
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	b2c9      	uxtb	r1, r1
 8006eec:	4402      	add	r2, r0
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	d101      	bne.n	8006ef8 <memchr+0x12>
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	e003      	b.n	8006f00 <memchr+0x1a>
 8006ef8:	7804      	ldrb	r4, [r0, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	428c      	cmp	r4, r1
 8006efe:	d1f6      	bne.n	8006eee <memchr+0x8>
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <memcpy>:
 8006f02:	440a      	add	r2, r1
 8006f04:	4291      	cmp	r1, r2
 8006f06:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f0a:	d100      	bne.n	8006f0e <memcpy+0xc>
 8006f0c:	4770      	bx	lr
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f14:	4291      	cmp	r1, r2
 8006f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f1a:	d1f9      	bne.n	8006f10 <memcpy+0xe>
 8006f1c:	bd10      	pop	{r4, pc}
	...

08006f20 <nan>:
 8006f20:	2000      	movs	r0, #0
 8006f22:	4901      	ldr	r1, [pc, #4]	; (8006f28 <nan+0x8>)
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	7ff80000 	.word	0x7ff80000

08006f2c <nanf>:
 8006f2c:	4800      	ldr	r0, [pc, #0]	; (8006f30 <nanf+0x4>)
 8006f2e:	4770      	bx	lr
 8006f30:	7fc00000 	.word	0x7fc00000

08006f34 <quorem>:
 8006f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	6903      	ldr	r3, [r0, #16]
 8006f3a:	690c      	ldr	r4, [r1, #16]
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	42a3      	cmp	r3, r4
 8006f40:	db7f      	blt.n	8007042 <quorem+0x10e>
 8006f42:	3c01      	subs	r4, #1
 8006f44:	f100 0514 	add.w	r5, r0, #20
 8006f48:	f101 0814 	add.w	r8, r1, #20
 8006f4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f6a:	d331      	bcc.n	8006fd0 <quorem+0x9c>
 8006f6c:	f04f 0e00 	mov.w	lr, #0
 8006f70:	4640      	mov	r0, r8
 8006f72:	46ac      	mov	ip, r5
 8006f74:	46f2      	mov	sl, lr
 8006f76:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f7a:	b293      	uxth	r3, r2
 8006f7c:	fb06 e303 	mla	r3, r6, r3, lr
 8006f80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f84:	0c1a      	lsrs	r2, r3, #16
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	fb06 220e 	mla	r2, r6, lr, r2
 8006f8c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f90:	f8dc a000 	ldr.w	sl, [ip]
 8006f94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f98:	fa1f fa8a 	uxth.w	sl, sl
 8006f9c:	4453      	add	r3, sl
 8006f9e:	f8dc a000 	ldr.w	sl, [ip]
 8006fa2:	b292      	uxth	r2, r2
 8006fa4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb2:	4581      	cmp	r9, r0
 8006fb4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fb8:	f84c 3b04 	str.w	r3, [ip], #4
 8006fbc:	d2db      	bcs.n	8006f76 <quorem+0x42>
 8006fbe:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fc2:	b92b      	cbnz	r3, 8006fd0 <quorem+0x9c>
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	3b04      	subs	r3, #4
 8006fc8:	429d      	cmp	r5, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	d32d      	bcc.n	800702a <quorem+0xf6>
 8006fce:	613c      	str	r4, [r7, #16]
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f001 fd49 	bl	8008a68 <__mcmp>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	db23      	blt.n	8007022 <quorem+0xee>
 8006fda:	4629      	mov	r1, r5
 8006fdc:	2000      	movs	r0, #0
 8006fde:	3601      	adds	r6, #1
 8006fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fe4:	f8d1 c000 	ldr.w	ip, [r1]
 8006fe8:	b293      	uxth	r3, r2
 8006fea:	1ac3      	subs	r3, r0, r3
 8006fec:	0c12      	lsrs	r2, r2, #16
 8006fee:	fa1f f08c 	uxth.w	r0, ip
 8006ff2:	4403      	add	r3, r0
 8006ff4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007002:	45c1      	cmp	r9, r8
 8007004:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007008:	f841 3b04 	str.w	r3, [r1], #4
 800700c:	d2e8      	bcs.n	8006fe0 <quorem+0xac>
 800700e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007016:	b922      	cbnz	r2, 8007022 <quorem+0xee>
 8007018:	3b04      	subs	r3, #4
 800701a:	429d      	cmp	r5, r3
 800701c:	461a      	mov	r2, r3
 800701e:	d30a      	bcc.n	8007036 <quorem+0x102>
 8007020:	613c      	str	r4, [r7, #16]
 8007022:	4630      	mov	r0, r6
 8007024:	b003      	add	sp, #12
 8007026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	3b04      	subs	r3, #4
 800702e:	2a00      	cmp	r2, #0
 8007030:	d1cd      	bne.n	8006fce <quorem+0x9a>
 8007032:	3c01      	subs	r4, #1
 8007034:	e7c8      	b.n	8006fc8 <quorem+0x94>
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	3b04      	subs	r3, #4
 800703a:	2a00      	cmp	r2, #0
 800703c:	d1f0      	bne.n	8007020 <quorem+0xec>
 800703e:	3c01      	subs	r4, #1
 8007040:	e7eb      	b.n	800701a <quorem+0xe6>
 8007042:	2000      	movs	r0, #0
 8007044:	e7ee      	b.n	8007024 <quorem+0xf0>
	...

08007048 <_dtoa_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4616      	mov	r6, r2
 800704e:	461f      	mov	r7, r3
 8007050:	69c4      	ldr	r4, [r0, #28]
 8007052:	b099      	sub	sp, #100	; 0x64
 8007054:	4605      	mov	r5, r0
 8007056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800705a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800705e:	b974      	cbnz	r4, 800707e <_dtoa_r+0x36>
 8007060:	2010      	movs	r0, #16
 8007062:	f001 f977 	bl	8008354 <malloc>
 8007066:	4602      	mov	r2, r0
 8007068:	61e8      	str	r0, [r5, #28]
 800706a:	b920      	cbnz	r0, 8007076 <_dtoa_r+0x2e>
 800706c:	21ef      	movs	r1, #239	; 0xef
 800706e:	4bac      	ldr	r3, [pc, #688]	; (8007320 <_dtoa_r+0x2d8>)
 8007070:	48ac      	ldr	r0, [pc, #688]	; (8007324 <_dtoa_r+0x2dc>)
 8007072:	f002 f98b 	bl	800938c <__assert_func>
 8007076:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800707a:	6004      	str	r4, [r0, #0]
 800707c:	60c4      	str	r4, [r0, #12]
 800707e:	69eb      	ldr	r3, [r5, #28]
 8007080:	6819      	ldr	r1, [r3, #0]
 8007082:	b151      	cbz	r1, 800709a <_dtoa_r+0x52>
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	2301      	movs	r3, #1
 8007088:	4093      	lsls	r3, r2
 800708a:	604a      	str	r2, [r1, #4]
 800708c:	608b      	str	r3, [r1, #8]
 800708e:	4628      	mov	r0, r5
 8007090:	f001 fa66 	bl	8008560 <_Bfree>
 8007094:	2200      	movs	r2, #0
 8007096:	69eb      	ldr	r3, [r5, #28]
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	1e3b      	subs	r3, r7, #0
 800709c:	bfaf      	iteee	ge
 800709e:	2300      	movge	r3, #0
 80070a0:	2201      	movlt	r2, #1
 80070a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070a6:	9305      	strlt	r3, [sp, #20]
 80070a8:	bfa8      	it	ge
 80070aa:	f8c8 3000 	strge.w	r3, [r8]
 80070ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80070b2:	4b9d      	ldr	r3, [pc, #628]	; (8007328 <_dtoa_r+0x2e0>)
 80070b4:	bfb8      	it	lt
 80070b6:	f8c8 2000 	strlt.w	r2, [r8]
 80070ba:	ea33 0309 	bics.w	r3, r3, r9
 80070be:	d119      	bne.n	80070f4 <_dtoa_r+0xac>
 80070c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80070c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070cc:	4333      	orrs	r3, r6
 80070ce:	f000 8589 	beq.w	8007be4 <_dtoa_r+0xb9c>
 80070d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070d4:	b953      	cbnz	r3, 80070ec <_dtoa_r+0xa4>
 80070d6:	4b95      	ldr	r3, [pc, #596]	; (800732c <_dtoa_r+0x2e4>)
 80070d8:	e023      	b.n	8007122 <_dtoa_r+0xda>
 80070da:	4b95      	ldr	r3, [pc, #596]	; (8007330 <_dtoa_r+0x2e8>)
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	3308      	adds	r3, #8
 80070e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	9803      	ldr	r0, [sp, #12]
 80070e6:	b019      	add	sp, #100	; 0x64
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	4b8f      	ldr	r3, [pc, #572]	; (800732c <_dtoa_r+0x2e4>)
 80070ee:	9303      	str	r3, [sp, #12]
 80070f0:	3303      	adds	r3, #3
 80070f2:	e7f5      	b.n	80070e0 <_dtoa_r+0x98>
 80070f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80070fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007100:	2200      	movs	r2, #0
 8007102:	2300      	movs	r3, #0
 8007104:	f7f9 fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8007108:	4680      	mov	r8, r0
 800710a:	b160      	cbz	r0, 8007126 <_dtoa_r+0xde>
 800710c:	2301      	movs	r3, #1
 800710e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8562 	beq.w	8007bde <_dtoa_r+0xb96>
 800711a:	4b86      	ldr	r3, [pc, #536]	; (8007334 <_dtoa_r+0x2ec>)
 800711c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	3b01      	subs	r3, #1
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	e7de      	b.n	80070e4 <_dtoa_r+0x9c>
 8007126:	ab16      	add	r3, sp, #88	; 0x58
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	ab17      	add	r3, sp, #92	; 0x5c
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	4628      	mov	r0, r5
 8007130:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007134:	f001 fda8 	bl	8008c88 <__d2b>
 8007138:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800713c:	4682      	mov	sl, r0
 800713e:	2c00      	cmp	r4, #0
 8007140:	d07e      	beq.n	8007240 <_dtoa_r+0x1f8>
 8007142:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007148:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800714c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007150:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007154:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007158:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800715c:	4619      	mov	r1, r3
 800715e:	2200      	movs	r2, #0
 8007160:	4b75      	ldr	r3, [pc, #468]	; (8007338 <_dtoa_r+0x2f0>)
 8007162:	f7f9 f801 	bl	8000168 <__aeabi_dsub>
 8007166:	a368      	add	r3, pc, #416	; (adr r3, 8007308 <_dtoa_r+0x2c0>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f7f9 f9b4 	bl	80004d8 <__aeabi_dmul>
 8007170:	a367      	add	r3, pc, #412	; (adr r3, 8007310 <_dtoa_r+0x2c8>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f8 fff9 	bl	800016c <__adddf3>
 800717a:	4606      	mov	r6, r0
 800717c:	4620      	mov	r0, r4
 800717e:	460f      	mov	r7, r1
 8007180:	f7f9 f940 	bl	8000404 <__aeabi_i2d>
 8007184:	a364      	add	r3, pc, #400	; (adr r3, 8007318 <_dtoa_r+0x2d0>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 f9a5 	bl	80004d8 <__aeabi_dmul>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4630      	mov	r0, r6
 8007194:	4639      	mov	r1, r7
 8007196:	f7f8 ffe9 	bl	800016c <__adddf3>
 800719a:	4606      	mov	r6, r0
 800719c:	460f      	mov	r7, r1
 800719e:	f7f9 fc4b 	bl	8000a38 <__aeabi_d2iz>
 80071a2:	2200      	movs	r2, #0
 80071a4:	4683      	mov	fp, r0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4630      	mov	r0, r6
 80071aa:	4639      	mov	r1, r7
 80071ac:	f7f9 fc06 	bl	80009bc <__aeabi_dcmplt>
 80071b0:	b148      	cbz	r0, 80071c6 <_dtoa_r+0x17e>
 80071b2:	4658      	mov	r0, fp
 80071b4:	f7f9 f926 	bl	8000404 <__aeabi_i2d>
 80071b8:	4632      	mov	r2, r6
 80071ba:	463b      	mov	r3, r7
 80071bc:	f7f9 fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80071c0:	b908      	cbnz	r0, 80071c6 <_dtoa_r+0x17e>
 80071c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071c6:	f1bb 0f16 	cmp.w	fp, #22
 80071ca:	d857      	bhi.n	800727c <_dtoa_r+0x234>
 80071cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071d0:	4b5a      	ldr	r3, [pc, #360]	; (800733c <_dtoa_r+0x2f4>)
 80071d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 fbef 	bl	80009bc <__aeabi_dcmplt>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d04e      	beq.n	8007280 <_dtoa_r+0x238>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071ec:	1b1b      	subs	r3, r3, r4
 80071ee:	1e5a      	subs	r2, r3, #1
 80071f0:	bf46      	itte	mi
 80071f2:	f1c3 0901 	rsbmi	r9, r3, #1
 80071f6:	2300      	movmi	r3, #0
 80071f8:	f04f 0900 	movpl.w	r9, #0
 80071fc:	9209      	str	r2, [sp, #36]	; 0x24
 80071fe:	bf48      	it	mi
 8007200:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007202:	f1bb 0f00 	cmp.w	fp, #0
 8007206:	db3d      	blt.n	8007284 <_dtoa_r+0x23c>
 8007208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800720e:	445b      	add	r3, fp
 8007210:	9309      	str	r3, [sp, #36]	; 0x24
 8007212:	2300      	movs	r3, #0
 8007214:	930a      	str	r3, [sp, #40]	; 0x28
 8007216:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007218:	2b09      	cmp	r3, #9
 800721a:	d867      	bhi.n	80072ec <_dtoa_r+0x2a4>
 800721c:	2b05      	cmp	r3, #5
 800721e:	bfc4      	itt	gt
 8007220:	3b04      	subgt	r3, #4
 8007222:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007226:	bfc8      	it	gt
 8007228:	2400      	movgt	r4, #0
 800722a:	f1a3 0302 	sub.w	r3, r3, #2
 800722e:	bfd8      	it	le
 8007230:	2401      	movle	r4, #1
 8007232:	2b03      	cmp	r3, #3
 8007234:	f200 8086 	bhi.w	8007344 <_dtoa_r+0x2fc>
 8007238:	e8df f003 	tbb	[pc, r3]
 800723c:	5637392c 	.word	0x5637392c
 8007240:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007244:	441c      	add	r4, r3
 8007246:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800724a:	2b20      	cmp	r3, #32
 800724c:	bfc1      	itttt	gt
 800724e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007252:	fa09 f903 	lslgt.w	r9, r9, r3
 8007256:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800725a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800725e:	bfd6      	itet	le
 8007260:	f1c3 0320 	rsble	r3, r3, #32
 8007264:	ea49 0003 	orrgt.w	r0, r9, r3
 8007268:	fa06 f003 	lslle.w	r0, r6, r3
 800726c:	f7f9 f8ba 	bl	80003e4 <__aeabi_ui2d>
 8007270:	2201      	movs	r2, #1
 8007272:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007276:	3c01      	subs	r4, #1
 8007278:	9213      	str	r2, [sp, #76]	; 0x4c
 800727a:	e76f      	b.n	800715c <_dtoa_r+0x114>
 800727c:	2301      	movs	r3, #1
 800727e:	e7b3      	b.n	80071e8 <_dtoa_r+0x1a0>
 8007280:	900f      	str	r0, [sp, #60]	; 0x3c
 8007282:	e7b2      	b.n	80071ea <_dtoa_r+0x1a2>
 8007284:	f1cb 0300 	rsb	r3, fp, #0
 8007288:	930a      	str	r3, [sp, #40]	; 0x28
 800728a:	2300      	movs	r3, #0
 800728c:	eba9 090b 	sub.w	r9, r9, fp
 8007290:	930e      	str	r3, [sp, #56]	; 0x38
 8007292:	e7c0      	b.n	8007216 <_dtoa_r+0x1ce>
 8007294:	2300      	movs	r3, #0
 8007296:	930b      	str	r3, [sp, #44]	; 0x2c
 8007298:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800729a:	2b00      	cmp	r3, #0
 800729c:	dc55      	bgt.n	800734a <_dtoa_r+0x302>
 800729e:	2301      	movs	r3, #1
 80072a0:	461a      	mov	r2, r3
 80072a2:	9306      	str	r3, [sp, #24]
 80072a4:	9308      	str	r3, [sp, #32]
 80072a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80072a8:	e00b      	b.n	80072c2 <_dtoa_r+0x27a>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e7f3      	b.n	8007296 <_dtoa_r+0x24e>
 80072ae:	2300      	movs	r3, #0
 80072b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072b4:	445b      	add	r3, fp
 80072b6:	9306      	str	r3, [sp, #24]
 80072b8:	3301      	adds	r3, #1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	9308      	str	r3, [sp, #32]
 80072be:	bfb8      	it	lt
 80072c0:	2301      	movlt	r3, #1
 80072c2:	2100      	movs	r1, #0
 80072c4:	2204      	movs	r2, #4
 80072c6:	69e8      	ldr	r0, [r5, #28]
 80072c8:	f102 0614 	add.w	r6, r2, #20
 80072cc:	429e      	cmp	r6, r3
 80072ce:	d940      	bls.n	8007352 <_dtoa_r+0x30a>
 80072d0:	6041      	str	r1, [r0, #4]
 80072d2:	4628      	mov	r0, r5
 80072d4:	f001 f904 	bl	80084e0 <_Balloc>
 80072d8:	9003      	str	r0, [sp, #12]
 80072da:	2800      	cmp	r0, #0
 80072dc:	d13c      	bne.n	8007358 <_dtoa_r+0x310>
 80072de:	4602      	mov	r2, r0
 80072e0:	f240 11af 	movw	r1, #431	; 0x1af
 80072e4:	4b16      	ldr	r3, [pc, #88]	; (8007340 <_dtoa_r+0x2f8>)
 80072e6:	e6c3      	b.n	8007070 <_dtoa_r+0x28>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e7e1      	b.n	80072b0 <_dtoa_r+0x268>
 80072ec:	2401      	movs	r4, #1
 80072ee:	2300      	movs	r3, #0
 80072f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80072f2:	9322      	str	r3, [sp, #136]	; 0x88
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295
 80072f8:	2200      	movs	r2, #0
 80072fa:	9306      	str	r3, [sp, #24]
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	2312      	movs	r3, #18
 8007300:	e7d1      	b.n	80072a6 <_dtoa_r+0x25e>
 8007302:	bf00      	nop
 8007304:	f3af 8000 	nop.w
 8007308:	636f4361 	.word	0x636f4361
 800730c:	3fd287a7 	.word	0x3fd287a7
 8007310:	8b60c8b3 	.word	0x8b60c8b3
 8007314:	3fc68a28 	.word	0x3fc68a28
 8007318:	509f79fb 	.word	0x509f79fb
 800731c:	3fd34413 	.word	0x3fd34413
 8007320:	0800adb6 	.word	0x0800adb6
 8007324:	0800adcd 	.word	0x0800adcd
 8007328:	7ff00000 	.word	0x7ff00000
 800732c:	0800adb2 	.word	0x0800adb2
 8007330:	0800ada9 	.word	0x0800ada9
 8007334:	0800ad79 	.word	0x0800ad79
 8007338:	3ff80000 	.word	0x3ff80000
 800733c:	0800af18 	.word	0x0800af18
 8007340:	0800ae25 	.word	0x0800ae25
 8007344:	2301      	movs	r3, #1
 8007346:	930b      	str	r3, [sp, #44]	; 0x2c
 8007348:	e7d4      	b.n	80072f4 <_dtoa_r+0x2ac>
 800734a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800734c:	9306      	str	r3, [sp, #24]
 800734e:	9308      	str	r3, [sp, #32]
 8007350:	e7b7      	b.n	80072c2 <_dtoa_r+0x27a>
 8007352:	3101      	adds	r1, #1
 8007354:	0052      	lsls	r2, r2, #1
 8007356:	e7b7      	b.n	80072c8 <_dtoa_r+0x280>
 8007358:	69eb      	ldr	r3, [r5, #28]
 800735a:	9a03      	ldr	r2, [sp, #12]
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	9b08      	ldr	r3, [sp, #32]
 8007360:	2b0e      	cmp	r3, #14
 8007362:	f200 80a8 	bhi.w	80074b6 <_dtoa_r+0x46e>
 8007366:	2c00      	cmp	r4, #0
 8007368:	f000 80a5 	beq.w	80074b6 <_dtoa_r+0x46e>
 800736c:	f1bb 0f00 	cmp.w	fp, #0
 8007370:	dd34      	ble.n	80073dc <_dtoa_r+0x394>
 8007372:	4b9a      	ldr	r3, [pc, #616]	; (80075dc <_dtoa_r+0x594>)
 8007374:	f00b 020f 	and.w	r2, fp, #15
 8007378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800737c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007380:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007384:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007388:	ea4f 142b 	mov.w	r4, fp, asr #4
 800738c:	d016      	beq.n	80073bc <_dtoa_r+0x374>
 800738e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007392:	4b93      	ldr	r3, [pc, #588]	; (80075e0 <_dtoa_r+0x598>)
 8007394:	2703      	movs	r7, #3
 8007396:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800739a:	f7f9 f9c7 	bl	800072c <__aeabi_ddiv>
 800739e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a2:	f004 040f 	and.w	r4, r4, #15
 80073a6:	4e8e      	ldr	r6, [pc, #568]	; (80075e0 <_dtoa_r+0x598>)
 80073a8:	b954      	cbnz	r4, 80073c0 <_dtoa_r+0x378>
 80073aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073b2:	f7f9 f9bb 	bl	800072c <__aeabi_ddiv>
 80073b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073ba:	e029      	b.n	8007410 <_dtoa_r+0x3c8>
 80073bc:	2702      	movs	r7, #2
 80073be:	e7f2      	b.n	80073a6 <_dtoa_r+0x35e>
 80073c0:	07e1      	lsls	r1, r4, #31
 80073c2:	d508      	bpl.n	80073d6 <_dtoa_r+0x38e>
 80073c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073cc:	f7f9 f884 	bl	80004d8 <__aeabi_dmul>
 80073d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073d4:	3701      	adds	r7, #1
 80073d6:	1064      	asrs	r4, r4, #1
 80073d8:	3608      	adds	r6, #8
 80073da:	e7e5      	b.n	80073a8 <_dtoa_r+0x360>
 80073dc:	f000 80a5 	beq.w	800752a <_dtoa_r+0x4e2>
 80073e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073e4:	f1cb 0400 	rsb	r4, fp, #0
 80073e8:	4b7c      	ldr	r3, [pc, #496]	; (80075dc <_dtoa_r+0x594>)
 80073ea:	f004 020f 	and.w	r2, r4, #15
 80073ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f9 f86f 	bl	80004d8 <__aeabi_dmul>
 80073fa:	2702      	movs	r7, #2
 80073fc:	2300      	movs	r3, #0
 80073fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007402:	4e77      	ldr	r6, [pc, #476]	; (80075e0 <_dtoa_r+0x598>)
 8007404:	1124      	asrs	r4, r4, #4
 8007406:	2c00      	cmp	r4, #0
 8007408:	f040 8084 	bne.w	8007514 <_dtoa_r+0x4cc>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1d2      	bne.n	80073b6 <_dtoa_r+0x36e>
 8007410:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007414:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8087 	beq.w	800752e <_dtoa_r+0x4e6>
 8007420:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007424:	2200      	movs	r2, #0
 8007426:	4b6f      	ldr	r3, [pc, #444]	; (80075e4 <_dtoa_r+0x59c>)
 8007428:	f7f9 fac8 	bl	80009bc <__aeabi_dcmplt>
 800742c:	2800      	cmp	r0, #0
 800742e:	d07e      	beq.n	800752e <_dtoa_r+0x4e6>
 8007430:	9b08      	ldr	r3, [sp, #32]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d07b      	beq.n	800752e <_dtoa_r+0x4e6>
 8007436:	9b06      	ldr	r3, [sp, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	dd38      	ble.n	80074ae <_dtoa_r+0x466>
 800743c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007440:	2200      	movs	r2, #0
 8007442:	4b69      	ldr	r3, [pc, #420]	; (80075e8 <_dtoa_r+0x5a0>)
 8007444:	f7f9 f848 	bl	80004d8 <__aeabi_dmul>
 8007448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800744c:	9c06      	ldr	r4, [sp, #24]
 800744e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007452:	3701      	adds	r7, #1
 8007454:	4638      	mov	r0, r7
 8007456:	f7f8 ffd5 	bl	8000404 <__aeabi_i2d>
 800745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745e:	f7f9 f83b 	bl	80004d8 <__aeabi_dmul>
 8007462:	2200      	movs	r2, #0
 8007464:	4b61      	ldr	r3, [pc, #388]	; (80075ec <_dtoa_r+0x5a4>)
 8007466:	f7f8 fe81 	bl	800016c <__adddf3>
 800746a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800746e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007472:	9611      	str	r6, [sp, #68]	; 0x44
 8007474:	2c00      	cmp	r4, #0
 8007476:	d15d      	bne.n	8007534 <_dtoa_r+0x4ec>
 8007478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800747c:	2200      	movs	r2, #0
 800747e:	4b5c      	ldr	r3, [pc, #368]	; (80075f0 <_dtoa_r+0x5a8>)
 8007480:	f7f8 fe72 	bl	8000168 <__aeabi_dsub>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800748c:	4633      	mov	r3, r6
 800748e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007490:	f7f9 fab2 	bl	80009f8 <__aeabi_dcmpgt>
 8007494:	2800      	cmp	r0, #0
 8007496:	f040 8295 	bne.w	80079c4 <_dtoa_r+0x97c>
 800749a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800749e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074a4:	f7f9 fa8a 	bl	80009bc <__aeabi_dcmplt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f040 8289 	bne.w	80079c0 <_dtoa_r+0x978>
 80074ae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80074b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f2c0 8151 	blt.w	8007760 <_dtoa_r+0x718>
 80074be:	f1bb 0f0e 	cmp.w	fp, #14
 80074c2:	f300 814d 	bgt.w	8007760 <_dtoa_r+0x718>
 80074c6:	4b45      	ldr	r3, [pc, #276]	; (80075dc <_dtoa_r+0x594>)
 80074c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80074d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f280 80da 	bge.w	8007690 <_dtoa_r+0x648>
 80074dc:	9b08      	ldr	r3, [sp, #32]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f300 80d6 	bgt.w	8007690 <_dtoa_r+0x648>
 80074e4:	f040 826b 	bne.w	80079be <_dtoa_r+0x976>
 80074e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074ec:	2200      	movs	r2, #0
 80074ee:	4b40      	ldr	r3, [pc, #256]	; (80075f0 <_dtoa_r+0x5a8>)
 80074f0:	f7f8 fff2 	bl	80004d8 <__aeabi_dmul>
 80074f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f8:	f7f9 fa74 	bl	80009e4 <__aeabi_dcmpge>
 80074fc:	9c08      	ldr	r4, [sp, #32]
 80074fe:	4626      	mov	r6, r4
 8007500:	2800      	cmp	r0, #0
 8007502:	f040 8241 	bne.w	8007988 <_dtoa_r+0x940>
 8007506:	2331      	movs	r3, #49	; 0x31
 8007508:	9f03      	ldr	r7, [sp, #12]
 800750a:	f10b 0b01 	add.w	fp, fp, #1
 800750e:	f807 3b01 	strb.w	r3, [r7], #1
 8007512:	e23d      	b.n	8007990 <_dtoa_r+0x948>
 8007514:	07e2      	lsls	r2, r4, #31
 8007516:	d505      	bpl.n	8007524 <_dtoa_r+0x4dc>
 8007518:	e9d6 2300 	ldrd	r2, r3, [r6]
 800751c:	f7f8 ffdc 	bl	80004d8 <__aeabi_dmul>
 8007520:	2301      	movs	r3, #1
 8007522:	3701      	adds	r7, #1
 8007524:	1064      	asrs	r4, r4, #1
 8007526:	3608      	adds	r6, #8
 8007528:	e76d      	b.n	8007406 <_dtoa_r+0x3be>
 800752a:	2702      	movs	r7, #2
 800752c:	e770      	b.n	8007410 <_dtoa_r+0x3c8>
 800752e:	46d8      	mov	r8, fp
 8007530:	9c08      	ldr	r4, [sp, #32]
 8007532:	e78f      	b.n	8007454 <_dtoa_r+0x40c>
 8007534:	9903      	ldr	r1, [sp, #12]
 8007536:	4b29      	ldr	r3, [pc, #164]	; (80075dc <_dtoa_r+0x594>)
 8007538:	4421      	add	r1, r4
 800753a:	9112      	str	r1, [sp, #72]	; 0x48
 800753c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800753e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007542:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007546:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800754a:	2900      	cmp	r1, #0
 800754c:	d054      	beq.n	80075f8 <_dtoa_r+0x5b0>
 800754e:	2000      	movs	r0, #0
 8007550:	4928      	ldr	r1, [pc, #160]	; (80075f4 <_dtoa_r+0x5ac>)
 8007552:	f7f9 f8eb 	bl	800072c <__aeabi_ddiv>
 8007556:	463b      	mov	r3, r7
 8007558:	4632      	mov	r2, r6
 800755a:	f7f8 fe05 	bl	8000168 <__aeabi_dsub>
 800755e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007562:	9f03      	ldr	r7, [sp, #12]
 8007564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007568:	f7f9 fa66 	bl	8000a38 <__aeabi_d2iz>
 800756c:	4604      	mov	r4, r0
 800756e:	f7f8 ff49 	bl	8000404 <__aeabi_i2d>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757a:	f7f8 fdf5 	bl	8000168 <__aeabi_dsub>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	3430      	adds	r4, #48	; 0x30
 8007584:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800758c:	f807 4b01 	strb.w	r4, [r7], #1
 8007590:	f7f9 fa14 	bl	80009bc <__aeabi_dcmplt>
 8007594:	2800      	cmp	r0, #0
 8007596:	d173      	bne.n	8007680 <_dtoa_r+0x638>
 8007598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800759c:	2000      	movs	r0, #0
 800759e:	4911      	ldr	r1, [pc, #68]	; (80075e4 <_dtoa_r+0x59c>)
 80075a0:	f7f8 fde2 	bl	8000168 <__aeabi_dsub>
 80075a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075a8:	f7f9 fa08 	bl	80009bc <__aeabi_dcmplt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f040 80b6 	bne.w	800771e <_dtoa_r+0x6d6>
 80075b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075b4:	429f      	cmp	r7, r3
 80075b6:	f43f af7a 	beq.w	80074ae <_dtoa_r+0x466>
 80075ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075be:	2200      	movs	r2, #0
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <_dtoa_r+0x5a0>)
 80075c2:	f7f8 ff89 	bl	80004d8 <__aeabi_dmul>
 80075c6:	2200      	movs	r2, #0
 80075c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d0:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <_dtoa_r+0x5a0>)
 80075d2:	f7f8 ff81 	bl	80004d8 <__aeabi_dmul>
 80075d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075da:	e7c3      	b.n	8007564 <_dtoa_r+0x51c>
 80075dc:	0800af18 	.word	0x0800af18
 80075e0:	0800aef0 	.word	0x0800aef0
 80075e4:	3ff00000 	.word	0x3ff00000
 80075e8:	40240000 	.word	0x40240000
 80075ec:	401c0000 	.word	0x401c0000
 80075f0:	40140000 	.word	0x40140000
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f8 ff6c 	bl	80004d8 <__aeabi_dmul>
 8007600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007602:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007606:	9c03      	ldr	r4, [sp, #12]
 8007608:	9314      	str	r3, [sp, #80]	; 0x50
 800760a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800760e:	f7f9 fa13 	bl	8000a38 <__aeabi_d2iz>
 8007612:	9015      	str	r0, [sp, #84]	; 0x54
 8007614:	f7f8 fef6 	bl	8000404 <__aeabi_i2d>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007620:	f7f8 fda2 	bl	8000168 <__aeabi_dsub>
 8007624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007626:	4606      	mov	r6, r0
 8007628:	3330      	adds	r3, #48	; 0x30
 800762a:	f804 3b01 	strb.w	r3, [r4], #1
 800762e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007630:	460f      	mov	r7, r1
 8007632:	429c      	cmp	r4, r3
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	d124      	bne.n	8007684 <_dtoa_r+0x63c>
 800763a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800763e:	4baf      	ldr	r3, [pc, #700]	; (80078fc <_dtoa_r+0x8b4>)
 8007640:	f7f8 fd94 	bl	800016c <__adddf3>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 8007650:	2800      	cmp	r0, #0
 8007652:	d163      	bne.n	800771c <_dtoa_r+0x6d4>
 8007654:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007658:	2000      	movs	r0, #0
 800765a:	49a8      	ldr	r1, [pc, #672]	; (80078fc <_dtoa_r+0x8b4>)
 800765c:	f7f8 fd84 	bl	8000168 <__aeabi_dsub>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 f9a8 	bl	80009bc <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f43f af1e 	beq.w	80074ae <_dtoa_r+0x466>
 8007672:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007674:	1e7b      	subs	r3, r7, #1
 8007676:	9314      	str	r3, [sp, #80]	; 0x50
 8007678:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d0f8      	beq.n	8007672 <_dtoa_r+0x62a>
 8007680:	46c3      	mov	fp, r8
 8007682:	e03b      	b.n	80076fc <_dtoa_r+0x6b4>
 8007684:	4b9e      	ldr	r3, [pc, #632]	; (8007900 <_dtoa_r+0x8b8>)
 8007686:	f7f8 ff27 	bl	80004d8 <__aeabi_dmul>
 800768a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800768e:	e7bc      	b.n	800760a <_dtoa_r+0x5c2>
 8007690:	9f03      	ldr	r7, [sp, #12]
 8007692:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	f7f9 f845 	bl	800072c <__aeabi_ddiv>
 80076a2:	f7f9 f9c9 	bl	8000a38 <__aeabi_d2iz>
 80076a6:	4604      	mov	r4, r0
 80076a8:	f7f8 feac 	bl	8000404 <__aeabi_i2d>
 80076ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076b0:	f7f8 ff12 	bl	80004d8 <__aeabi_dmul>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4640      	mov	r0, r8
 80076ba:	4649      	mov	r1, r9
 80076bc:	f7f8 fd54 	bl	8000168 <__aeabi_dsub>
 80076c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80076c4:	f807 6b01 	strb.w	r6, [r7], #1
 80076c8:	9e03      	ldr	r6, [sp, #12]
 80076ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80076ce:	1bbe      	subs	r6, r7, r6
 80076d0:	45b4      	cmp	ip, r6
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	d136      	bne.n	8007746 <_dtoa_r+0x6fe>
 80076d8:	f7f8 fd48 	bl	800016c <__adddf3>
 80076dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076e0:	4680      	mov	r8, r0
 80076e2:	4689      	mov	r9, r1
 80076e4:	f7f9 f988 	bl	80009f8 <__aeabi_dcmpgt>
 80076e8:	bb58      	cbnz	r0, 8007742 <_dtoa_r+0x6fa>
 80076ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f9 f959 	bl	80009a8 <__aeabi_dcmpeq>
 80076f6:	b108      	cbz	r0, 80076fc <_dtoa_r+0x6b4>
 80076f8:	07e3      	lsls	r3, r4, #31
 80076fa:	d422      	bmi.n	8007742 <_dtoa_r+0x6fa>
 80076fc:	4651      	mov	r1, sl
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 ff2e 	bl	8008560 <_Bfree>
 8007704:	2300      	movs	r3, #0
 8007706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007708:	703b      	strb	r3, [r7, #0]
 800770a:	f10b 0301 	add.w	r3, fp, #1
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007712:	2b00      	cmp	r3, #0
 8007714:	f43f ace6 	beq.w	80070e4 <_dtoa_r+0x9c>
 8007718:	601f      	str	r7, [r3, #0]
 800771a:	e4e3      	b.n	80070e4 <_dtoa_r+0x9c>
 800771c:	4627      	mov	r7, r4
 800771e:	463b      	mov	r3, r7
 8007720:	461f      	mov	r7, r3
 8007722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007726:	2a39      	cmp	r2, #57	; 0x39
 8007728:	d107      	bne.n	800773a <_dtoa_r+0x6f2>
 800772a:	9a03      	ldr	r2, [sp, #12]
 800772c:	429a      	cmp	r2, r3
 800772e:	d1f7      	bne.n	8007720 <_dtoa_r+0x6d8>
 8007730:	2230      	movs	r2, #48	; 0x30
 8007732:	9903      	ldr	r1, [sp, #12]
 8007734:	f108 0801 	add.w	r8, r8, #1
 8007738:	700a      	strb	r2, [r1, #0]
 800773a:	781a      	ldrb	r2, [r3, #0]
 800773c:	3201      	adds	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e79e      	b.n	8007680 <_dtoa_r+0x638>
 8007742:	46d8      	mov	r8, fp
 8007744:	e7eb      	b.n	800771e <_dtoa_r+0x6d6>
 8007746:	2200      	movs	r2, #0
 8007748:	4b6d      	ldr	r3, [pc, #436]	; (8007900 <_dtoa_r+0x8b8>)
 800774a:	f7f8 fec5 	bl	80004d8 <__aeabi_dmul>
 800774e:	2200      	movs	r2, #0
 8007750:	2300      	movs	r3, #0
 8007752:	4680      	mov	r8, r0
 8007754:	4689      	mov	r9, r1
 8007756:	f7f9 f927 	bl	80009a8 <__aeabi_dcmpeq>
 800775a:	2800      	cmp	r0, #0
 800775c:	d09b      	beq.n	8007696 <_dtoa_r+0x64e>
 800775e:	e7cd      	b.n	80076fc <_dtoa_r+0x6b4>
 8007760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007762:	2a00      	cmp	r2, #0
 8007764:	f000 80c4 	beq.w	80078f0 <_dtoa_r+0x8a8>
 8007768:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800776a:	2a01      	cmp	r2, #1
 800776c:	f300 80a8 	bgt.w	80078c0 <_dtoa_r+0x878>
 8007770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007772:	2a00      	cmp	r2, #0
 8007774:	f000 80a0 	beq.w	80078b8 <_dtoa_r+0x870>
 8007778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800777c:	464f      	mov	r7, r9
 800777e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007782:	2101      	movs	r1, #1
 8007784:	441a      	add	r2, r3
 8007786:	4628      	mov	r0, r5
 8007788:	4499      	add	r9, r3
 800778a:	9209      	str	r2, [sp, #36]	; 0x24
 800778c:	f000 ffe8 	bl	8008760 <__i2b>
 8007790:	4606      	mov	r6, r0
 8007792:	b15f      	cbz	r7, 80077ac <_dtoa_r+0x764>
 8007794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	dd08      	ble.n	80077ac <_dtoa_r+0x764>
 800779a:	42bb      	cmp	r3, r7
 800779c:	bfa8      	it	ge
 800779e:	463b      	movge	r3, r7
 80077a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a2:	eba9 0903 	sub.w	r9, r9, r3
 80077a6:	1aff      	subs	r7, r7, r3
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	9309      	str	r3, [sp, #36]	; 0x24
 80077ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ae:	b1f3      	cbz	r3, 80077ee <_dtoa_r+0x7a6>
 80077b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80a0 	beq.w	80078f8 <_dtoa_r+0x8b0>
 80077b8:	2c00      	cmp	r4, #0
 80077ba:	dd10      	ble.n	80077de <_dtoa_r+0x796>
 80077bc:	4631      	mov	r1, r6
 80077be:	4622      	mov	r2, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f001 f88b 	bl	80088dc <__pow5mult>
 80077c6:	4652      	mov	r2, sl
 80077c8:	4601      	mov	r1, r0
 80077ca:	4606      	mov	r6, r0
 80077cc:	4628      	mov	r0, r5
 80077ce:	f000 ffdd 	bl	800878c <__multiply>
 80077d2:	4680      	mov	r8, r0
 80077d4:	4651      	mov	r1, sl
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 fec2 	bl	8008560 <_Bfree>
 80077dc:	46c2      	mov	sl, r8
 80077de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e0:	1b1a      	subs	r2, r3, r4
 80077e2:	d004      	beq.n	80077ee <_dtoa_r+0x7a6>
 80077e4:	4651      	mov	r1, sl
 80077e6:	4628      	mov	r0, r5
 80077e8:	f001 f878 	bl	80088dc <__pow5mult>
 80077ec:	4682      	mov	sl, r0
 80077ee:	2101      	movs	r1, #1
 80077f0:	4628      	mov	r0, r5
 80077f2:	f000 ffb5 	bl	8008760 <__i2b>
 80077f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077f8:	4604      	mov	r4, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f340 8082 	ble.w	8007904 <_dtoa_r+0x8bc>
 8007800:	461a      	mov	r2, r3
 8007802:	4601      	mov	r1, r0
 8007804:	4628      	mov	r0, r5
 8007806:	f001 f869 	bl	80088dc <__pow5mult>
 800780a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780c:	4604      	mov	r4, r0
 800780e:	2b01      	cmp	r3, #1
 8007810:	dd7b      	ble.n	800790a <_dtoa_r+0x8c2>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800781c:	6918      	ldr	r0, [r3, #16]
 800781e:	f000 ff51 	bl	80086c4 <__hi0bits>
 8007822:	f1c0 0020 	rsb	r0, r0, #32
 8007826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007828:	4418      	add	r0, r3
 800782a:	f010 001f 	ands.w	r0, r0, #31
 800782e:	f000 8092 	beq.w	8007956 <_dtoa_r+0x90e>
 8007832:	f1c0 0320 	rsb	r3, r0, #32
 8007836:	2b04      	cmp	r3, #4
 8007838:	f340 8085 	ble.w	8007946 <_dtoa_r+0x8fe>
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	f1c0 001c 	rsb	r0, r0, #28
 8007842:	4403      	add	r3, r0
 8007844:	4481      	add	r9, r0
 8007846:	4407      	add	r7, r0
 8007848:	9309      	str	r3, [sp, #36]	; 0x24
 800784a:	f1b9 0f00 	cmp.w	r9, #0
 800784e:	dd05      	ble.n	800785c <_dtoa_r+0x814>
 8007850:	4651      	mov	r1, sl
 8007852:	464a      	mov	r2, r9
 8007854:	4628      	mov	r0, r5
 8007856:	f001 f89b 	bl	8008990 <__lshift>
 800785a:	4682      	mov	sl, r0
 800785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	dd05      	ble.n	800786e <_dtoa_r+0x826>
 8007862:	4621      	mov	r1, r4
 8007864:	461a      	mov	r2, r3
 8007866:	4628      	mov	r0, r5
 8007868:	f001 f892 	bl	8008990 <__lshift>
 800786c:	4604      	mov	r4, r0
 800786e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d072      	beq.n	800795a <_dtoa_r+0x912>
 8007874:	4621      	mov	r1, r4
 8007876:	4650      	mov	r0, sl
 8007878:	f001 f8f6 	bl	8008a68 <__mcmp>
 800787c:	2800      	cmp	r0, #0
 800787e:	da6c      	bge.n	800795a <_dtoa_r+0x912>
 8007880:	2300      	movs	r3, #0
 8007882:	4651      	mov	r1, sl
 8007884:	220a      	movs	r2, #10
 8007886:	4628      	mov	r0, r5
 8007888:	f000 fe8c 	bl	80085a4 <__multadd>
 800788c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788e:	4682      	mov	sl, r0
 8007890:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 81ac 	beq.w	8007bf2 <_dtoa_r+0xbaa>
 800789a:	2300      	movs	r3, #0
 800789c:	4631      	mov	r1, r6
 800789e:	220a      	movs	r2, #10
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 fe7f 	bl	80085a4 <__multadd>
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	4606      	mov	r6, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f300 8093 	bgt.w	80079d6 <_dtoa_r+0x98e>
 80078b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	dc59      	bgt.n	800796a <_dtoa_r+0x922>
 80078b6:	e08e      	b.n	80079d6 <_dtoa_r+0x98e>
 80078b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078be:	e75d      	b.n	800777c <_dtoa_r+0x734>
 80078c0:	9b08      	ldr	r3, [sp, #32]
 80078c2:	1e5c      	subs	r4, r3, #1
 80078c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	bfbf      	itttt	lt
 80078ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80078ce:	1ae3      	sublt	r3, r4, r3
 80078d0:	18d2      	addlt	r2, r2, r3
 80078d2:	bfa8      	it	ge
 80078d4:	1b1c      	subge	r4, r3, r4
 80078d6:	9b08      	ldr	r3, [sp, #32]
 80078d8:	bfbe      	ittt	lt
 80078da:	940a      	strlt	r4, [sp, #40]	; 0x28
 80078dc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80078de:	2400      	movlt	r4, #0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	bfb5      	itete	lt
 80078e4:	eba9 0703 	sublt.w	r7, r9, r3
 80078e8:	464f      	movge	r7, r9
 80078ea:	2300      	movlt	r3, #0
 80078ec:	9b08      	ldrge	r3, [sp, #32]
 80078ee:	e747      	b.n	8007780 <_dtoa_r+0x738>
 80078f0:	464f      	mov	r7, r9
 80078f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078f6:	e74c      	b.n	8007792 <_dtoa_r+0x74a>
 80078f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078fa:	e773      	b.n	80077e4 <_dtoa_r+0x79c>
 80078fc:	3fe00000 	.word	0x3fe00000
 8007900:	40240000 	.word	0x40240000
 8007904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007906:	2b01      	cmp	r3, #1
 8007908:	dc18      	bgt.n	800793c <_dtoa_r+0x8f4>
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	b9b3      	cbnz	r3, 800793c <_dtoa_r+0x8f4>
 800790e:	9b05      	ldr	r3, [sp, #20]
 8007910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007914:	b993      	cbnz	r3, 800793c <_dtoa_r+0x8f4>
 8007916:	9b05      	ldr	r3, [sp, #20]
 8007918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800791c:	0d1b      	lsrs	r3, r3, #20
 800791e:	051b      	lsls	r3, r3, #20
 8007920:	b17b      	cbz	r3, 8007942 <_dtoa_r+0x8fa>
 8007922:	f04f 0801 	mov.w	r8, #1
 8007926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007928:	f109 0901 	add.w	r9, r9, #1
 800792c:	3301      	adds	r3, #1
 800792e:	9309      	str	r3, [sp, #36]	; 0x24
 8007930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007932:	2b00      	cmp	r3, #0
 8007934:	f47f af6f 	bne.w	8007816 <_dtoa_r+0x7ce>
 8007938:	2001      	movs	r0, #1
 800793a:	e774      	b.n	8007826 <_dtoa_r+0x7de>
 800793c:	f04f 0800 	mov.w	r8, #0
 8007940:	e7f6      	b.n	8007930 <_dtoa_r+0x8e8>
 8007942:	4698      	mov	r8, r3
 8007944:	e7f4      	b.n	8007930 <_dtoa_r+0x8e8>
 8007946:	d080      	beq.n	800784a <_dtoa_r+0x802>
 8007948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800794a:	331c      	adds	r3, #28
 800794c:	441a      	add	r2, r3
 800794e:	4499      	add	r9, r3
 8007950:	441f      	add	r7, r3
 8007952:	9209      	str	r2, [sp, #36]	; 0x24
 8007954:	e779      	b.n	800784a <_dtoa_r+0x802>
 8007956:	4603      	mov	r3, r0
 8007958:	e7f6      	b.n	8007948 <_dtoa_r+0x900>
 800795a:	9b08      	ldr	r3, [sp, #32]
 800795c:	2b00      	cmp	r3, #0
 800795e:	dc34      	bgt.n	80079ca <_dtoa_r+0x982>
 8007960:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007962:	2b02      	cmp	r3, #2
 8007964:	dd31      	ble.n	80079ca <_dtoa_r+0x982>
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	9306      	str	r3, [sp, #24]
 800796a:	9b06      	ldr	r3, [sp, #24]
 800796c:	b963      	cbnz	r3, 8007988 <_dtoa_r+0x940>
 800796e:	4621      	mov	r1, r4
 8007970:	2205      	movs	r2, #5
 8007972:	4628      	mov	r0, r5
 8007974:	f000 fe16 	bl	80085a4 <__multadd>
 8007978:	4601      	mov	r1, r0
 800797a:	4604      	mov	r4, r0
 800797c:	4650      	mov	r0, sl
 800797e:	f001 f873 	bl	8008a68 <__mcmp>
 8007982:	2800      	cmp	r0, #0
 8007984:	f73f adbf 	bgt.w	8007506 <_dtoa_r+0x4be>
 8007988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800798a:	9f03      	ldr	r7, [sp, #12]
 800798c:	ea6f 0b03 	mvn.w	fp, r3
 8007990:	f04f 0800 	mov.w	r8, #0
 8007994:	4621      	mov	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f000 fde2 	bl	8008560 <_Bfree>
 800799c:	2e00      	cmp	r6, #0
 800799e:	f43f aead 	beq.w	80076fc <_dtoa_r+0x6b4>
 80079a2:	f1b8 0f00 	cmp.w	r8, #0
 80079a6:	d005      	beq.n	80079b4 <_dtoa_r+0x96c>
 80079a8:	45b0      	cmp	r8, r6
 80079aa:	d003      	beq.n	80079b4 <_dtoa_r+0x96c>
 80079ac:	4641      	mov	r1, r8
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 fdd6 	bl	8008560 <_Bfree>
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fdd2 	bl	8008560 <_Bfree>
 80079bc:	e69e      	b.n	80076fc <_dtoa_r+0x6b4>
 80079be:	2400      	movs	r4, #0
 80079c0:	4626      	mov	r6, r4
 80079c2:	e7e1      	b.n	8007988 <_dtoa_r+0x940>
 80079c4:	46c3      	mov	fp, r8
 80079c6:	4626      	mov	r6, r4
 80079c8:	e59d      	b.n	8007506 <_dtoa_r+0x4be>
 80079ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80c8 	beq.w	8007b62 <_dtoa_r+0xb1a>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	9306      	str	r3, [sp, #24]
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	dd05      	ble.n	80079e6 <_dtoa_r+0x99e>
 80079da:	4631      	mov	r1, r6
 80079dc:	463a      	mov	r2, r7
 80079de:	4628      	mov	r0, r5
 80079e0:	f000 ffd6 	bl	8008990 <__lshift>
 80079e4:	4606      	mov	r6, r0
 80079e6:	f1b8 0f00 	cmp.w	r8, #0
 80079ea:	d05b      	beq.n	8007aa4 <_dtoa_r+0xa5c>
 80079ec:	4628      	mov	r0, r5
 80079ee:	6871      	ldr	r1, [r6, #4]
 80079f0:	f000 fd76 	bl	80084e0 <_Balloc>
 80079f4:	4607      	mov	r7, r0
 80079f6:	b928      	cbnz	r0, 8007a04 <_dtoa_r+0x9bc>
 80079f8:	4602      	mov	r2, r0
 80079fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079fe:	4b81      	ldr	r3, [pc, #516]	; (8007c04 <_dtoa_r+0xbbc>)
 8007a00:	f7ff bb36 	b.w	8007070 <_dtoa_r+0x28>
 8007a04:	6932      	ldr	r2, [r6, #16]
 8007a06:	f106 010c 	add.w	r1, r6, #12
 8007a0a:	3202      	adds	r2, #2
 8007a0c:	0092      	lsls	r2, r2, #2
 8007a0e:	300c      	adds	r0, #12
 8007a10:	f7ff fa77 	bl	8006f02 <memcpy>
 8007a14:	2201      	movs	r2, #1
 8007a16:	4639      	mov	r1, r7
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 ffb9 	bl	8008990 <__lshift>
 8007a1e:	46b0      	mov	r8, r6
 8007a20:	4606      	mov	r6, r0
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	9a03      	ldr	r2, [sp, #12]
 8007a26:	3301      	adds	r3, #1
 8007a28:	9308      	str	r3, [sp, #32]
 8007a2a:	9b06      	ldr	r3, [sp, #24]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a30:	9b04      	ldr	r3, [sp, #16]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	930a      	str	r3, [sp, #40]	; 0x28
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	4650      	mov	r0, sl
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	f7ff fa77 	bl	8006f34 <quorem>
 8007a46:	4641      	mov	r1, r8
 8007a48:	9006      	str	r0, [sp, #24]
 8007a4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a4e:	4650      	mov	r0, sl
 8007a50:	f001 f80a 	bl	8008a68 <__mcmp>
 8007a54:	4632      	mov	r2, r6
 8007a56:	9009      	str	r0, [sp, #36]	; 0x24
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f001 f820 	bl	8008aa0 <__mdiff>
 8007a60:	68c2      	ldr	r2, [r0, #12]
 8007a62:	4607      	mov	r7, r0
 8007a64:	bb02      	cbnz	r2, 8007aa8 <_dtoa_r+0xa60>
 8007a66:	4601      	mov	r1, r0
 8007a68:	4650      	mov	r0, sl
 8007a6a:	f000 fffd 	bl	8008a68 <__mcmp>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	4639      	mov	r1, r7
 8007a72:	4628      	mov	r0, r5
 8007a74:	920c      	str	r2, [sp, #48]	; 0x30
 8007a76:	f000 fd73 	bl	8008560 <_Bfree>
 8007a7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a7e:	9f08      	ldr	r7, [sp, #32]
 8007a80:	ea43 0102 	orr.w	r1, r3, r2
 8007a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a86:	4319      	orrs	r1, r3
 8007a88:	d110      	bne.n	8007aac <_dtoa_r+0xa64>
 8007a8a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a8e:	d029      	beq.n	8007ae4 <_dtoa_r+0xa9c>
 8007a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dd02      	ble.n	8007a9c <_dtoa_r+0xa54>
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	f883 9000 	strb.w	r9, [r3]
 8007aa2:	e777      	b.n	8007994 <_dtoa_r+0x94c>
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	e7ba      	b.n	8007a1e <_dtoa_r+0x9d6>
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	e7e1      	b.n	8007a70 <_dtoa_r+0xa28>
 8007aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db04      	blt.n	8007abc <_dtoa_r+0xa74>
 8007ab2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	d120      	bne.n	8007afe <_dtoa_r+0xab6>
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	dded      	ble.n	8007a9c <_dtoa_r+0xa54>
 8007ac0:	4651      	mov	r1, sl
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 ff63 	bl	8008990 <__lshift>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4682      	mov	sl, r0
 8007ace:	f000 ffcb 	bl	8008a68 <__mcmp>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	dc03      	bgt.n	8007ade <_dtoa_r+0xa96>
 8007ad6:	d1e1      	bne.n	8007a9c <_dtoa_r+0xa54>
 8007ad8:	f019 0f01 	tst.w	r9, #1
 8007adc:	d0de      	beq.n	8007a9c <_dtoa_r+0xa54>
 8007ade:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ae2:	d1d8      	bne.n	8007a96 <_dtoa_r+0xa4e>
 8007ae4:	2339      	movs	r3, #57	; 0x39
 8007ae6:	9a04      	ldr	r2, [sp, #16]
 8007ae8:	7013      	strb	r3, [r2, #0]
 8007aea:	463b      	mov	r3, r7
 8007aec:	461f      	mov	r7, r3
 8007aee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	2a39      	cmp	r2, #57	; 0x39
 8007af6:	d06b      	beq.n	8007bd0 <_dtoa_r+0xb88>
 8007af8:	3201      	adds	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
 8007afc:	e74a      	b.n	8007994 <_dtoa_r+0x94c>
 8007afe:	2a00      	cmp	r2, #0
 8007b00:	dd07      	ble.n	8007b12 <_dtoa_r+0xaca>
 8007b02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b06:	d0ed      	beq.n	8007ae4 <_dtoa_r+0xa9c>
 8007b08:	9a04      	ldr	r2, [sp, #16]
 8007b0a:	f109 0301 	add.w	r3, r9, #1
 8007b0e:	7013      	strb	r3, [r2, #0]
 8007b10:	e740      	b.n	8007994 <_dtoa_r+0x94c>
 8007b12:	9b08      	ldr	r3, [sp, #32]
 8007b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b16:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d042      	beq.n	8007ba4 <_dtoa_r+0xb5c>
 8007b1e:	4651      	mov	r1, sl
 8007b20:	2300      	movs	r3, #0
 8007b22:	220a      	movs	r2, #10
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 fd3d 	bl	80085a4 <__multadd>
 8007b2a:	45b0      	cmp	r8, r6
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	f04f 020a 	mov.w	r2, #10
 8007b36:	4641      	mov	r1, r8
 8007b38:	4628      	mov	r0, r5
 8007b3a:	d107      	bne.n	8007b4c <_dtoa_r+0xb04>
 8007b3c:	f000 fd32 	bl	80085a4 <__multadd>
 8007b40:	4680      	mov	r8, r0
 8007b42:	4606      	mov	r6, r0
 8007b44:	9b08      	ldr	r3, [sp, #32]
 8007b46:	3301      	adds	r3, #1
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	e775      	b.n	8007a38 <_dtoa_r+0x9f0>
 8007b4c:	f000 fd2a 	bl	80085a4 <__multadd>
 8007b50:	4631      	mov	r1, r6
 8007b52:	4680      	mov	r8, r0
 8007b54:	2300      	movs	r3, #0
 8007b56:	220a      	movs	r2, #10
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 fd23 	bl	80085a4 <__multadd>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	e7f0      	b.n	8007b44 <_dtoa_r+0xafc>
 8007b62:	9b08      	ldr	r3, [sp, #32]
 8007b64:	9306      	str	r3, [sp, #24]
 8007b66:	9f03      	ldr	r7, [sp, #12]
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	f7ff f9e2 	bl	8006f34 <quorem>
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b76:	f807 9b01 	strb.w	r9, [r7], #1
 8007b7a:	1afa      	subs	r2, r7, r3
 8007b7c:	9b06      	ldr	r3, [sp, #24]
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	dd07      	ble.n	8007b92 <_dtoa_r+0xb4a>
 8007b82:	4651      	mov	r1, sl
 8007b84:	2300      	movs	r3, #0
 8007b86:	220a      	movs	r2, #10
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fd0b 	bl	80085a4 <__multadd>
 8007b8e:	4682      	mov	sl, r0
 8007b90:	e7ea      	b.n	8007b68 <_dtoa_r+0xb20>
 8007b92:	9b06      	ldr	r3, [sp, #24]
 8007b94:	f04f 0800 	mov.w	r8, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfcc      	ite	gt
 8007b9c:	461f      	movgt	r7, r3
 8007b9e:	2701      	movle	r7, #1
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	441f      	add	r7, r3
 8007ba4:	4651      	mov	r1, sl
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 fef1 	bl	8008990 <__lshift>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	f000 ff59 	bl	8008a68 <__mcmp>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	dc97      	bgt.n	8007aea <_dtoa_r+0xaa2>
 8007bba:	d102      	bne.n	8007bc2 <_dtoa_r+0xb7a>
 8007bbc:	f019 0f01 	tst.w	r9, #1
 8007bc0:	d193      	bne.n	8007aea <_dtoa_r+0xaa2>
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	461f      	mov	r7, r3
 8007bc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bca:	2a30      	cmp	r2, #48	; 0x30
 8007bcc:	d0fa      	beq.n	8007bc4 <_dtoa_r+0xb7c>
 8007bce:	e6e1      	b.n	8007994 <_dtoa_r+0x94c>
 8007bd0:	9a03      	ldr	r2, [sp, #12]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d18a      	bne.n	8007aec <_dtoa_r+0xaa4>
 8007bd6:	2331      	movs	r3, #49	; 0x31
 8007bd8:	f10b 0b01 	add.w	fp, fp, #1
 8007bdc:	e797      	b.n	8007b0e <_dtoa_r+0xac6>
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <_dtoa_r+0xbc0>)
 8007be0:	f7ff ba9f 	b.w	8007122 <_dtoa_r+0xda>
 8007be4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f47f aa77 	bne.w	80070da <_dtoa_r+0x92>
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <_dtoa_r+0xbc4>)
 8007bee:	f7ff ba98 	b.w	8007122 <_dtoa_r+0xda>
 8007bf2:	9b06      	ldr	r3, [sp, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dcb6      	bgt.n	8007b66 <_dtoa_r+0xb1e>
 8007bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	f73f aeb5 	bgt.w	800796a <_dtoa_r+0x922>
 8007c00:	e7b1      	b.n	8007b66 <_dtoa_r+0xb1e>
 8007c02:	bf00      	nop
 8007c04:	0800ae25 	.word	0x0800ae25
 8007c08:	0800ad78 	.word	0x0800ad78
 8007c0c:	0800ada9 	.word	0x0800ada9

08007c10 <_free_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d040      	beq.n	8007c9a <_free_r+0x8a>
 8007c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1c:	1f0c      	subs	r4, r1, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfb8      	it	lt
 8007c22:	18e4      	addlt	r4, r4, r3
 8007c24:	f000 fc50 	bl	80084c8 <__malloc_lock>
 8007c28:	4a1c      	ldr	r2, [pc, #112]	; (8007c9c <_free_r+0x8c>)
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	b933      	cbnz	r3, 8007c3c <_free_r+0x2c>
 8007c2e:	6063      	str	r3, [r4, #4]
 8007c30:	6014      	str	r4, [r2, #0]
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c38:	f000 bc4c 	b.w	80084d4 <__malloc_unlock>
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	d908      	bls.n	8007c52 <_free_r+0x42>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf01      	itttt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	1809      	addeq	r1, r1, r0
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	e7ed      	b.n	8007c2e <_free_r+0x1e>
 8007c52:	461a      	mov	r2, r3
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b10b      	cbz	r3, 8007c5c <_free_r+0x4c>
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d9fa      	bls.n	8007c52 <_free_r+0x42>
 8007c5c:	6811      	ldr	r1, [r2, #0]
 8007c5e:	1850      	adds	r0, r2, r1
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d10b      	bne.n	8007c7c <_free_r+0x6c>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	4401      	add	r1, r0
 8007c68:	1850      	adds	r0, r2, r1
 8007c6a:	4283      	cmp	r3, r0
 8007c6c:	6011      	str	r1, [r2, #0]
 8007c6e:	d1e0      	bne.n	8007c32 <_free_r+0x22>
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4408      	add	r0, r1
 8007c76:	6010      	str	r0, [r2, #0]
 8007c78:	6053      	str	r3, [r2, #4]
 8007c7a:	e7da      	b.n	8007c32 <_free_r+0x22>
 8007c7c:	d902      	bls.n	8007c84 <_free_r+0x74>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	e7d6      	b.n	8007c32 <_free_r+0x22>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	bf01      	itttt	eq
 8007c8c:	6819      	ldreq	r1, [r3, #0]
 8007c8e:	685b      	ldreq	r3, [r3, #4]
 8007c90:	1809      	addeq	r1, r1, r0
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	6063      	str	r3, [r4, #4]
 8007c96:	6054      	str	r4, [r2, #4]
 8007c98:	e7cb      	b.n	8007c32 <_free_r+0x22>
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000500 	.word	0x20000500

08007ca0 <rshift>:
 8007ca0:	6903      	ldr	r3, [r0, #16]
 8007ca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ca6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007caa:	f100 0414 	add.w	r4, r0, #20
 8007cae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007cb2:	dd46      	ble.n	8007d42 <rshift+0xa2>
 8007cb4:	f011 011f 	ands.w	r1, r1, #31
 8007cb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cc0:	d10c      	bne.n	8007cdc <rshift+0x3c>
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f100 0710 	add.w	r7, r0, #16
 8007cc8:	42b1      	cmp	r1, r6
 8007cca:	d335      	bcc.n	8007d38 <rshift+0x98>
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	1eea      	subs	r2, r5, #3
 8007cd2:	4296      	cmp	r6, r2
 8007cd4:	bf38      	it	cc
 8007cd6:	2300      	movcc	r3, #0
 8007cd8:	4423      	add	r3, r4
 8007cda:	e015      	b.n	8007d08 <rshift+0x68>
 8007cdc:	46a1      	mov	r9, r4
 8007cde:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ce2:	f1c1 0820 	rsb	r8, r1, #32
 8007ce6:	40cf      	lsrs	r7, r1
 8007ce8:	f105 0e04 	add.w	lr, r5, #4
 8007cec:	4576      	cmp	r6, lr
 8007cee:	46f4      	mov	ip, lr
 8007cf0:	d816      	bhi.n	8007d20 <rshift+0x80>
 8007cf2:	1a9a      	subs	r2, r3, r2
 8007cf4:	0092      	lsls	r2, r2, #2
 8007cf6:	3a04      	subs	r2, #4
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	42ae      	cmp	r6, r5
 8007cfc:	bf38      	it	cc
 8007cfe:	2200      	movcc	r2, #0
 8007d00:	18a3      	adds	r3, r4, r2
 8007d02:	50a7      	str	r7, [r4, r2]
 8007d04:	b107      	cbz	r7, 8007d08 <rshift+0x68>
 8007d06:	3304      	adds	r3, #4
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	eba3 0204 	sub.w	r2, r3, r4
 8007d0e:	bf08      	it	eq
 8007d10:	2300      	moveq	r3, #0
 8007d12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d16:	6102      	str	r2, [r0, #16]
 8007d18:	bf08      	it	eq
 8007d1a:	6143      	streq	r3, [r0, #20]
 8007d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d20:	f8dc c000 	ldr.w	ip, [ip]
 8007d24:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d28:	ea4c 0707 	orr.w	r7, ip, r7
 8007d2c:	f849 7b04 	str.w	r7, [r9], #4
 8007d30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d34:	40cf      	lsrs	r7, r1
 8007d36:	e7d9      	b.n	8007cec <rshift+0x4c>
 8007d38:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d40:	e7c2      	b.n	8007cc8 <rshift+0x28>
 8007d42:	4623      	mov	r3, r4
 8007d44:	e7e0      	b.n	8007d08 <rshift+0x68>

08007d46 <__hexdig_fun>:
 8007d46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	d802      	bhi.n	8007d54 <__hexdig_fun+0xe>
 8007d4e:	3820      	subs	r0, #32
 8007d50:	b2c0      	uxtb	r0, r0
 8007d52:	4770      	bx	lr
 8007d54:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d58:	2b05      	cmp	r3, #5
 8007d5a:	d801      	bhi.n	8007d60 <__hexdig_fun+0x1a>
 8007d5c:	3847      	subs	r0, #71	; 0x47
 8007d5e:	e7f7      	b.n	8007d50 <__hexdig_fun+0xa>
 8007d60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d64:	2b05      	cmp	r3, #5
 8007d66:	d801      	bhi.n	8007d6c <__hexdig_fun+0x26>
 8007d68:	3827      	subs	r0, #39	; 0x27
 8007d6a:	e7f1      	b.n	8007d50 <__hexdig_fun+0xa>
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	4770      	bx	lr

08007d70 <__gethex>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4681      	mov	r9, r0
 8007d76:	468a      	mov	sl, r1
 8007d78:	4617      	mov	r7, r2
 8007d7a:	680a      	ldr	r2, [r1, #0]
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	f102 0b02 	add.w	fp, r2, #2
 8007d82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007d86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d8a:	9302      	str	r3, [sp, #8]
 8007d8c:	32fe      	adds	r2, #254	; 0xfe
 8007d8e:	eb02 030b 	add.w	r3, r2, fp
 8007d92:	46d8      	mov	r8, fp
 8007d94:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	2830      	cmp	r0, #48	; 0x30
 8007d9c:	d0f7      	beq.n	8007d8e <__gethex+0x1e>
 8007d9e:	f7ff ffd2 	bl	8007d46 <__hexdig_fun>
 8007da2:	4604      	mov	r4, r0
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d138      	bne.n	8007e1a <__gethex+0xaa>
 8007da8:	2201      	movs	r2, #1
 8007daa:	4640      	mov	r0, r8
 8007dac:	49a7      	ldr	r1, [pc, #668]	; (800804c <__gethex+0x2dc>)
 8007dae:	f7ff f810 	bl	8006dd2 <strncmp>
 8007db2:	4606      	mov	r6, r0
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d169      	bne.n	8007e8c <__gethex+0x11c>
 8007db8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007dbc:	465d      	mov	r5, fp
 8007dbe:	f7ff ffc2 	bl	8007d46 <__hexdig_fun>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d064      	beq.n	8007e90 <__gethex+0x120>
 8007dc6:	465a      	mov	r2, fp
 8007dc8:	7810      	ldrb	r0, [r2, #0]
 8007dca:	4690      	mov	r8, r2
 8007dcc:	2830      	cmp	r0, #48	; 0x30
 8007dce:	f102 0201 	add.w	r2, r2, #1
 8007dd2:	d0f9      	beq.n	8007dc8 <__gethex+0x58>
 8007dd4:	f7ff ffb7 	bl	8007d46 <__hexdig_fun>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	fab0 f480 	clz	r4, r0
 8007dde:	465e      	mov	r6, fp
 8007de0:	0964      	lsrs	r4, r4, #5
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	4642      	mov	r2, r8
 8007de6:	4615      	mov	r5, r2
 8007de8:	7828      	ldrb	r0, [r5, #0]
 8007dea:	3201      	adds	r2, #1
 8007dec:	f7ff ffab 	bl	8007d46 <__hexdig_fun>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d1f8      	bne.n	8007de6 <__gethex+0x76>
 8007df4:	2201      	movs	r2, #1
 8007df6:	4628      	mov	r0, r5
 8007df8:	4994      	ldr	r1, [pc, #592]	; (800804c <__gethex+0x2dc>)
 8007dfa:	f7fe ffea 	bl	8006dd2 <strncmp>
 8007dfe:	b978      	cbnz	r0, 8007e20 <__gethex+0xb0>
 8007e00:	b946      	cbnz	r6, 8007e14 <__gethex+0xa4>
 8007e02:	1c6e      	adds	r6, r5, #1
 8007e04:	4632      	mov	r2, r6
 8007e06:	4615      	mov	r5, r2
 8007e08:	7828      	ldrb	r0, [r5, #0]
 8007e0a:	3201      	adds	r2, #1
 8007e0c:	f7ff ff9b 	bl	8007d46 <__hexdig_fun>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d1f8      	bne.n	8007e06 <__gethex+0x96>
 8007e14:	1b73      	subs	r3, r6, r5
 8007e16:	009e      	lsls	r6, r3, #2
 8007e18:	e004      	b.n	8007e24 <__gethex+0xb4>
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	4626      	mov	r6, r4
 8007e1e:	e7e1      	b.n	8007de4 <__gethex+0x74>
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	d1f7      	bne.n	8007e14 <__gethex+0xa4>
 8007e24:	782b      	ldrb	r3, [r5, #0]
 8007e26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e2a:	2b50      	cmp	r3, #80	; 0x50
 8007e2c:	d13d      	bne.n	8007eaa <__gethex+0x13a>
 8007e2e:	786b      	ldrb	r3, [r5, #1]
 8007e30:	2b2b      	cmp	r3, #43	; 0x2b
 8007e32:	d02f      	beq.n	8007e94 <__gethex+0x124>
 8007e34:	2b2d      	cmp	r3, #45	; 0x2d
 8007e36:	d031      	beq.n	8007e9c <__gethex+0x12c>
 8007e38:	f04f 0b00 	mov.w	fp, #0
 8007e3c:	1c69      	adds	r1, r5, #1
 8007e3e:	7808      	ldrb	r0, [r1, #0]
 8007e40:	f7ff ff81 	bl	8007d46 <__hexdig_fun>
 8007e44:	1e42      	subs	r2, r0, #1
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	2a18      	cmp	r2, #24
 8007e4a:	d82e      	bhi.n	8007eaa <__gethex+0x13a>
 8007e4c:	f1a0 0210 	sub.w	r2, r0, #16
 8007e50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e54:	f7ff ff77 	bl	8007d46 <__hexdig_fun>
 8007e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8007e5c:	fa5f fc8c 	uxtb.w	ip, ip
 8007e60:	f1bc 0f18 	cmp.w	ip, #24
 8007e64:	d91d      	bls.n	8007ea2 <__gethex+0x132>
 8007e66:	f1bb 0f00 	cmp.w	fp, #0
 8007e6a:	d000      	beq.n	8007e6e <__gethex+0xfe>
 8007e6c:	4252      	negs	r2, r2
 8007e6e:	4416      	add	r6, r2
 8007e70:	f8ca 1000 	str.w	r1, [sl]
 8007e74:	b1dc      	cbz	r4, 8007eae <__gethex+0x13e>
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf14      	ite	ne
 8007e7c:	f04f 0800 	movne.w	r8, #0
 8007e80:	f04f 0806 	moveq.w	r8, #6
 8007e84:	4640      	mov	r0, r8
 8007e86:	b005      	add	sp, #20
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	4645      	mov	r5, r8
 8007e8e:	4626      	mov	r6, r4
 8007e90:	2401      	movs	r4, #1
 8007e92:	e7c7      	b.n	8007e24 <__gethex+0xb4>
 8007e94:	f04f 0b00 	mov.w	fp, #0
 8007e98:	1ca9      	adds	r1, r5, #2
 8007e9a:	e7d0      	b.n	8007e3e <__gethex+0xce>
 8007e9c:	f04f 0b01 	mov.w	fp, #1
 8007ea0:	e7fa      	b.n	8007e98 <__gethex+0x128>
 8007ea2:	230a      	movs	r3, #10
 8007ea4:	fb03 0002 	mla	r0, r3, r2, r0
 8007ea8:	e7d0      	b.n	8007e4c <__gethex+0xdc>
 8007eaa:	4629      	mov	r1, r5
 8007eac:	e7e0      	b.n	8007e70 <__gethex+0x100>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	eba5 0308 	sub.w	r3, r5, r8
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	2b07      	cmp	r3, #7
 8007eb8:	dc0a      	bgt.n	8007ed0 <__gethex+0x160>
 8007eba:	4648      	mov	r0, r9
 8007ebc:	f000 fb10 	bl	80084e0 <_Balloc>
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	b940      	cbnz	r0, 8007ed6 <__gethex+0x166>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	21e4      	movs	r1, #228	; 0xe4
 8007ec8:	4b61      	ldr	r3, [pc, #388]	; (8008050 <__gethex+0x2e0>)
 8007eca:	4862      	ldr	r0, [pc, #392]	; (8008054 <__gethex+0x2e4>)
 8007ecc:	f001 fa5e 	bl	800938c <__assert_func>
 8007ed0:	3101      	adds	r1, #1
 8007ed2:	105b      	asrs	r3, r3, #1
 8007ed4:	e7ef      	b.n	8007eb6 <__gethex+0x146>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	469b      	mov	fp, r3
 8007eda:	f100 0a14 	add.w	sl, r0, #20
 8007ede:	f8cd a004 	str.w	sl, [sp, #4]
 8007ee2:	45a8      	cmp	r8, r5
 8007ee4:	d344      	bcc.n	8007f70 <__gethex+0x200>
 8007ee6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007eea:	4658      	mov	r0, fp
 8007eec:	f848 bb04 	str.w	fp, [r8], #4
 8007ef0:	eba8 080a 	sub.w	r8, r8, sl
 8007ef4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007ef8:	6122      	str	r2, [r4, #16]
 8007efa:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007efe:	f000 fbe1 	bl	80086c4 <__hi0bits>
 8007f02:	683d      	ldr	r5, [r7, #0]
 8007f04:	eba8 0800 	sub.w	r8, r8, r0
 8007f08:	45a8      	cmp	r8, r5
 8007f0a:	dd59      	ble.n	8007fc0 <__gethex+0x250>
 8007f0c:	eba8 0805 	sub.w	r8, r8, r5
 8007f10:	4641      	mov	r1, r8
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 ff5f 	bl	8008dd6 <__any_on>
 8007f18:	4683      	mov	fp, r0
 8007f1a:	b1b8      	cbz	r0, 8007f4c <__gethex+0x1dc>
 8007f1c:	f04f 0b01 	mov.w	fp, #1
 8007f20:	f108 33ff 	add.w	r3, r8, #4294967295
 8007f24:	1159      	asrs	r1, r3, #5
 8007f26:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007f2a:	f003 021f 	and.w	r2, r3, #31
 8007f2e:	fa0b f202 	lsl.w	r2, fp, r2
 8007f32:	420a      	tst	r2, r1
 8007f34:	d00a      	beq.n	8007f4c <__gethex+0x1dc>
 8007f36:	455b      	cmp	r3, fp
 8007f38:	dd06      	ble.n	8007f48 <__gethex+0x1d8>
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f1a8 0102 	sub.w	r1, r8, #2
 8007f40:	f000 ff49 	bl	8008dd6 <__any_on>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d138      	bne.n	8007fba <__gethex+0x24a>
 8007f48:	f04f 0b02 	mov.w	fp, #2
 8007f4c:	4641      	mov	r1, r8
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff fea6 	bl	8007ca0 <rshift>
 8007f54:	4446      	add	r6, r8
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	42b3      	cmp	r3, r6
 8007f5a:	da41      	bge.n	8007fe0 <__gethex+0x270>
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f000 fafe 	bl	8008560 <_Bfree>
 8007f64:	2300      	movs	r3, #0
 8007f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f68:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	e789      	b.n	8007e84 <__gethex+0x114>
 8007f70:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007f74:	2a2e      	cmp	r2, #46	; 0x2e
 8007f76:	d014      	beq.n	8007fa2 <__gethex+0x232>
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d106      	bne.n	8007f8a <__gethex+0x21a>
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	f843 bb04 	str.w	fp, [r3], #4
 8007f82:	f04f 0b00 	mov.w	fp, #0
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	465b      	mov	r3, fp
 8007f8a:	7828      	ldrb	r0, [r5, #0]
 8007f8c:	9303      	str	r3, [sp, #12]
 8007f8e:	f7ff feda 	bl	8007d46 <__hexdig_fun>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	f000 000f 	and.w	r0, r0, #15
 8007f98:	4098      	lsls	r0, r3
 8007f9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	e79f      	b.n	8007ee2 <__gethex+0x172>
 8007fa2:	45a8      	cmp	r8, r5
 8007fa4:	d8e8      	bhi.n	8007f78 <__gethex+0x208>
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	4628      	mov	r0, r5
 8007faa:	4928      	ldr	r1, [pc, #160]	; (800804c <__gethex+0x2dc>)
 8007fac:	9303      	str	r3, [sp, #12]
 8007fae:	f7fe ff10 	bl	8006dd2 <strncmp>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d1df      	bne.n	8007f78 <__gethex+0x208>
 8007fb8:	e793      	b.n	8007ee2 <__gethex+0x172>
 8007fba:	f04f 0b03 	mov.w	fp, #3
 8007fbe:	e7c5      	b.n	8007f4c <__gethex+0x1dc>
 8007fc0:	da0b      	bge.n	8007fda <__gethex+0x26a>
 8007fc2:	eba5 0808 	sub.w	r8, r5, r8
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4642      	mov	r2, r8
 8007fca:	4648      	mov	r0, r9
 8007fcc:	f000 fce0 	bl	8008990 <__lshift>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	eba6 0608 	sub.w	r6, r6, r8
 8007fd6:	f100 0a14 	add.w	sl, r0, #20
 8007fda:	f04f 0b00 	mov.w	fp, #0
 8007fde:	e7ba      	b.n	8007f56 <__gethex+0x1e6>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	42b3      	cmp	r3, r6
 8007fe4:	dd74      	ble.n	80080d0 <__gethex+0x360>
 8007fe6:	1b9e      	subs	r6, r3, r6
 8007fe8:	42b5      	cmp	r5, r6
 8007fea:	dc35      	bgt.n	8008058 <__gethex+0x2e8>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d023      	beq.n	800803a <__gethex+0x2ca>
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d025      	beq.n	8008042 <__gethex+0x2d2>
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d115      	bne.n	8008026 <__gethex+0x2b6>
 8007ffa:	42b5      	cmp	r5, r6
 8007ffc:	d113      	bne.n	8008026 <__gethex+0x2b6>
 8007ffe:	2d01      	cmp	r5, #1
 8008000:	d10b      	bne.n	800801a <__gethex+0x2aa>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	9a02      	ldr	r2, [sp, #8]
 8008006:	f04f 0862 	mov.w	r8, #98	; 0x62
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	2301      	movs	r3, #1
 800800e:	6123      	str	r3, [r4, #16]
 8008010:	f8ca 3000 	str.w	r3, [sl]
 8008014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008016:	601c      	str	r4, [r3, #0]
 8008018:	e734      	b.n	8007e84 <__gethex+0x114>
 800801a:	4620      	mov	r0, r4
 800801c:	1e69      	subs	r1, r5, #1
 800801e:	f000 feda 	bl	8008dd6 <__any_on>
 8008022:	2800      	cmp	r0, #0
 8008024:	d1ed      	bne.n	8008002 <__gethex+0x292>
 8008026:	4621      	mov	r1, r4
 8008028:	4648      	mov	r0, r9
 800802a:	f000 fa99 	bl	8008560 <_Bfree>
 800802e:	2300      	movs	r3, #0
 8008030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008032:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e724      	b.n	8007e84 <__gethex+0x114>
 800803a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f2      	bne.n	8008026 <__gethex+0x2b6>
 8008040:	e7df      	b.n	8008002 <__gethex+0x292>
 8008042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1dc      	bne.n	8008002 <__gethex+0x292>
 8008048:	e7ed      	b.n	8008026 <__gethex+0x2b6>
 800804a:	bf00      	nop
 800804c:	0800ad16 	.word	0x0800ad16
 8008050:	0800ae25 	.word	0x0800ae25
 8008054:	0800ae36 	.word	0x0800ae36
 8008058:	f106 38ff 	add.w	r8, r6, #4294967295
 800805c:	f1bb 0f00 	cmp.w	fp, #0
 8008060:	d133      	bne.n	80080ca <__gethex+0x35a>
 8008062:	f1b8 0f00 	cmp.w	r8, #0
 8008066:	d004      	beq.n	8008072 <__gethex+0x302>
 8008068:	4641      	mov	r1, r8
 800806a:	4620      	mov	r0, r4
 800806c:	f000 feb3 	bl	8008dd6 <__any_on>
 8008070:	4683      	mov	fp, r0
 8008072:	2301      	movs	r3, #1
 8008074:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008078:	f008 081f 	and.w	r8, r8, #31
 800807c:	fa03 f308 	lsl.w	r3, r3, r8
 8008080:	f04f 0802 	mov.w	r8, #2
 8008084:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008088:	4631      	mov	r1, r6
 800808a:	4213      	tst	r3, r2
 800808c:	4620      	mov	r0, r4
 800808e:	bf18      	it	ne
 8008090:	f04b 0b02 	orrne.w	fp, fp, #2
 8008094:	1bad      	subs	r5, r5, r6
 8008096:	f7ff fe03 	bl	8007ca0 <rshift>
 800809a:	687e      	ldr	r6, [r7, #4]
 800809c:	f1bb 0f00 	cmp.w	fp, #0
 80080a0:	d04a      	beq.n	8008138 <__gethex+0x3c8>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d016      	beq.n	80080d6 <__gethex+0x366>
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d018      	beq.n	80080de <__gethex+0x36e>
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d109      	bne.n	80080c4 <__gethex+0x354>
 80080b0:	f01b 0f02 	tst.w	fp, #2
 80080b4:	d006      	beq.n	80080c4 <__gethex+0x354>
 80080b6:	f8da 3000 	ldr.w	r3, [sl]
 80080ba:	ea4b 0b03 	orr.w	fp, fp, r3
 80080be:	f01b 0f01 	tst.w	fp, #1
 80080c2:	d10f      	bne.n	80080e4 <__gethex+0x374>
 80080c4:	f048 0810 	orr.w	r8, r8, #16
 80080c8:	e036      	b.n	8008138 <__gethex+0x3c8>
 80080ca:	f04f 0b01 	mov.w	fp, #1
 80080ce:	e7d0      	b.n	8008072 <__gethex+0x302>
 80080d0:	f04f 0801 	mov.w	r8, #1
 80080d4:	e7e2      	b.n	800809c <__gethex+0x32c>
 80080d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080d8:	f1c3 0301 	rsb	r3, r3, #1
 80080dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0ef      	beq.n	80080c4 <__gethex+0x354>
 80080e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080e8:	f104 0214 	add.w	r2, r4, #20
 80080ec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	2300      	movs	r3, #0
 80080f4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80080f8:	4694      	mov	ip, r2
 80080fa:	f852 1b04 	ldr.w	r1, [r2], #4
 80080fe:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008102:	d01e      	beq.n	8008142 <__gethex+0x3d2>
 8008104:	3101      	adds	r1, #1
 8008106:	f8cc 1000 	str.w	r1, [ip]
 800810a:	f1b8 0f02 	cmp.w	r8, #2
 800810e:	f104 0214 	add.w	r2, r4, #20
 8008112:	d13d      	bne.n	8008190 <__gethex+0x420>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	3b01      	subs	r3, #1
 8008118:	42ab      	cmp	r3, r5
 800811a:	d10b      	bne.n	8008134 <__gethex+0x3c4>
 800811c:	2301      	movs	r3, #1
 800811e:	1169      	asrs	r1, r5, #5
 8008120:	f005 051f 	and.w	r5, r5, #31
 8008124:	fa03 f505 	lsl.w	r5, r3, r5
 8008128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800812c:	421d      	tst	r5, r3
 800812e:	bf18      	it	ne
 8008130:	f04f 0801 	movne.w	r8, #1
 8008134:	f048 0820 	orr.w	r8, r8, #32
 8008138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800813a:	601c      	str	r4, [r3, #0]
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	601e      	str	r6, [r3, #0]
 8008140:	e6a0      	b.n	8007e84 <__gethex+0x114>
 8008142:	4290      	cmp	r0, r2
 8008144:	f842 3c04 	str.w	r3, [r2, #-4]
 8008148:	d8d6      	bhi.n	80080f8 <__gethex+0x388>
 800814a:	68a2      	ldr	r2, [r4, #8]
 800814c:	4593      	cmp	fp, r2
 800814e:	db17      	blt.n	8008180 <__gethex+0x410>
 8008150:	6861      	ldr	r1, [r4, #4]
 8008152:	4648      	mov	r0, r9
 8008154:	3101      	adds	r1, #1
 8008156:	f000 f9c3 	bl	80084e0 <_Balloc>
 800815a:	4682      	mov	sl, r0
 800815c:	b918      	cbnz	r0, 8008166 <__gethex+0x3f6>
 800815e:	4602      	mov	r2, r0
 8008160:	2184      	movs	r1, #132	; 0x84
 8008162:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <__gethex+0x45c>)
 8008164:	e6b1      	b.n	8007eca <__gethex+0x15a>
 8008166:	6922      	ldr	r2, [r4, #16]
 8008168:	f104 010c 	add.w	r1, r4, #12
 800816c:	3202      	adds	r2, #2
 800816e:	0092      	lsls	r2, r2, #2
 8008170:	300c      	adds	r0, #12
 8008172:	f7fe fec6 	bl	8006f02 <memcpy>
 8008176:	4621      	mov	r1, r4
 8008178:	4648      	mov	r0, r9
 800817a:	f000 f9f1 	bl	8008560 <_Bfree>
 800817e:	4654      	mov	r4, sl
 8008180:	6922      	ldr	r2, [r4, #16]
 8008182:	1c51      	adds	r1, r2, #1
 8008184:	6121      	str	r1, [r4, #16]
 8008186:	2101      	movs	r1, #1
 8008188:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800818c:	6151      	str	r1, [r2, #20]
 800818e:	e7bc      	b.n	800810a <__gethex+0x39a>
 8008190:	6921      	ldr	r1, [r4, #16]
 8008192:	4559      	cmp	r1, fp
 8008194:	dd0b      	ble.n	80081ae <__gethex+0x43e>
 8008196:	2101      	movs	r1, #1
 8008198:	4620      	mov	r0, r4
 800819a:	f7ff fd81 	bl	8007ca0 <rshift>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	3601      	adds	r6, #1
 80081a2:	42b3      	cmp	r3, r6
 80081a4:	f6ff aeda 	blt.w	8007f5c <__gethex+0x1ec>
 80081a8:	f04f 0801 	mov.w	r8, #1
 80081ac:	e7c2      	b.n	8008134 <__gethex+0x3c4>
 80081ae:	f015 051f 	ands.w	r5, r5, #31
 80081b2:	d0f9      	beq.n	80081a8 <__gethex+0x438>
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	f1c5 0520 	rsb	r5, r5, #32
 80081ba:	441a      	add	r2, r3
 80081bc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80081c0:	f000 fa80 	bl	80086c4 <__hi0bits>
 80081c4:	42a8      	cmp	r0, r5
 80081c6:	dbe6      	blt.n	8008196 <__gethex+0x426>
 80081c8:	e7ee      	b.n	80081a8 <__gethex+0x438>
 80081ca:	bf00      	nop
 80081cc:	0800ae25 	.word	0x0800ae25

080081d0 <L_shift>:
 80081d0:	f1c2 0208 	rsb	r2, r2, #8
 80081d4:	0092      	lsls	r2, r2, #2
 80081d6:	b570      	push	{r4, r5, r6, lr}
 80081d8:	f1c2 0620 	rsb	r6, r2, #32
 80081dc:	6843      	ldr	r3, [r0, #4]
 80081de:	6804      	ldr	r4, [r0, #0]
 80081e0:	fa03 f506 	lsl.w	r5, r3, r6
 80081e4:	432c      	orrs	r4, r5
 80081e6:	40d3      	lsrs	r3, r2
 80081e8:	6004      	str	r4, [r0, #0]
 80081ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80081ee:	4288      	cmp	r0, r1
 80081f0:	d3f4      	bcc.n	80081dc <L_shift+0xc>
 80081f2:	bd70      	pop	{r4, r5, r6, pc}

080081f4 <__match>:
 80081f4:	b530      	push	{r4, r5, lr}
 80081f6:	6803      	ldr	r3, [r0, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081fe:	b914      	cbnz	r4, 8008206 <__match+0x12>
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	2001      	movs	r0, #1
 8008204:	bd30      	pop	{r4, r5, pc}
 8008206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800820a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800820e:	2d19      	cmp	r5, #25
 8008210:	bf98      	it	ls
 8008212:	3220      	addls	r2, #32
 8008214:	42a2      	cmp	r2, r4
 8008216:	d0f0      	beq.n	80081fa <__match+0x6>
 8008218:	2000      	movs	r0, #0
 800821a:	e7f3      	b.n	8008204 <__match+0x10>

0800821c <__hexnan>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	2500      	movs	r5, #0
 8008222:	680b      	ldr	r3, [r1, #0]
 8008224:	4682      	mov	sl, r0
 8008226:	115e      	asrs	r6, r3, #5
 8008228:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800822c:	f013 031f 	ands.w	r3, r3, #31
 8008230:	bf18      	it	ne
 8008232:	3604      	addne	r6, #4
 8008234:	1f37      	subs	r7, r6, #4
 8008236:	4690      	mov	r8, r2
 8008238:	46b9      	mov	r9, r7
 800823a:	463c      	mov	r4, r7
 800823c:	46ab      	mov	fp, r5
 800823e:	b087      	sub	sp, #28
 8008240:	6801      	ldr	r1, [r0, #0]
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	f846 5c04 	str.w	r5, [r6, #-4]
 8008248:	9502      	str	r5, [sp, #8]
 800824a:	784a      	ldrb	r2, [r1, #1]
 800824c:	1c4b      	adds	r3, r1, #1
 800824e:	9303      	str	r3, [sp, #12]
 8008250:	b342      	cbz	r2, 80082a4 <__hexnan+0x88>
 8008252:	4610      	mov	r0, r2
 8008254:	9105      	str	r1, [sp, #20]
 8008256:	9204      	str	r2, [sp, #16]
 8008258:	f7ff fd75 	bl	8007d46 <__hexdig_fun>
 800825c:	2800      	cmp	r0, #0
 800825e:	d14f      	bne.n	8008300 <__hexnan+0xe4>
 8008260:	9a04      	ldr	r2, [sp, #16]
 8008262:	9905      	ldr	r1, [sp, #20]
 8008264:	2a20      	cmp	r2, #32
 8008266:	d818      	bhi.n	800829a <__hexnan+0x7e>
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	459b      	cmp	fp, r3
 800826c:	dd13      	ble.n	8008296 <__hexnan+0x7a>
 800826e:	454c      	cmp	r4, r9
 8008270:	d206      	bcs.n	8008280 <__hexnan+0x64>
 8008272:	2d07      	cmp	r5, #7
 8008274:	dc04      	bgt.n	8008280 <__hexnan+0x64>
 8008276:	462a      	mov	r2, r5
 8008278:	4649      	mov	r1, r9
 800827a:	4620      	mov	r0, r4
 800827c:	f7ff ffa8 	bl	80081d0 <L_shift>
 8008280:	4544      	cmp	r4, r8
 8008282:	d950      	bls.n	8008326 <__hexnan+0x10a>
 8008284:	2300      	movs	r3, #0
 8008286:	f1a4 0904 	sub.w	r9, r4, #4
 800828a:	f844 3c04 	str.w	r3, [r4, #-4]
 800828e:	461d      	mov	r5, r3
 8008290:	464c      	mov	r4, r9
 8008292:	f8cd b008 	str.w	fp, [sp, #8]
 8008296:	9903      	ldr	r1, [sp, #12]
 8008298:	e7d7      	b.n	800824a <__hexnan+0x2e>
 800829a:	2a29      	cmp	r2, #41	; 0x29
 800829c:	d155      	bne.n	800834a <__hexnan+0x12e>
 800829e:	3102      	adds	r1, #2
 80082a0:	f8ca 1000 	str.w	r1, [sl]
 80082a4:	f1bb 0f00 	cmp.w	fp, #0
 80082a8:	d04f      	beq.n	800834a <__hexnan+0x12e>
 80082aa:	454c      	cmp	r4, r9
 80082ac:	d206      	bcs.n	80082bc <__hexnan+0xa0>
 80082ae:	2d07      	cmp	r5, #7
 80082b0:	dc04      	bgt.n	80082bc <__hexnan+0xa0>
 80082b2:	462a      	mov	r2, r5
 80082b4:	4649      	mov	r1, r9
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7ff ff8a 	bl	80081d0 <L_shift>
 80082bc:	4544      	cmp	r4, r8
 80082be:	d934      	bls.n	800832a <__hexnan+0x10e>
 80082c0:	4623      	mov	r3, r4
 80082c2:	f1a8 0204 	sub.w	r2, r8, #4
 80082c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80082ca:	429f      	cmp	r7, r3
 80082cc:	f842 1f04 	str.w	r1, [r2, #4]!
 80082d0:	d2f9      	bcs.n	80082c6 <__hexnan+0xaa>
 80082d2:	1b3b      	subs	r3, r7, r4
 80082d4:	f023 0303 	bic.w	r3, r3, #3
 80082d8:	3304      	adds	r3, #4
 80082da:	3e03      	subs	r6, #3
 80082dc:	3401      	adds	r4, #1
 80082de:	42a6      	cmp	r6, r4
 80082e0:	bf38      	it	cc
 80082e2:	2304      	movcc	r3, #4
 80082e4:	2200      	movs	r2, #0
 80082e6:	4443      	add	r3, r8
 80082e8:	f843 2b04 	str.w	r2, [r3], #4
 80082ec:	429f      	cmp	r7, r3
 80082ee:	d2fb      	bcs.n	80082e8 <__hexnan+0xcc>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	b91b      	cbnz	r3, 80082fc <__hexnan+0xe0>
 80082f4:	4547      	cmp	r7, r8
 80082f6:	d126      	bne.n	8008346 <__hexnan+0x12a>
 80082f8:	2301      	movs	r3, #1
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	2005      	movs	r0, #5
 80082fe:	e025      	b.n	800834c <__hexnan+0x130>
 8008300:	3501      	adds	r5, #1
 8008302:	2d08      	cmp	r5, #8
 8008304:	f10b 0b01 	add.w	fp, fp, #1
 8008308:	dd06      	ble.n	8008318 <__hexnan+0xfc>
 800830a:	4544      	cmp	r4, r8
 800830c:	d9c3      	bls.n	8008296 <__hexnan+0x7a>
 800830e:	2300      	movs	r3, #0
 8008310:	2501      	movs	r5, #1
 8008312:	f844 3c04 	str.w	r3, [r4, #-4]
 8008316:	3c04      	subs	r4, #4
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	f000 000f 	and.w	r0, r0, #15
 800831e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008322:	6020      	str	r0, [r4, #0]
 8008324:	e7b7      	b.n	8008296 <__hexnan+0x7a>
 8008326:	2508      	movs	r5, #8
 8008328:	e7b5      	b.n	8008296 <__hexnan+0x7a>
 800832a:	9b01      	ldr	r3, [sp, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0df      	beq.n	80082f0 <__hexnan+0xd4>
 8008330:	f04f 32ff 	mov.w	r2, #4294967295
 8008334:	f1c3 0320 	rsb	r3, r3, #32
 8008338:	40da      	lsrs	r2, r3
 800833a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800833e:	4013      	ands	r3, r2
 8008340:	f846 3c04 	str.w	r3, [r6, #-4]
 8008344:	e7d4      	b.n	80082f0 <__hexnan+0xd4>
 8008346:	3f04      	subs	r7, #4
 8008348:	e7d2      	b.n	80082f0 <__hexnan+0xd4>
 800834a:	2004      	movs	r0, #4
 800834c:	b007      	add	sp, #28
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008354 <malloc>:
 8008354:	4b02      	ldr	r3, [pc, #8]	; (8008360 <malloc+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f000 b823 	b.w	80083a4 <_malloc_r>
 800835e:	bf00      	nop
 8008360:	200001d0 	.word	0x200001d0

08008364 <sbrk_aligned>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4e0e      	ldr	r6, [pc, #56]	; (80083a0 <sbrk_aligned+0x3c>)
 8008368:	460c      	mov	r4, r1
 800836a:	6831      	ldr	r1, [r6, #0]
 800836c:	4605      	mov	r5, r0
 800836e:	b911      	cbnz	r1, 8008376 <sbrk_aligned+0x12>
 8008370:	f000 fffc 	bl	800936c <_sbrk_r>
 8008374:	6030      	str	r0, [r6, #0]
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f000 fff7 	bl	800936c <_sbrk_r>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d00a      	beq.n	8008398 <sbrk_aligned+0x34>
 8008382:	1cc4      	adds	r4, r0, #3
 8008384:	f024 0403 	bic.w	r4, r4, #3
 8008388:	42a0      	cmp	r0, r4
 800838a:	d007      	beq.n	800839c <sbrk_aligned+0x38>
 800838c:	1a21      	subs	r1, r4, r0
 800838e:	4628      	mov	r0, r5
 8008390:	f000 ffec 	bl	800936c <_sbrk_r>
 8008394:	3001      	adds	r0, #1
 8008396:	d101      	bne.n	800839c <sbrk_aligned+0x38>
 8008398:	f04f 34ff 	mov.w	r4, #4294967295
 800839c:	4620      	mov	r0, r4
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	20000504 	.word	0x20000504

080083a4 <_malloc_r>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	1ccd      	adds	r5, r1, #3
 80083aa:	f025 0503 	bic.w	r5, r5, #3
 80083ae:	3508      	adds	r5, #8
 80083b0:	2d0c      	cmp	r5, #12
 80083b2:	bf38      	it	cc
 80083b4:	250c      	movcc	r5, #12
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	4607      	mov	r7, r0
 80083ba:	db01      	blt.n	80083c0 <_malloc_r+0x1c>
 80083bc:	42a9      	cmp	r1, r5
 80083be:	d905      	bls.n	80083cc <_malloc_r+0x28>
 80083c0:	230c      	movs	r3, #12
 80083c2:	2600      	movs	r6, #0
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	4630      	mov	r0, r6
 80083c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084a0 <_malloc_r+0xfc>
 80083d0:	f000 f87a 	bl	80084c8 <__malloc_lock>
 80083d4:	f8d8 3000 	ldr.w	r3, [r8]
 80083d8:	461c      	mov	r4, r3
 80083da:	bb5c      	cbnz	r4, 8008434 <_malloc_r+0x90>
 80083dc:	4629      	mov	r1, r5
 80083de:	4638      	mov	r0, r7
 80083e0:	f7ff ffc0 	bl	8008364 <sbrk_aligned>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	4604      	mov	r4, r0
 80083e8:	d155      	bne.n	8008496 <_malloc_r+0xf2>
 80083ea:	f8d8 4000 	ldr.w	r4, [r8]
 80083ee:	4626      	mov	r6, r4
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	d145      	bne.n	8008480 <_malloc_r+0xdc>
 80083f4:	2c00      	cmp	r4, #0
 80083f6:	d048      	beq.n	800848a <_malloc_r+0xe6>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	4631      	mov	r1, r6
 80083fc:	4638      	mov	r0, r7
 80083fe:	eb04 0903 	add.w	r9, r4, r3
 8008402:	f000 ffb3 	bl	800936c <_sbrk_r>
 8008406:	4581      	cmp	r9, r0
 8008408:	d13f      	bne.n	800848a <_malloc_r+0xe6>
 800840a:	6821      	ldr	r1, [r4, #0]
 800840c:	4638      	mov	r0, r7
 800840e:	1a6d      	subs	r5, r5, r1
 8008410:	4629      	mov	r1, r5
 8008412:	f7ff ffa7 	bl	8008364 <sbrk_aligned>
 8008416:	3001      	adds	r0, #1
 8008418:	d037      	beq.n	800848a <_malloc_r+0xe6>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	442b      	add	r3, r5
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	f8d8 3000 	ldr.w	r3, [r8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d038      	beq.n	800849a <_malloc_r+0xf6>
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	42a2      	cmp	r2, r4
 800842c:	d12b      	bne.n	8008486 <_malloc_r+0xe2>
 800842e:	2200      	movs	r2, #0
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	e00f      	b.n	8008454 <_malloc_r+0xb0>
 8008434:	6822      	ldr	r2, [r4, #0]
 8008436:	1b52      	subs	r2, r2, r5
 8008438:	d41f      	bmi.n	800847a <_malloc_r+0xd6>
 800843a:	2a0b      	cmp	r2, #11
 800843c:	d917      	bls.n	800846e <_malloc_r+0xca>
 800843e:	1961      	adds	r1, r4, r5
 8008440:	42a3      	cmp	r3, r4
 8008442:	6025      	str	r5, [r4, #0]
 8008444:	bf18      	it	ne
 8008446:	6059      	strne	r1, [r3, #4]
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	bf08      	it	eq
 800844c:	f8c8 1000 	streq.w	r1, [r8]
 8008450:	5162      	str	r2, [r4, r5]
 8008452:	604b      	str	r3, [r1, #4]
 8008454:	4638      	mov	r0, r7
 8008456:	f104 060b 	add.w	r6, r4, #11
 800845a:	f000 f83b 	bl	80084d4 <__malloc_unlock>
 800845e:	f026 0607 	bic.w	r6, r6, #7
 8008462:	1d23      	adds	r3, r4, #4
 8008464:	1af2      	subs	r2, r6, r3
 8008466:	d0ae      	beq.n	80083c6 <_malloc_r+0x22>
 8008468:	1b9b      	subs	r3, r3, r6
 800846a:	50a3      	str	r3, [r4, r2]
 800846c:	e7ab      	b.n	80083c6 <_malloc_r+0x22>
 800846e:	42a3      	cmp	r3, r4
 8008470:	6862      	ldr	r2, [r4, #4]
 8008472:	d1dd      	bne.n	8008430 <_malloc_r+0x8c>
 8008474:	f8c8 2000 	str.w	r2, [r8]
 8008478:	e7ec      	b.n	8008454 <_malloc_r+0xb0>
 800847a:	4623      	mov	r3, r4
 800847c:	6864      	ldr	r4, [r4, #4]
 800847e:	e7ac      	b.n	80083da <_malloc_r+0x36>
 8008480:	4634      	mov	r4, r6
 8008482:	6876      	ldr	r6, [r6, #4]
 8008484:	e7b4      	b.n	80083f0 <_malloc_r+0x4c>
 8008486:	4613      	mov	r3, r2
 8008488:	e7cc      	b.n	8008424 <_malloc_r+0x80>
 800848a:	230c      	movs	r3, #12
 800848c:	4638      	mov	r0, r7
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	f000 f820 	bl	80084d4 <__malloc_unlock>
 8008494:	e797      	b.n	80083c6 <_malloc_r+0x22>
 8008496:	6025      	str	r5, [r4, #0]
 8008498:	e7dc      	b.n	8008454 <_malloc_r+0xb0>
 800849a:	605b      	str	r3, [r3, #4]
 800849c:	deff      	udf	#255	; 0xff
 800849e:	bf00      	nop
 80084a0:	20000500 	.word	0x20000500

080084a4 <__ascii_mbtowc>:
 80084a4:	b082      	sub	sp, #8
 80084a6:	b901      	cbnz	r1, 80084aa <__ascii_mbtowc+0x6>
 80084a8:	a901      	add	r1, sp, #4
 80084aa:	b142      	cbz	r2, 80084be <__ascii_mbtowc+0x1a>
 80084ac:	b14b      	cbz	r3, 80084c2 <__ascii_mbtowc+0x1e>
 80084ae:	7813      	ldrb	r3, [r2, #0]
 80084b0:	600b      	str	r3, [r1, #0]
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	1e10      	subs	r0, r2, #0
 80084b6:	bf18      	it	ne
 80084b8:	2001      	movne	r0, #1
 80084ba:	b002      	add	sp, #8
 80084bc:	4770      	bx	lr
 80084be:	4610      	mov	r0, r2
 80084c0:	e7fb      	b.n	80084ba <__ascii_mbtowc+0x16>
 80084c2:	f06f 0001 	mvn.w	r0, #1
 80084c6:	e7f8      	b.n	80084ba <__ascii_mbtowc+0x16>

080084c8 <__malloc_lock>:
 80084c8:	4801      	ldr	r0, [pc, #4]	; (80084d0 <__malloc_lock+0x8>)
 80084ca:	f7fe bd0a 	b.w	8006ee2 <__retarget_lock_acquire_recursive>
 80084ce:	bf00      	nop
 80084d0:	200004fc 	.word	0x200004fc

080084d4 <__malloc_unlock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__malloc_unlock+0x8>)
 80084d6:	f7fe bd05 	b.w	8006ee4 <__retarget_lock_release_recursive>
 80084da:	bf00      	nop
 80084dc:	200004fc 	.word	0x200004fc

080084e0 <_Balloc>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	69c6      	ldr	r6, [r0, #28]
 80084e4:	4604      	mov	r4, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	b976      	cbnz	r6, 8008508 <_Balloc+0x28>
 80084ea:	2010      	movs	r0, #16
 80084ec:	f7ff ff32 	bl	8008354 <malloc>
 80084f0:	4602      	mov	r2, r0
 80084f2:	61e0      	str	r0, [r4, #28]
 80084f4:	b920      	cbnz	r0, 8008500 <_Balloc+0x20>
 80084f6:	216b      	movs	r1, #107	; 0x6b
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <_Balloc+0x78>)
 80084fa:	4818      	ldr	r0, [pc, #96]	; (800855c <_Balloc+0x7c>)
 80084fc:	f000 ff46 	bl	800938c <__assert_func>
 8008500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008504:	6006      	str	r6, [r0, #0]
 8008506:	60c6      	str	r6, [r0, #12]
 8008508:	69e6      	ldr	r6, [r4, #28]
 800850a:	68f3      	ldr	r3, [r6, #12]
 800850c:	b183      	cbz	r3, 8008530 <_Balloc+0x50>
 800850e:	69e3      	ldr	r3, [r4, #28]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008516:	b9b8      	cbnz	r0, 8008548 <_Balloc+0x68>
 8008518:	2101      	movs	r1, #1
 800851a:	fa01 f605 	lsl.w	r6, r1, r5
 800851e:	1d72      	adds	r2, r6, #5
 8008520:	4620      	mov	r0, r4
 8008522:	0092      	lsls	r2, r2, #2
 8008524:	f000 ff50 	bl	80093c8 <_calloc_r>
 8008528:	b160      	cbz	r0, 8008544 <_Balloc+0x64>
 800852a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800852e:	e00e      	b.n	800854e <_Balloc+0x6e>
 8008530:	2221      	movs	r2, #33	; 0x21
 8008532:	2104      	movs	r1, #4
 8008534:	4620      	mov	r0, r4
 8008536:	f000 ff47 	bl	80093c8 <_calloc_r>
 800853a:	69e3      	ldr	r3, [r4, #28]
 800853c:	60f0      	str	r0, [r6, #12]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e4      	bne.n	800850e <_Balloc+0x2e>
 8008544:	2000      	movs	r0, #0
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	6802      	ldr	r2, [r0, #0]
 800854a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800854e:	2300      	movs	r3, #0
 8008550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008554:	e7f7      	b.n	8008546 <_Balloc+0x66>
 8008556:	bf00      	nop
 8008558:	0800adb6 	.word	0x0800adb6
 800855c:	0800ae96 	.word	0x0800ae96

08008560 <_Bfree>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	69c6      	ldr	r6, [r0, #28]
 8008564:	4605      	mov	r5, r0
 8008566:	460c      	mov	r4, r1
 8008568:	b976      	cbnz	r6, 8008588 <_Bfree+0x28>
 800856a:	2010      	movs	r0, #16
 800856c:	f7ff fef2 	bl	8008354 <malloc>
 8008570:	4602      	mov	r2, r0
 8008572:	61e8      	str	r0, [r5, #28]
 8008574:	b920      	cbnz	r0, 8008580 <_Bfree+0x20>
 8008576:	218f      	movs	r1, #143	; 0x8f
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <_Bfree+0x3c>)
 800857a:	4809      	ldr	r0, [pc, #36]	; (80085a0 <_Bfree+0x40>)
 800857c:	f000 ff06 	bl	800938c <__assert_func>
 8008580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008584:	6006      	str	r6, [r0, #0]
 8008586:	60c6      	str	r6, [r0, #12]
 8008588:	b13c      	cbz	r4, 800859a <_Bfree+0x3a>
 800858a:	69eb      	ldr	r3, [r5, #28]
 800858c:	6862      	ldr	r2, [r4, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008594:	6021      	str	r1, [r4, #0]
 8008596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	0800adb6 	.word	0x0800adb6
 80085a0:	0800ae96 	.word	0x0800ae96

080085a4 <__multadd>:
 80085a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a8:	4607      	mov	r7, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	461e      	mov	r6, r3
 80085ae:	2000      	movs	r0, #0
 80085b0:	690d      	ldr	r5, [r1, #16]
 80085b2:	f101 0c14 	add.w	ip, r1, #20
 80085b6:	f8dc 3000 	ldr.w	r3, [ip]
 80085ba:	3001      	adds	r0, #1
 80085bc:	b299      	uxth	r1, r3
 80085be:	fb02 6101 	mla	r1, r2, r1, r6
 80085c2:	0c1e      	lsrs	r6, r3, #16
 80085c4:	0c0b      	lsrs	r3, r1, #16
 80085c6:	fb02 3306 	mla	r3, r2, r6, r3
 80085ca:	b289      	uxth	r1, r1
 80085cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085d0:	4285      	cmp	r5, r0
 80085d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085d6:	f84c 1b04 	str.w	r1, [ip], #4
 80085da:	dcec      	bgt.n	80085b6 <__multadd+0x12>
 80085dc:	b30e      	cbz	r6, 8008622 <__multadd+0x7e>
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	42ab      	cmp	r3, r5
 80085e2:	dc19      	bgt.n	8008618 <__multadd+0x74>
 80085e4:	6861      	ldr	r1, [r4, #4]
 80085e6:	4638      	mov	r0, r7
 80085e8:	3101      	adds	r1, #1
 80085ea:	f7ff ff79 	bl	80084e0 <_Balloc>
 80085ee:	4680      	mov	r8, r0
 80085f0:	b928      	cbnz	r0, 80085fe <__multadd+0x5a>
 80085f2:	4602      	mov	r2, r0
 80085f4:	21ba      	movs	r1, #186	; 0xba
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <__multadd+0x84>)
 80085f8:	480c      	ldr	r0, [pc, #48]	; (800862c <__multadd+0x88>)
 80085fa:	f000 fec7 	bl	800938c <__assert_func>
 80085fe:	6922      	ldr	r2, [r4, #16]
 8008600:	f104 010c 	add.w	r1, r4, #12
 8008604:	3202      	adds	r2, #2
 8008606:	0092      	lsls	r2, r2, #2
 8008608:	300c      	adds	r0, #12
 800860a:	f7fe fc7a 	bl	8006f02 <memcpy>
 800860e:	4621      	mov	r1, r4
 8008610:	4638      	mov	r0, r7
 8008612:	f7ff ffa5 	bl	8008560 <_Bfree>
 8008616:	4644      	mov	r4, r8
 8008618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800861c:	3501      	adds	r5, #1
 800861e:	615e      	str	r6, [r3, #20]
 8008620:	6125      	str	r5, [r4, #16]
 8008622:	4620      	mov	r0, r4
 8008624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008628:	0800ae25 	.word	0x0800ae25
 800862c:	0800ae96 	.word	0x0800ae96

08008630 <__s2b>:
 8008630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008634:	4615      	mov	r5, r2
 8008636:	2209      	movs	r2, #9
 8008638:	461f      	mov	r7, r3
 800863a:	3308      	adds	r3, #8
 800863c:	460c      	mov	r4, r1
 800863e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008642:	4606      	mov	r6, r0
 8008644:	2201      	movs	r2, #1
 8008646:	2100      	movs	r1, #0
 8008648:	429a      	cmp	r2, r3
 800864a:	db09      	blt.n	8008660 <__s2b+0x30>
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff ff47 	bl	80084e0 <_Balloc>
 8008652:	b940      	cbnz	r0, 8008666 <__s2b+0x36>
 8008654:	4602      	mov	r2, r0
 8008656:	21d3      	movs	r1, #211	; 0xd3
 8008658:	4b18      	ldr	r3, [pc, #96]	; (80086bc <__s2b+0x8c>)
 800865a:	4819      	ldr	r0, [pc, #100]	; (80086c0 <__s2b+0x90>)
 800865c:	f000 fe96 	bl	800938c <__assert_func>
 8008660:	0052      	lsls	r2, r2, #1
 8008662:	3101      	adds	r1, #1
 8008664:	e7f0      	b.n	8008648 <__s2b+0x18>
 8008666:	9b08      	ldr	r3, [sp, #32]
 8008668:	2d09      	cmp	r5, #9
 800866a:	6143      	str	r3, [r0, #20]
 800866c:	f04f 0301 	mov.w	r3, #1
 8008670:	6103      	str	r3, [r0, #16]
 8008672:	dd16      	ble.n	80086a2 <__s2b+0x72>
 8008674:	f104 0909 	add.w	r9, r4, #9
 8008678:	46c8      	mov	r8, r9
 800867a:	442c      	add	r4, r5
 800867c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008680:	4601      	mov	r1, r0
 8008682:	220a      	movs	r2, #10
 8008684:	4630      	mov	r0, r6
 8008686:	3b30      	subs	r3, #48	; 0x30
 8008688:	f7ff ff8c 	bl	80085a4 <__multadd>
 800868c:	45a0      	cmp	r8, r4
 800868e:	d1f5      	bne.n	800867c <__s2b+0x4c>
 8008690:	f1a5 0408 	sub.w	r4, r5, #8
 8008694:	444c      	add	r4, r9
 8008696:	1b2d      	subs	r5, r5, r4
 8008698:	1963      	adds	r3, r4, r5
 800869a:	42bb      	cmp	r3, r7
 800869c:	db04      	blt.n	80086a8 <__s2b+0x78>
 800869e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a2:	2509      	movs	r5, #9
 80086a4:	340a      	adds	r4, #10
 80086a6:	e7f6      	b.n	8008696 <__s2b+0x66>
 80086a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086ac:	4601      	mov	r1, r0
 80086ae:	220a      	movs	r2, #10
 80086b0:	4630      	mov	r0, r6
 80086b2:	3b30      	subs	r3, #48	; 0x30
 80086b4:	f7ff ff76 	bl	80085a4 <__multadd>
 80086b8:	e7ee      	b.n	8008698 <__s2b+0x68>
 80086ba:	bf00      	nop
 80086bc:	0800ae25 	.word	0x0800ae25
 80086c0:	0800ae96 	.word	0x0800ae96

080086c4 <__hi0bits>:
 80086c4:	0c02      	lsrs	r2, r0, #16
 80086c6:	0412      	lsls	r2, r2, #16
 80086c8:	4603      	mov	r3, r0
 80086ca:	b9ca      	cbnz	r2, 8008700 <__hi0bits+0x3c>
 80086cc:	0403      	lsls	r3, r0, #16
 80086ce:	2010      	movs	r0, #16
 80086d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80086d4:	bf04      	itt	eq
 80086d6:	021b      	lsleq	r3, r3, #8
 80086d8:	3008      	addeq	r0, #8
 80086da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80086de:	bf04      	itt	eq
 80086e0:	011b      	lsleq	r3, r3, #4
 80086e2:	3004      	addeq	r0, #4
 80086e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086e8:	bf04      	itt	eq
 80086ea:	009b      	lsleq	r3, r3, #2
 80086ec:	3002      	addeq	r0, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	db05      	blt.n	80086fe <__hi0bits+0x3a>
 80086f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80086f6:	f100 0001 	add.w	r0, r0, #1
 80086fa:	bf08      	it	eq
 80086fc:	2020      	moveq	r0, #32
 80086fe:	4770      	bx	lr
 8008700:	2000      	movs	r0, #0
 8008702:	e7e5      	b.n	80086d0 <__hi0bits+0xc>

08008704 <__lo0bits>:
 8008704:	6803      	ldr	r3, [r0, #0]
 8008706:	4602      	mov	r2, r0
 8008708:	f013 0007 	ands.w	r0, r3, #7
 800870c:	d00b      	beq.n	8008726 <__lo0bits+0x22>
 800870e:	07d9      	lsls	r1, r3, #31
 8008710:	d421      	bmi.n	8008756 <__lo0bits+0x52>
 8008712:	0798      	lsls	r0, r3, #30
 8008714:	bf49      	itett	mi
 8008716:	085b      	lsrmi	r3, r3, #1
 8008718:	089b      	lsrpl	r3, r3, #2
 800871a:	2001      	movmi	r0, #1
 800871c:	6013      	strmi	r3, [r2, #0]
 800871e:	bf5c      	itt	pl
 8008720:	2002      	movpl	r0, #2
 8008722:	6013      	strpl	r3, [r2, #0]
 8008724:	4770      	bx	lr
 8008726:	b299      	uxth	r1, r3
 8008728:	b909      	cbnz	r1, 800872e <__lo0bits+0x2a>
 800872a:	2010      	movs	r0, #16
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	b2d9      	uxtb	r1, r3
 8008730:	b909      	cbnz	r1, 8008736 <__lo0bits+0x32>
 8008732:	3008      	adds	r0, #8
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	0719      	lsls	r1, r3, #28
 8008738:	bf04      	itt	eq
 800873a:	091b      	lsreq	r3, r3, #4
 800873c:	3004      	addeq	r0, #4
 800873e:	0799      	lsls	r1, r3, #30
 8008740:	bf04      	itt	eq
 8008742:	089b      	lsreq	r3, r3, #2
 8008744:	3002      	addeq	r0, #2
 8008746:	07d9      	lsls	r1, r3, #31
 8008748:	d403      	bmi.n	8008752 <__lo0bits+0x4e>
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	f100 0001 	add.w	r0, r0, #1
 8008750:	d003      	beq.n	800875a <__lo0bits+0x56>
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	4770      	bx	lr
 8008756:	2000      	movs	r0, #0
 8008758:	4770      	bx	lr
 800875a:	2020      	movs	r0, #32
 800875c:	4770      	bx	lr
	...

08008760 <__i2b>:
 8008760:	b510      	push	{r4, lr}
 8008762:	460c      	mov	r4, r1
 8008764:	2101      	movs	r1, #1
 8008766:	f7ff febb 	bl	80084e0 <_Balloc>
 800876a:	4602      	mov	r2, r0
 800876c:	b928      	cbnz	r0, 800877a <__i2b+0x1a>
 800876e:	f240 1145 	movw	r1, #325	; 0x145
 8008772:	4b04      	ldr	r3, [pc, #16]	; (8008784 <__i2b+0x24>)
 8008774:	4804      	ldr	r0, [pc, #16]	; (8008788 <__i2b+0x28>)
 8008776:	f000 fe09 	bl	800938c <__assert_func>
 800877a:	2301      	movs	r3, #1
 800877c:	6144      	str	r4, [r0, #20]
 800877e:	6103      	str	r3, [r0, #16]
 8008780:	bd10      	pop	{r4, pc}
 8008782:	bf00      	nop
 8008784:	0800ae25 	.word	0x0800ae25
 8008788:	0800ae96 	.word	0x0800ae96

0800878c <__multiply>:
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	4691      	mov	r9, r2
 8008792:	690a      	ldr	r2, [r1, #16]
 8008794:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008798:	460c      	mov	r4, r1
 800879a:	429a      	cmp	r2, r3
 800879c:	bfbe      	ittt	lt
 800879e:	460b      	movlt	r3, r1
 80087a0:	464c      	movlt	r4, r9
 80087a2:	4699      	movlt	r9, r3
 80087a4:	6927      	ldr	r7, [r4, #16]
 80087a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	eb07 060a 	add.w	r6, r7, sl
 80087b2:	42b3      	cmp	r3, r6
 80087b4:	b085      	sub	sp, #20
 80087b6:	bfb8      	it	lt
 80087b8:	3101      	addlt	r1, #1
 80087ba:	f7ff fe91 	bl	80084e0 <_Balloc>
 80087be:	b930      	cbnz	r0, 80087ce <__multiply+0x42>
 80087c0:	4602      	mov	r2, r0
 80087c2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80087c6:	4b43      	ldr	r3, [pc, #268]	; (80088d4 <__multiply+0x148>)
 80087c8:	4843      	ldr	r0, [pc, #268]	; (80088d8 <__multiply+0x14c>)
 80087ca:	f000 fddf 	bl	800938c <__assert_func>
 80087ce:	f100 0514 	add.w	r5, r0, #20
 80087d2:	462b      	mov	r3, r5
 80087d4:	2200      	movs	r2, #0
 80087d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087da:	4543      	cmp	r3, r8
 80087dc:	d321      	bcc.n	8008822 <__multiply+0x96>
 80087de:	f104 0314 	add.w	r3, r4, #20
 80087e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087e6:	f109 0314 	add.w	r3, r9, #20
 80087ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087ee:	9202      	str	r2, [sp, #8]
 80087f0:	1b3a      	subs	r2, r7, r4
 80087f2:	3a15      	subs	r2, #21
 80087f4:	f022 0203 	bic.w	r2, r2, #3
 80087f8:	3204      	adds	r2, #4
 80087fa:	f104 0115 	add.w	r1, r4, #21
 80087fe:	428f      	cmp	r7, r1
 8008800:	bf38      	it	cc
 8008802:	2204      	movcc	r2, #4
 8008804:	9201      	str	r2, [sp, #4]
 8008806:	9a02      	ldr	r2, [sp, #8]
 8008808:	9303      	str	r3, [sp, #12]
 800880a:	429a      	cmp	r2, r3
 800880c:	d80c      	bhi.n	8008828 <__multiply+0x9c>
 800880e:	2e00      	cmp	r6, #0
 8008810:	dd03      	ble.n	800881a <__multiply+0x8e>
 8008812:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008816:	2b00      	cmp	r3, #0
 8008818:	d05a      	beq.n	80088d0 <__multiply+0x144>
 800881a:	6106      	str	r6, [r0, #16]
 800881c:	b005      	add	sp, #20
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008822:	f843 2b04 	str.w	r2, [r3], #4
 8008826:	e7d8      	b.n	80087da <__multiply+0x4e>
 8008828:	f8b3 a000 	ldrh.w	sl, [r3]
 800882c:	f1ba 0f00 	cmp.w	sl, #0
 8008830:	d023      	beq.n	800887a <__multiply+0xee>
 8008832:	46a9      	mov	r9, r5
 8008834:	f04f 0c00 	mov.w	ip, #0
 8008838:	f104 0e14 	add.w	lr, r4, #20
 800883c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008840:	f8d9 1000 	ldr.w	r1, [r9]
 8008844:	fa1f fb82 	uxth.w	fp, r2
 8008848:	b289      	uxth	r1, r1
 800884a:	fb0a 110b 	mla	r1, sl, fp, r1
 800884e:	4461      	add	r1, ip
 8008850:	f8d9 c000 	ldr.w	ip, [r9]
 8008854:	0c12      	lsrs	r2, r2, #16
 8008856:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800885a:	fb0a c202 	mla	r2, sl, r2, ip
 800885e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008862:	b289      	uxth	r1, r1
 8008864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008868:	4577      	cmp	r7, lr
 800886a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800886e:	f849 1b04 	str.w	r1, [r9], #4
 8008872:	d8e3      	bhi.n	800883c <__multiply+0xb0>
 8008874:	9a01      	ldr	r2, [sp, #4]
 8008876:	f845 c002 	str.w	ip, [r5, r2]
 800887a:	9a03      	ldr	r2, [sp, #12]
 800887c:	3304      	adds	r3, #4
 800887e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008882:	f1b9 0f00 	cmp.w	r9, #0
 8008886:	d021      	beq.n	80088cc <__multiply+0x140>
 8008888:	46ae      	mov	lr, r5
 800888a:	f04f 0a00 	mov.w	sl, #0
 800888e:	6829      	ldr	r1, [r5, #0]
 8008890:	f104 0c14 	add.w	ip, r4, #20
 8008894:	f8bc b000 	ldrh.w	fp, [ip]
 8008898:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800889c:	b289      	uxth	r1, r1
 800889e:	fb09 220b 	mla	r2, r9, fp, r2
 80088a2:	4452      	add	r2, sl
 80088a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088a8:	f84e 1b04 	str.w	r1, [lr], #4
 80088ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088b4:	f8be 1000 	ldrh.w	r1, [lr]
 80088b8:	4567      	cmp	r7, ip
 80088ba:	fb09 110a 	mla	r1, r9, sl, r1
 80088be:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80088c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088c6:	d8e5      	bhi.n	8008894 <__multiply+0x108>
 80088c8:	9a01      	ldr	r2, [sp, #4]
 80088ca:	50a9      	str	r1, [r5, r2]
 80088cc:	3504      	adds	r5, #4
 80088ce:	e79a      	b.n	8008806 <__multiply+0x7a>
 80088d0:	3e01      	subs	r6, #1
 80088d2:	e79c      	b.n	800880e <__multiply+0x82>
 80088d4:	0800ae25 	.word	0x0800ae25
 80088d8:	0800ae96 	.word	0x0800ae96

080088dc <__pow5mult>:
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e0:	4615      	mov	r5, r2
 80088e2:	f012 0203 	ands.w	r2, r2, #3
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	d007      	beq.n	80088fc <__pow5mult+0x20>
 80088ec:	4c25      	ldr	r4, [pc, #148]	; (8008984 <__pow5mult+0xa8>)
 80088ee:	3a01      	subs	r2, #1
 80088f0:	2300      	movs	r3, #0
 80088f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088f6:	f7ff fe55 	bl	80085a4 <__multadd>
 80088fa:	4607      	mov	r7, r0
 80088fc:	10ad      	asrs	r5, r5, #2
 80088fe:	d03d      	beq.n	800897c <__pow5mult+0xa0>
 8008900:	69f4      	ldr	r4, [r6, #28]
 8008902:	b97c      	cbnz	r4, 8008924 <__pow5mult+0x48>
 8008904:	2010      	movs	r0, #16
 8008906:	f7ff fd25 	bl	8008354 <malloc>
 800890a:	4602      	mov	r2, r0
 800890c:	61f0      	str	r0, [r6, #28]
 800890e:	b928      	cbnz	r0, 800891c <__pow5mult+0x40>
 8008910:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008914:	4b1c      	ldr	r3, [pc, #112]	; (8008988 <__pow5mult+0xac>)
 8008916:	481d      	ldr	r0, [pc, #116]	; (800898c <__pow5mult+0xb0>)
 8008918:	f000 fd38 	bl	800938c <__assert_func>
 800891c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008920:	6004      	str	r4, [r0, #0]
 8008922:	60c4      	str	r4, [r0, #12]
 8008924:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800892c:	b94c      	cbnz	r4, 8008942 <__pow5mult+0x66>
 800892e:	f240 2171 	movw	r1, #625	; 0x271
 8008932:	4630      	mov	r0, r6
 8008934:	f7ff ff14 	bl	8008760 <__i2b>
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	07eb      	lsls	r3, r5, #31
 8008948:	d50a      	bpl.n	8008960 <__pow5mult+0x84>
 800894a:	4639      	mov	r1, r7
 800894c:	4622      	mov	r2, r4
 800894e:	4630      	mov	r0, r6
 8008950:	f7ff ff1c 	bl	800878c <__multiply>
 8008954:	4680      	mov	r8, r0
 8008956:	4639      	mov	r1, r7
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff fe01 	bl	8008560 <_Bfree>
 800895e:	4647      	mov	r7, r8
 8008960:	106d      	asrs	r5, r5, #1
 8008962:	d00b      	beq.n	800897c <__pow5mult+0xa0>
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	b938      	cbnz	r0, 8008978 <__pow5mult+0x9c>
 8008968:	4622      	mov	r2, r4
 800896a:	4621      	mov	r1, r4
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff ff0d 	bl	800878c <__multiply>
 8008972:	6020      	str	r0, [r4, #0]
 8008974:	f8c0 9000 	str.w	r9, [r0]
 8008978:	4604      	mov	r4, r0
 800897a:	e7e4      	b.n	8008946 <__pow5mult+0x6a>
 800897c:	4638      	mov	r0, r7
 800897e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008982:	bf00      	nop
 8008984:	0800afe0 	.word	0x0800afe0
 8008988:	0800adb6 	.word	0x0800adb6
 800898c:	0800ae96 	.word	0x0800ae96

08008990 <__lshift>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	4607      	mov	r7, r0
 8008998:	4691      	mov	r9, r2
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	6849      	ldr	r1, [r1, #4]
 800899e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089a2:	68a3      	ldr	r3, [r4, #8]
 80089a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089a8:	f108 0601 	add.w	r6, r8, #1
 80089ac:	42b3      	cmp	r3, r6
 80089ae:	db0b      	blt.n	80089c8 <__lshift+0x38>
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff fd95 	bl	80084e0 <_Balloc>
 80089b6:	4605      	mov	r5, r0
 80089b8:	b948      	cbnz	r0, 80089ce <__lshift+0x3e>
 80089ba:	4602      	mov	r2, r0
 80089bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80089c0:	4b27      	ldr	r3, [pc, #156]	; (8008a60 <__lshift+0xd0>)
 80089c2:	4828      	ldr	r0, [pc, #160]	; (8008a64 <__lshift+0xd4>)
 80089c4:	f000 fce2 	bl	800938c <__assert_func>
 80089c8:	3101      	adds	r1, #1
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	e7ee      	b.n	80089ac <__lshift+0x1c>
 80089ce:	2300      	movs	r3, #0
 80089d0:	f100 0114 	add.w	r1, r0, #20
 80089d4:	f100 0210 	add.w	r2, r0, #16
 80089d8:	4618      	mov	r0, r3
 80089da:	4553      	cmp	r3, sl
 80089dc:	db33      	blt.n	8008a46 <__lshift+0xb6>
 80089de:	6920      	ldr	r0, [r4, #16]
 80089e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089e4:	f104 0314 	add.w	r3, r4, #20
 80089e8:	f019 091f 	ands.w	r9, r9, #31
 80089ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089f4:	d02b      	beq.n	8008a4e <__lshift+0xbe>
 80089f6:	468a      	mov	sl, r1
 80089f8:	2200      	movs	r2, #0
 80089fa:	f1c9 0e20 	rsb	lr, r9, #32
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	fa00 f009 	lsl.w	r0, r0, r9
 8008a04:	4310      	orrs	r0, r2
 8008a06:	f84a 0b04 	str.w	r0, [sl], #4
 8008a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0e:	459c      	cmp	ip, r3
 8008a10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a14:	d8f3      	bhi.n	80089fe <__lshift+0x6e>
 8008a16:	ebac 0304 	sub.w	r3, ip, r4
 8008a1a:	3b15      	subs	r3, #21
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	3304      	adds	r3, #4
 8008a22:	f104 0015 	add.w	r0, r4, #21
 8008a26:	4584      	cmp	ip, r0
 8008a28:	bf38      	it	cc
 8008a2a:	2304      	movcc	r3, #4
 8008a2c:	50ca      	str	r2, [r1, r3]
 8008a2e:	b10a      	cbz	r2, 8008a34 <__lshift+0xa4>
 8008a30:	f108 0602 	add.w	r6, r8, #2
 8008a34:	3e01      	subs	r6, #1
 8008a36:	4638      	mov	r0, r7
 8008a38:	4621      	mov	r1, r4
 8008a3a:	612e      	str	r6, [r5, #16]
 8008a3c:	f7ff fd90 	bl	8008560 <_Bfree>
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	e7c5      	b.n	80089da <__lshift+0x4a>
 8008a4e:	3904      	subs	r1, #4
 8008a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a54:	459c      	cmp	ip, r3
 8008a56:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a5a:	d8f9      	bhi.n	8008a50 <__lshift+0xc0>
 8008a5c:	e7ea      	b.n	8008a34 <__lshift+0xa4>
 8008a5e:	bf00      	nop
 8008a60:	0800ae25 	.word	0x0800ae25
 8008a64:	0800ae96 	.word	0x0800ae96

08008a68 <__mcmp>:
 8008a68:	4603      	mov	r3, r0
 8008a6a:	690a      	ldr	r2, [r1, #16]
 8008a6c:	6900      	ldr	r0, [r0, #16]
 8008a6e:	b530      	push	{r4, r5, lr}
 8008a70:	1a80      	subs	r0, r0, r2
 8008a72:	d10d      	bne.n	8008a90 <__mcmp+0x28>
 8008a74:	3314      	adds	r3, #20
 8008a76:	3114      	adds	r1, #20
 8008a78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a88:	4295      	cmp	r5, r2
 8008a8a:	d002      	beq.n	8008a92 <__mcmp+0x2a>
 8008a8c:	d304      	bcc.n	8008a98 <__mcmp+0x30>
 8008a8e:	2001      	movs	r0, #1
 8008a90:	bd30      	pop	{r4, r5, pc}
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	d3f4      	bcc.n	8008a80 <__mcmp+0x18>
 8008a96:	e7fb      	b.n	8008a90 <__mcmp+0x28>
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	e7f8      	b.n	8008a90 <__mcmp+0x28>
	...

08008aa0 <__mdiff>:
 8008aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4628      	mov	r0, r5
 8008aac:	4614      	mov	r4, r2
 8008aae:	f7ff ffdb 	bl	8008a68 <__mcmp>
 8008ab2:	1e06      	subs	r6, r0, #0
 8008ab4:	d111      	bne.n	8008ada <__mdiff+0x3a>
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f7ff fd11 	bl	80084e0 <_Balloc>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <__mdiff+0x2e>
 8008ac2:	f240 2137 	movw	r1, #567	; 0x237
 8008ac6:	4b3a      	ldr	r3, [pc, #232]	; (8008bb0 <__mdiff+0x110>)
 8008ac8:	483a      	ldr	r0, [pc, #232]	; (8008bb4 <__mdiff+0x114>)
 8008aca:	f000 fc5f 	bl	800938c <__assert_func>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ada:	bfa4      	itt	ge
 8008adc:	4623      	movge	r3, r4
 8008ade:	462c      	movge	r4, r5
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	6861      	ldr	r1, [r4, #4]
 8008ae4:	bfa6      	itte	ge
 8008ae6:	461d      	movge	r5, r3
 8008ae8:	2600      	movge	r6, #0
 8008aea:	2601      	movlt	r6, #1
 8008aec:	f7ff fcf8 	bl	80084e0 <_Balloc>
 8008af0:	4602      	mov	r2, r0
 8008af2:	b918      	cbnz	r0, 8008afc <__mdiff+0x5c>
 8008af4:	f240 2145 	movw	r1, #581	; 0x245
 8008af8:	4b2d      	ldr	r3, [pc, #180]	; (8008bb0 <__mdiff+0x110>)
 8008afa:	e7e5      	b.n	8008ac8 <__mdiff+0x28>
 8008afc:	f102 0814 	add.w	r8, r2, #20
 8008b00:	46c2      	mov	sl, r8
 8008b02:	f04f 0c00 	mov.w	ip, #0
 8008b06:	6927      	ldr	r7, [r4, #16]
 8008b08:	60c6      	str	r6, [r0, #12]
 8008b0a:	692e      	ldr	r6, [r5, #16]
 8008b0c:	f104 0014 	add.w	r0, r4, #20
 8008b10:	f105 0914 	add.w	r9, r5, #20
 8008b14:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008b18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b1c:	3410      	adds	r4, #16
 8008b1e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008b22:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b26:	fa1f f18b 	uxth.w	r1, fp
 8008b2a:	4461      	add	r1, ip
 8008b2c:	fa1f fc83 	uxth.w	ip, r3
 8008b30:	0c1b      	lsrs	r3, r3, #16
 8008b32:	eba1 010c 	sub.w	r1, r1, ip
 8008b36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008b3e:	b289      	uxth	r1, r1
 8008b40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008b44:	454e      	cmp	r6, r9
 8008b46:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008b4a:	f84a 1b04 	str.w	r1, [sl], #4
 8008b4e:	d8e6      	bhi.n	8008b1e <__mdiff+0x7e>
 8008b50:	1b73      	subs	r3, r6, r5
 8008b52:	3b15      	subs	r3, #21
 8008b54:	f023 0303 	bic.w	r3, r3, #3
 8008b58:	3515      	adds	r5, #21
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	42ae      	cmp	r6, r5
 8008b5e:	bf38      	it	cc
 8008b60:	2304      	movcc	r3, #4
 8008b62:	4418      	add	r0, r3
 8008b64:	4443      	add	r3, r8
 8008b66:	461e      	mov	r6, r3
 8008b68:	4605      	mov	r5, r0
 8008b6a:	4575      	cmp	r5, lr
 8008b6c:	d30e      	bcc.n	8008b8c <__mdiff+0xec>
 8008b6e:	f10e 0103 	add.w	r1, lr, #3
 8008b72:	1a09      	subs	r1, r1, r0
 8008b74:	f021 0103 	bic.w	r1, r1, #3
 8008b78:	3803      	subs	r0, #3
 8008b7a:	4586      	cmp	lr, r0
 8008b7c:	bf38      	it	cc
 8008b7e:	2100      	movcc	r1, #0
 8008b80:	440b      	add	r3, r1
 8008b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b86:	b189      	cbz	r1, 8008bac <__mdiff+0x10c>
 8008b88:	6117      	str	r7, [r2, #16]
 8008b8a:	e7a3      	b.n	8008ad4 <__mdiff+0x34>
 8008b8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b90:	fa1f f188 	uxth.w	r1, r8
 8008b94:	4461      	add	r1, ip
 8008b96:	140c      	asrs	r4, r1, #16
 8008b98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b9c:	b289      	uxth	r1, r1
 8008b9e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ba2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008ba6:	f846 1b04 	str.w	r1, [r6], #4
 8008baa:	e7de      	b.n	8008b6a <__mdiff+0xca>
 8008bac:	3f01      	subs	r7, #1
 8008bae:	e7e8      	b.n	8008b82 <__mdiff+0xe2>
 8008bb0:	0800ae25 	.word	0x0800ae25
 8008bb4:	0800ae96 	.word	0x0800ae96

08008bb8 <__ulp>:
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <__ulp+0x3c>)
 8008bba:	400b      	ands	r3, r1
 8008bbc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	dc08      	bgt.n	8008bd6 <__ulp+0x1e>
 8008bc4:	425b      	negs	r3, r3
 8008bc6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008bca:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bce:	da04      	bge.n	8008bda <__ulp+0x22>
 8008bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008bd4:	4113      	asrs	r3, r2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	e008      	b.n	8008bec <__ulp+0x34>
 8008bda:	f1a2 0314 	sub.w	r3, r2, #20
 8008bde:	2b1e      	cmp	r3, #30
 8008be0:	bfd6      	itet	le
 8008be2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008be6:	2201      	movgt	r2, #1
 8008be8:	40da      	lsrle	r2, r3
 8008bea:	2300      	movs	r3, #0
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	7ff00000 	.word	0x7ff00000

08008bf8 <__b2d>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	6905      	ldr	r5, [r0, #16]
 8008bfc:	f100 0714 	add.w	r7, r0, #20
 8008c00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008c04:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008c08:	1f2e      	subs	r6, r5, #4
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff fd5a 	bl	80086c4 <__hi0bits>
 8008c10:	f1c0 0220 	rsb	r2, r0, #32
 8008c14:	280a      	cmp	r0, #10
 8008c16:	4603      	mov	r3, r0
 8008c18:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008c84 <__b2d+0x8c>
 8008c1c:	600a      	str	r2, [r1, #0]
 8008c1e:	dc12      	bgt.n	8008c46 <__b2d+0x4e>
 8008c20:	f1c0 0e0b 	rsb	lr, r0, #11
 8008c24:	fa24 f20e 	lsr.w	r2, r4, lr
 8008c28:	42b7      	cmp	r7, r6
 8008c2a:	ea42 010c 	orr.w	r1, r2, ip
 8008c2e:	bf2c      	ite	cs
 8008c30:	2200      	movcs	r2, #0
 8008c32:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008c36:	3315      	adds	r3, #21
 8008c38:	fa04 f303 	lsl.w	r3, r4, r3
 8008c3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c40:	431a      	orrs	r2, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c46:	42b7      	cmp	r7, r6
 8008c48:	bf2e      	itee	cs
 8008c4a:	2200      	movcs	r2, #0
 8008c4c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008c50:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c54:	3b0b      	subs	r3, #11
 8008c56:	d012      	beq.n	8008c7e <__b2d+0x86>
 8008c58:	f1c3 0520 	rsb	r5, r3, #32
 8008c5c:	fa22 f105 	lsr.w	r1, r2, r5
 8008c60:	409c      	lsls	r4, r3
 8008c62:	430c      	orrs	r4, r1
 8008c64:	42be      	cmp	r6, r7
 8008c66:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8008c6a:	bf94      	ite	ls
 8008c6c:	2400      	movls	r4, #0
 8008c6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c72:	409a      	lsls	r2, r3
 8008c74:	40ec      	lsrs	r4, r5
 8008c76:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008c7a:	4322      	orrs	r2, r4
 8008c7c:	e7e1      	b.n	8008c42 <__b2d+0x4a>
 8008c7e:	ea44 010c 	orr.w	r1, r4, ip
 8008c82:	e7de      	b.n	8008c42 <__b2d+0x4a>
 8008c84:	3ff00000 	.word	0x3ff00000

08008c88 <__d2b>:
 8008c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	4617      	mov	r7, r2
 8008c8e:	461c      	mov	r4, r3
 8008c90:	9e08      	ldr	r6, [sp, #32]
 8008c92:	f7ff fc25 	bl	80084e0 <_Balloc>
 8008c96:	4605      	mov	r5, r0
 8008c98:	b930      	cbnz	r0, 8008ca8 <__d2b+0x20>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	f240 310f 	movw	r1, #783	; 0x30f
 8008ca0:	4b22      	ldr	r3, [pc, #136]	; (8008d2c <__d2b+0xa4>)
 8008ca2:	4823      	ldr	r0, [pc, #140]	; (8008d30 <__d2b+0xa8>)
 8008ca4:	f000 fb72 	bl	800938c <__assert_func>
 8008ca8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008cac:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008cb0:	bb24      	cbnz	r4, 8008cfc <__d2b+0x74>
 8008cb2:	2f00      	cmp	r7, #0
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	d026      	beq.n	8008d06 <__d2b+0x7e>
 8008cb8:	4668      	mov	r0, sp
 8008cba:	9700      	str	r7, [sp, #0]
 8008cbc:	f7ff fd22 	bl	8008704 <__lo0bits>
 8008cc0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cc4:	b1e8      	cbz	r0, 8008d02 <__d2b+0x7a>
 8008cc6:	f1c0 0320 	rsb	r3, r0, #32
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	40c2      	lsrs	r2, r0
 8008cd2:	616b      	str	r3, [r5, #20]
 8008cd4:	9201      	str	r2, [sp, #4]
 8008cd6:	9b01      	ldr	r3, [sp, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bf14      	ite	ne
 8008cdc:	2102      	movne	r1, #2
 8008cde:	2101      	moveq	r1, #1
 8008ce0:	61ab      	str	r3, [r5, #24]
 8008ce2:	6129      	str	r1, [r5, #16]
 8008ce4:	b1bc      	cbz	r4, 8008d16 <__d2b+0x8e>
 8008ce6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008cea:	4404      	add	r4, r0
 8008cec:	6034      	str	r4, [r6, #0]
 8008cee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf4:	6018      	str	r0, [r3, #0]
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	b003      	add	sp, #12
 8008cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d00:	e7d7      	b.n	8008cb2 <__d2b+0x2a>
 8008d02:	6169      	str	r1, [r5, #20]
 8008d04:	e7e7      	b.n	8008cd6 <__d2b+0x4e>
 8008d06:	a801      	add	r0, sp, #4
 8008d08:	f7ff fcfc 	bl	8008704 <__lo0bits>
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	2101      	movs	r1, #1
 8008d10:	616b      	str	r3, [r5, #20]
 8008d12:	3020      	adds	r0, #32
 8008d14:	e7e5      	b.n	8008ce2 <__d2b+0x5a>
 8008d16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d1a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008d1e:	6030      	str	r0, [r6, #0]
 8008d20:	6918      	ldr	r0, [r3, #16]
 8008d22:	f7ff fccf 	bl	80086c4 <__hi0bits>
 8008d26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008d2a:	e7e2      	b.n	8008cf2 <__d2b+0x6a>
 8008d2c:	0800ae25 	.word	0x0800ae25
 8008d30:	0800ae96 	.word	0x0800ae96

08008d34 <__ratio>:
 8008d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	4688      	mov	r8, r1
 8008d3a:	4669      	mov	r1, sp
 8008d3c:	4681      	mov	r9, r0
 8008d3e:	f7ff ff5b 	bl	8008bf8 <__b2d>
 8008d42:	460f      	mov	r7, r1
 8008d44:	4604      	mov	r4, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	4640      	mov	r0, r8
 8008d4a:	a901      	add	r1, sp, #4
 8008d4c:	f7ff ff54 	bl	8008bf8 <__b2d>
 8008d50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d58:	468b      	mov	fp, r1
 8008d5a:	eba3 0c02 	sub.w	ip, r3, r2
 8008d5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	bfd5      	itete	le
 8008d6c:	460a      	movle	r2, r1
 8008d6e:	462a      	movgt	r2, r5
 8008d70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d74:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d78:	bfd8      	it	le
 8008d7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d7e:	465b      	mov	r3, fp
 8008d80:	4602      	mov	r2, r0
 8008d82:	4639      	mov	r1, r7
 8008d84:	4620      	mov	r0, r4
 8008d86:	f7f7 fcd1 	bl	800072c <__aeabi_ddiv>
 8008d8a:	b003      	add	sp, #12
 8008d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d90 <__copybits>:
 8008d90:	3901      	subs	r1, #1
 8008d92:	b570      	push	{r4, r5, r6, lr}
 8008d94:	1149      	asrs	r1, r1, #5
 8008d96:	6914      	ldr	r4, [r2, #16]
 8008d98:	3101      	adds	r1, #1
 8008d9a:	f102 0314 	add.w	r3, r2, #20
 8008d9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008da2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008da6:	1f05      	subs	r5, r0, #4
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d30c      	bcc.n	8008dc6 <__copybits+0x36>
 8008dac:	1aa3      	subs	r3, r4, r2
 8008dae:	3b11      	subs	r3, #17
 8008db0:	f023 0303 	bic.w	r3, r3, #3
 8008db4:	3211      	adds	r2, #17
 8008db6:	42a2      	cmp	r2, r4
 8008db8:	bf88      	it	hi
 8008dba:	2300      	movhi	r3, #0
 8008dbc:	4418      	add	r0, r3
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4288      	cmp	r0, r1
 8008dc2:	d305      	bcc.n	8008dd0 <__copybits+0x40>
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
 8008dc6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dca:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dce:	e7eb      	b.n	8008da8 <__copybits+0x18>
 8008dd0:	f840 3b04 	str.w	r3, [r0], #4
 8008dd4:	e7f4      	b.n	8008dc0 <__copybits+0x30>

08008dd6 <__any_on>:
 8008dd6:	f100 0214 	add.w	r2, r0, #20
 8008dda:	6900      	ldr	r0, [r0, #16]
 8008ddc:	114b      	asrs	r3, r1, #5
 8008dde:	4298      	cmp	r0, r3
 8008de0:	b510      	push	{r4, lr}
 8008de2:	db11      	blt.n	8008e08 <__any_on+0x32>
 8008de4:	dd0a      	ble.n	8008dfc <__any_on+0x26>
 8008de6:	f011 011f 	ands.w	r1, r1, #31
 8008dea:	d007      	beq.n	8008dfc <__any_on+0x26>
 8008dec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008df0:	fa24 f001 	lsr.w	r0, r4, r1
 8008df4:	fa00 f101 	lsl.w	r1, r0, r1
 8008df8:	428c      	cmp	r4, r1
 8008dfa:	d10b      	bne.n	8008e14 <__any_on+0x3e>
 8008dfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d803      	bhi.n	8008e0c <__any_on+0x36>
 8008e04:	2000      	movs	r0, #0
 8008e06:	bd10      	pop	{r4, pc}
 8008e08:	4603      	mov	r3, r0
 8008e0a:	e7f7      	b.n	8008dfc <__any_on+0x26>
 8008e0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e10:	2900      	cmp	r1, #0
 8008e12:	d0f5      	beq.n	8008e00 <__any_on+0x2a>
 8008e14:	2001      	movs	r0, #1
 8008e16:	e7f6      	b.n	8008e06 <__any_on+0x30>

08008e18 <_strtol_l.constprop.0>:
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1e:	4686      	mov	lr, r0
 8008e20:	4690      	mov	r8, r2
 8008e22:	d001      	beq.n	8008e28 <_strtol_l.constprop.0+0x10>
 8008e24:	2b24      	cmp	r3, #36	; 0x24
 8008e26:	d906      	bls.n	8008e36 <_strtol_l.constprop.0+0x1e>
 8008e28:	f7fe f830 	bl	8006e8c <__errno>
 8008e2c:	2316      	movs	r3, #22
 8008e2e:	6003      	str	r3, [r0, #0]
 8008e30:	2000      	movs	r0, #0
 8008e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e36:	460d      	mov	r5, r1
 8008e38:	4835      	ldr	r0, [pc, #212]	; (8008f10 <_strtol_l.constprop.0+0xf8>)
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e40:	5d06      	ldrb	r6, [r0, r4]
 8008e42:	f016 0608 	ands.w	r6, r6, #8
 8008e46:	d1f8      	bne.n	8008e3a <_strtol_l.constprop.0+0x22>
 8008e48:	2c2d      	cmp	r4, #45	; 0x2d
 8008e4a:	d12e      	bne.n	8008eaa <_strtol_l.constprop.0+0x92>
 8008e4c:	2601      	movs	r6, #1
 8008e4e:	782c      	ldrb	r4, [r5, #0]
 8008e50:	1c95      	adds	r5, r2, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d057      	beq.n	8008f06 <_strtol_l.constprop.0+0xee>
 8008e56:	2b10      	cmp	r3, #16
 8008e58:	d109      	bne.n	8008e6e <_strtol_l.constprop.0+0x56>
 8008e5a:	2c30      	cmp	r4, #48	; 0x30
 8008e5c:	d107      	bne.n	8008e6e <_strtol_l.constprop.0+0x56>
 8008e5e:	782a      	ldrb	r2, [r5, #0]
 8008e60:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008e64:	2a58      	cmp	r2, #88	; 0x58
 8008e66:	d149      	bne.n	8008efc <_strtol_l.constprop.0+0xe4>
 8008e68:	2310      	movs	r3, #16
 8008e6a:	786c      	ldrb	r4, [r5, #1]
 8008e6c:	3502      	adds	r5, #2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008e74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e78:	fbbc f9f3 	udiv	r9, ip, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008e86:	2f09      	cmp	r7, #9
 8008e88:	d814      	bhi.n	8008eb4 <_strtol_l.constprop.0+0x9c>
 8008e8a:	463c      	mov	r4, r7
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	dd20      	ble.n	8008ed2 <_strtol_l.constprop.0+0xba>
 8008e90:	1c57      	adds	r7, r2, #1
 8008e92:	d007      	beq.n	8008ea4 <_strtol_l.constprop.0+0x8c>
 8008e94:	4581      	cmp	r9, r0
 8008e96:	d319      	bcc.n	8008ecc <_strtol_l.constprop.0+0xb4>
 8008e98:	d101      	bne.n	8008e9e <_strtol_l.constprop.0+0x86>
 8008e9a:	45a2      	cmp	sl, r4
 8008e9c:	db16      	blt.n	8008ecc <_strtol_l.constprop.0+0xb4>
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	fb00 4003 	mla	r0, r0, r3, r4
 8008ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ea8:	e7eb      	b.n	8008e82 <_strtol_l.constprop.0+0x6a>
 8008eaa:	2c2b      	cmp	r4, #43	; 0x2b
 8008eac:	bf04      	itt	eq
 8008eae:	782c      	ldrbeq	r4, [r5, #0]
 8008eb0:	1c95      	addeq	r5, r2, #2
 8008eb2:	e7ce      	b.n	8008e52 <_strtol_l.constprop.0+0x3a>
 8008eb4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008eb8:	2f19      	cmp	r7, #25
 8008eba:	d801      	bhi.n	8008ec0 <_strtol_l.constprop.0+0xa8>
 8008ebc:	3c37      	subs	r4, #55	; 0x37
 8008ebe:	e7e5      	b.n	8008e8c <_strtol_l.constprop.0+0x74>
 8008ec0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ec4:	2f19      	cmp	r7, #25
 8008ec6:	d804      	bhi.n	8008ed2 <_strtol_l.constprop.0+0xba>
 8008ec8:	3c57      	subs	r4, #87	; 0x57
 8008eca:	e7df      	b.n	8008e8c <_strtol_l.constprop.0+0x74>
 8008ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed0:	e7e8      	b.n	8008ea4 <_strtol_l.constprop.0+0x8c>
 8008ed2:	1c53      	adds	r3, r2, #1
 8008ed4:	d108      	bne.n	8008ee8 <_strtol_l.constprop.0+0xd0>
 8008ed6:	2322      	movs	r3, #34	; 0x22
 8008ed8:	4660      	mov	r0, ip
 8008eda:	f8ce 3000 	str.w	r3, [lr]
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	d0a6      	beq.n	8008e32 <_strtol_l.constprop.0+0x1a>
 8008ee4:	1e69      	subs	r1, r5, #1
 8008ee6:	e006      	b.n	8008ef6 <_strtol_l.constprop.0+0xde>
 8008ee8:	b106      	cbz	r6, 8008eec <_strtol_l.constprop.0+0xd4>
 8008eea:	4240      	negs	r0, r0
 8008eec:	f1b8 0f00 	cmp.w	r8, #0
 8008ef0:	d09f      	beq.n	8008e32 <_strtol_l.constprop.0+0x1a>
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	d1f6      	bne.n	8008ee4 <_strtol_l.constprop.0+0xcc>
 8008ef6:	f8c8 1000 	str.w	r1, [r8]
 8008efa:	e79a      	b.n	8008e32 <_strtol_l.constprop.0+0x1a>
 8008efc:	2430      	movs	r4, #48	; 0x30
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1b5      	bne.n	8008e6e <_strtol_l.constprop.0+0x56>
 8008f02:	2308      	movs	r3, #8
 8008f04:	e7b3      	b.n	8008e6e <_strtol_l.constprop.0+0x56>
 8008f06:	2c30      	cmp	r4, #48	; 0x30
 8008f08:	d0a9      	beq.n	8008e5e <_strtol_l.constprop.0+0x46>
 8008f0a:	230a      	movs	r3, #10
 8008f0c:	e7af      	b.n	8008e6e <_strtol_l.constprop.0+0x56>
 8008f0e:	bf00      	nop
 8008f10:	0800afed 	.word	0x0800afed

08008f14 <_strtol_r>:
 8008f14:	f7ff bf80 	b.w	8008e18 <_strtol_l.constprop.0>

08008f18 <__ascii_wctomb>:
 8008f18:	4603      	mov	r3, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	b141      	cbz	r1, 8008f30 <__ascii_wctomb+0x18>
 8008f1e:	2aff      	cmp	r2, #255	; 0xff
 8008f20:	d904      	bls.n	8008f2c <__ascii_wctomb+0x14>
 8008f22:	228a      	movs	r2, #138	; 0x8a
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	4770      	bx	lr
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	700a      	strb	r2, [r1, #0]
 8008f30:	4770      	bx	lr

08008f32 <__ssputs_r>:
 8008f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f36:	461f      	mov	r7, r3
 8008f38:	688e      	ldr	r6, [r1, #8]
 8008f3a:	4682      	mov	sl, r0
 8008f3c:	42be      	cmp	r6, r7
 8008f3e:	460c      	mov	r4, r1
 8008f40:	4690      	mov	r8, r2
 8008f42:	680b      	ldr	r3, [r1, #0]
 8008f44:	d82c      	bhi.n	8008fa0 <__ssputs_r+0x6e>
 8008f46:	898a      	ldrh	r2, [r1, #12]
 8008f48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f4c:	d026      	beq.n	8008f9c <__ssputs_r+0x6a>
 8008f4e:	6965      	ldr	r5, [r4, #20]
 8008f50:	6909      	ldr	r1, [r1, #16]
 8008f52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f56:	eba3 0901 	sub.w	r9, r3, r1
 8008f5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f5e:	1c7b      	adds	r3, r7, #1
 8008f60:	444b      	add	r3, r9
 8008f62:	106d      	asrs	r5, r5, #1
 8008f64:	429d      	cmp	r5, r3
 8008f66:	bf38      	it	cc
 8008f68:	461d      	movcc	r5, r3
 8008f6a:	0553      	lsls	r3, r2, #21
 8008f6c:	d527      	bpl.n	8008fbe <__ssputs_r+0x8c>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7ff fa18 	bl	80083a4 <_malloc_r>
 8008f74:	4606      	mov	r6, r0
 8008f76:	b360      	cbz	r0, 8008fd2 <__ssputs_r+0xa0>
 8008f78:	464a      	mov	r2, r9
 8008f7a:	6921      	ldr	r1, [r4, #16]
 8008f7c:	f7fd ffc1 	bl	8006f02 <memcpy>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	6126      	str	r6, [r4, #16]
 8008f8e:	444e      	add	r6, r9
 8008f90:	6026      	str	r6, [r4, #0]
 8008f92:	463e      	mov	r6, r7
 8008f94:	6165      	str	r5, [r4, #20]
 8008f96:	eba5 0509 	sub.w	r5, r5, r9
 8008f9a:	60a5      	str	r5, [r4, #8]
 8008f9c:	42be      	cmp	r6, r7
 8008f9e:	d900      	bls.n	8008fa2 <__ssputs_r+0x70>
 8008fa0:	463e      	mov	r6, r7
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	4641      	mov	r1, r8
 8008fa6:	6820      	ldr	r0, [r4, #0]
 8008fa8:	f000 f9c6 	bl	8009338 <memmove>
 8008fac:	2000      	movs	r0, #0
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	1b9b      	subs	r3, r3, r6
 8008fb2:	60a3      	str	r3, [r4, #8]
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	4433      	add	r3, r6
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fbe:	462a      	mov	r2, r5
 8008fc0:	f000 fa16 	bl	80093f0 <_realloc_r>
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d1e0      	bne.n	8008f8c <__ssputs_r+0x5a>
 8008fca:	4650      	mov	r0, sl
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	f7fe fe1f 	bl	8007c10 <_free_r>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	f8ca 3000 	str.w	r3, [sl]
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f04f 30ff 	mov.w	r0, #4294967295
 8008fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	e7e9      	b.n	8008fba <__ssputs_r+0x88>
	...

08008fe8 <_svfiprintf_r>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	4698      	mov	r8, r3
 8008fee:	898b      	ldrh	r3, [r1, #12]
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	061b      	lsls	r3, r3, #24
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	4614      	mov	r4, r2
 8008ff8:	b09d      	sub	sp, #116	; 0x74
 8008ffa:	d50e      	bpl.n	800901a <_svfiprintf_r+0x32>
 8008ffc:	690b      	ldr	r3, [r1, #16]
 8008ffe:	b963      	cbnz	r3, 800901a <_svfiprintf_r+0x32>
 8009000:	2140      	movs	r1, #64	; 0x40
 8009002:	f7ff f9cf 	bl	80083a4 <_malloc_r>
 8009006:	6028      	str	r0, [r5, #0]
 8009008:	6128      	str	r0, [r5, #16]
 800900a:	b920      	cbnz	r0, 8009016 <_svfiprintf_r+0x2e>
 800900c:	230c      	movs	r3, #12
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e0d0      	b.n	80091b8 <_svfiprintf_r+0x1d0>
 8009016:	2340      	movs	r3, #64	; 0x40
 8009018:	616b      	str	r3, [r5, #20]
 800901a:	2300      	movs	r3, #0
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	2320      	movs	r3, #32
 8009020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009024:	2330      	movs	r3, #48	; 0x30
 8009026:	f04f 0901 	mov.w	r9, #1
 800902a:	f8cd 800c 	str.w	r8, [sp, #12]
 800902e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80091d0 <_svfiprintf_r+0x1e8>
 8009032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009036:	4623      	mov	r3, r4
 8009038:	469a      	mov	sl, r3
 800903a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800903e:	b10a      	cbz	r2, 8009044 <_svfiprintf_r+0x5c>
 8009040:	2a25      	cmp	r2, #37	; 0x25
 8009042:	d1f9      	bne.n	8009038 <_svfiprintf_r+0x50>
 8009044:	ebba 0b04 	subs.w	fp, sl, r4
 8009048:	d00b      	beq.n	8009062 <_svfiprintf_r+0x7a>
 800904a:	465b      	mov	r3, fp
 800904c:	4622      	mov	r2, r4
 800904e:	4629      	mov	r1, r5
 8009050:	4638      	mov	r0, r7
 8009052:	f7ff ff6e 	bl	8008f32 <__ssputs_r>
 8009056:	3001      	adds	r0, #1
 8009058:	f000 80a9 	beq.w	80091ae <_svfiprintf_r+0x1c6>
 800905c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905e:	445a      	add	r2, fp
 8009060:	9209      	str	r2, [sp, #36]	; 0x24
 8009062:	f89a 3000 	ldrb.w	r3, [sl]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 80a1 	beq.w	80091ae <_svfiprintf_r+0x1c6>
 800906c:	2300      	movs	r3, #0
 800906e:	f04f 32ff 	mov.w	r2, #4294967295
 8009072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009076:	f10a 0a01 	add.w	sl, sl, #1
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	9307      	str	r3, [sp, #28]
 800907e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009082:	931a      	str	r3, [sp, #104]	; 0x68
 8009084:	4654      	mov	r4, sl
 8009086:	2205      	movs	r2, #5
 8009088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908c:	4850      	ldr	r0, [pc, #320]	; (80091d0 <_svfiprintf_r+0x1e8>)
 800908e:	f7fd ff2a 	bl	8006ee6 <memchr>
 8009092:	9a04      	ldr	r2, [sp, #16]
 8009094:	b9d8      	cbnz	r0, 80090ce <_svfiprintf_r+0xe6>
 8009096:	06d0      	lsls	r0, r2, #27
 8009098:	bf44      	itt	mi
 800909a:	2320      	movmi	r3, #32
 800909c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a0:	0711      	lsls	r1, r2, #28
 80090a2:	bf44      	itt	mi
 80090a4:	232b      	movmi	r3, #43	; 0x2b
 80090a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090aa:	f89a 3000 	ldrb.w	r3, [sl]
 80090ae:	2b2a      	cmp	r3, #42	; 0x2a
 80090b0:	d015      	beq.n	80090de <_svfiprintf_r+0xf6>
 80090b2:	4654      	mov	r4, sl
 80090b4:	2000      	movs	r0, #0
 80090b6:	f04f 0c0a 	mov.w	ip, #10
 80090ba:	9a07      	ldr	r2, [sp, #28]
 80090bc:	4621      	mov	r1, r4
 80090be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090c2:	3b30      	subs	r3, #48	; 0x30
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d94d      	bls.n	8009164 <_svfiprintf_r+0x17c>
 80090c8:	b1b0      	cbz	r0, 80090f8 <_svfiprintf_r+0x110>
 80090ca:	9207      	str	r2, [sp, #28]
 80090cc:	e014      	b.n	80090f8 <_svfiprintf_r+0x110>
 80090ce:	eba0 0308 	sub.w	r3, r0, r8
 80090d2:	fa09 f303 	lsl.w	r3, r9, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	46a2      	mov	sl, r4
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	e7d2      	b.n	8009084 <_svfiprintf_r+0x9c>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	1d19      	adds	r1, r3, #4
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	9103      	str	r1, [sp, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	bfbb      	ittet	lt
 80090ea:	425b      	neglt	r3, r3
 80090ec:	f042 0202 	orrlt.w	r2, r2, #2
 80090f0:	9307      	strge	r3, [sp, #28]
 80090f2:	9307      	strlt	r3, [sp, #28]
 80090f4:	bfb8      	it	lt
 80090f6:	9204      	strlt	r2, [sp, #16]
 80090f8:	7823      	ldrb	r3, [r4, #0]
 80090fa:	2b2e      	cmp	r3, #46	; 0x2e
 80090fc:	d10c      	bne.n	8009118 <_svfiprintf_r+0x130>
 80090fe:	7863      	ldrb	r3, [r4, #1]
 8009100:	2b2a      	cmp	r3, #42	; 0x2a
 8009102:	d134      	bne.n	800916e <_svfiprintf_r+0x186>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	3402      	adds	r4, #2
 8009108:	1d1a      	adds	r2, r3, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	9203      	str	r2, [sp, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfb8      	it	lt
 8009112:	f04f 33ff 	movlt.w	r3, #4294967295
 8009116:	9305      	str	r3, [sp, #20]
 8009118:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80091d4 <_svfiprintf_r+0x1ec>
 800911c:	2203      	movs	r2, #3
 800911e:	4650      	mov	r0, sl
 8009120:	7821      	ldrb	r1, [r4, #0]
 8009122:	f7fd fee0 	bl	8006ee6 <memchr>
 8009126:	b138      	cbz	r0, 8009138 <_svfiprintf_r+0x150>
 8009128:	2240      	movs	r2, #64	; 0x40
 800912a:	9b04      	ldr	r3, [sp, #16]
 800912c:	eba0 000a 	sub.w	r0, r0, sl
 8009130:	4082      	lsls	r2, r0
 8009132:	4313      	orrs	r3, r2
 8009134:	3401      	adds	r4, #1
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913c:	2206      	movs	r2, #6
 800913e:	4826      	ldr	r0, [pc, #152]	; (80091d8 <_svfiprintf_r+0x1f0>)
 8009140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009144:	f7fd fecf 	bl	8006ee6 <memchr>
 8009148:	2800      	cmp	r0, #0
 800914a:	d038      	beq.n	80091be <_svfiprintf_r+0x1d6>
 800914c:	4b23      	ldr	r3, [pc, #140]	; (80091dc <_svfiprintf_r+0x1f4>)
 800914e:	bb1b      	cbnz	r3, 8009198 <_svfiprintf_r+0x1b0>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	3307      	adds	r3, #7
 8009154:	f023 0307 	bic.w	r3, r3, #7
 8009158:	3308      	adds	r3, #8
 800915a:	9303      	str	r3, [sp, #12]
 800915c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915e:	4433      	add	r3, r6
 8009160:	9309      	str	r3, [sp, #36]	; 0x24
 8009162:	e768      	b.n	8009036 <_svfiprintf_r+0x4e>
 8009164:	460c      	mov	r4, r1
 8009166:	2001      	movs	r0, #1
 8009168:	fb0c 3202 	mla	r2, ip, r2, r3
 800916c:	e7a6      	b.n	80090bc <_svfiprintf_r+0xd4>
 800916e:	2300      	movs	r3, #0
 8009170:	f04f 0c0a 	mov.w	ip, #10
 8009174:	4619      	mov	r1, r3
 8009176:	3401      	adds	r4, #1
 8009178:	9305      	str	r3, [sp, #20]
 800917a:	4620      	mov	r0, r4
 800917c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009180:	3a30      	subs	r2, #48	; 0x30
 8009182:	2a09      	cmp	r2, #9
 8009184:	d903      	bls.n	800918e <_svfiprintf_r+0x1a6>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0c6      	beq.n	8009118 <_svfiprintf_r+0x130>
 800918a:	9105      	str	r1, [sp, #20]
 800918c:	e7c4      	b.n	8009118 <_svfiprintf_r+0x130>
 800918e:	4604      	mov	r4, r0
 8009190:	2301      	movs	r3, #1
 8009192:	fb0c 2101 	mla	r1, ip, r1, r2
 8009196:	e7f0      	b.n	800917a <_svfiprintf_r+0x192>
 8009198:	ab03      	add	r3, sp, #12
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	462a      	mov	r2, r5
 800919e:	4638      	mov	r0, r7
 80091a0:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <_svfiprintf_r+0x1f8>)
 80091a2:	a904      	add	r1, sp, #16
 80091a4:	f7fc feea 	bl	8005f7c <_printf_float>
 80091a8:	1c42      	adds	r2, r0, #1
 80091aa:	4606      	mov	r6, r0
 80091ac:	d1d6      	bne.n	800915c <_svfiprintf_r+0x174>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	065b      	lsls	r3, r3, #25
 80091b2:	f53f af2d 	bmi.w	8009010 <_svfiprintf_r+0x28>
 80091b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091b8:	b01d      	add	sp, #116	; 0x74
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091be:	ab03      	add	r3, sp, #12
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	462a      	mov	r2, r5
 80091c4:	4638      	mov	r0, r7
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <_svfiprintf_r+0x1f8>)
 80091c8:	a904      	add	r1, sp, #16
 80091ca:	f7fd f977 	bl	80064bc <_printf_i>
 80091ce:	e7eb      	b.n	80091a8 <_svfiprintf_r+0x1c0>
 80091d0:	0800b0ed 	.word	0x0800b0ed
 80091d4:	0800b0f3 	.word	0x0800b0f3
 80091d8:	0800b0f7 	.word	0x0800b0f7
 80091dc:	08005f7d 	.word	0x08005f7d
 80091e0:	08008f33 	.word	0x08008f33

080091e4 <__sflush_r>:
 80091e4:	898a      	ldrh	r2, [r1, #12]
 80091e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e8:	4605      	mov	r5, r0
 80091ea:	0710      	lsls	r0, r2, #28
 80091ec:	460c      	mov	r4, r1
 80091ee:	d457      	bmi.n	80092a0 <__sflush_r+0xbc>
 80091f0:	684b      	ldr	r3, [r1, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dc04      	bgt.n	8009200 <__sflush_r+0x1c>
 80091f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dc01      	bgt.n	8009200 <__sflush_r+0x1c>
 80091fc:	2000      	movs	r0, #0
 80091fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009202:	2e00      	cmp	r6, #0
 8009204:	d0fa      	beq.n	80091fc <__sflush_r+0x18>
 8009206:	2300      	movs	r3, #0
 8009208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800920c:	682f      	ldr	r7, [r5, #0]
 800920e:	6a21      	ldr	r1, [r4, #32]
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	d032      	beq.n	800927a <__sflush_r+0x96>
 8009214:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	075a      	lsls	r2, r3, #29
 800921a:	d505      	bpl.n	8009228 <__sflush_r+0x44>
 800921c:	6863      	ldr	r3, [r4, #4]
 800921e:	1ac0      	subs	r0, r0, r3
 8009220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009222:	b10b      	cbz	r3, 8009228 <__sflush_r+0x44>
 8009224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009226:	1ac0      	subs	r0, r0, r3
 8009228:	2300      	movs	r3, #0
 800922a:	4602      	mov	r2, r0
 800922c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922e:	4628      	mov	r0, r5
 8009230:	6a21      	ldr	r1, [r4, #32]
 8009232:	47b0      	blx	r6
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	d106      	bne.n	8009248 <__sflush_r+0x64>
 800923a:	6829      	ldr	r1, [r5, #0]
 800923c:	291d      	cmp	r1, #29
 800923e:	d82b      	bhi.n	8009298 <__sflush_r+0xb4>
 8009240:	4a28      	ldr	r2, [pc, #160]	; (80092e4 <__sflush_r+0x100>)
 8009242:	410a      	asrs	r2, r1
 8009244:	07d6      	lsls	r6, r2, #31
 8009246:	d427      	bmi.n	8009298 <__sflush_r+0xb4>
 8009248:	2200      	movs	r2, #0
 800924a:	6062      	str	r2, [r4, #4]
 800924c:	6922      	ldr	r2, [r4, #16]
 800924e:	04d9      	lsls	r1, r3, #19
 8009250:	6022      	str	r2, [r4, #0]
 8009252:	d504      	bpl.n	800925e <__sflush_r+0x7a>
 8009254:	1c42      	adds	r2, r0, #1
 8009256:	d101      	bne.n	800925c <__sflush_r+0x78>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b903      	cbnz	r3, 800925e <__sflush_r+0x7a>
 800925c:	6560      	str	r0, [r4, #84]	; 0x54
 800925e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009260:	602f      	str	r7, [r5, #0]
 8009262:	2900      	cmp	r1, #0
 8009264:	d0ca      	beq.n	80091fc <__sflush_r+0x18>
 8009266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800926a:	4299      	cmp	r1, r3
 800926c:	d002      	beq.n	8009274 <__sflush_r+0x90>
 800926e:	4628      	mov	r0, r5
 8009270:	f7fe fcce 	bl	8007c10 <_free_r>
 8009274:	2000      	movs	r0, #0
 8009276:	6360      	str	r0, [r4, #52]	; 0x34
 8009278:	e7c1      	b.n	80091fe <__sflush_r+0x1a>
 800927a:	2301      	movs	r3, #1
 800927c:	4628      	mov	r0, r5
 800927e:	47b0      	blx	r6
 8009280:	1c41      	adds	r1, r0, #1
 8009282:	d1c8      	bne.n	8009216 <__sflush_r+0x32>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0c5      	beq.n	8009216 <__sflush_r+0x32>
 800928a:	2b1d      	cmp	r3, #29
 800928c:	d001      	beq.n	8009292 <__sflush_r+0xae>
 800928e:	2b16      	cmp	r3, #22
 8009290:	d101      	bne.n	8009296 <__sflush_r+0xb2>
 8009292:	602f      	str	r7, [r5, #0]
 8009294:	e7b2      	b.n	80091fc <__sflush_r+0x18>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	e7ae      	b.n	80091fe <__sflush_r+0x1a>
 80092a0:	690f      	ldr	r7, [r1, #16]
 80092a2:	2f00      	cmp	r7, #0
 80092a4:	d0aa      	beq.n	80091fc <__sflush_r+0x18>
 80092a6:	0793      	lsls	r3, r2, #30
 80092a8:	bf18      	it	ne
 80092aa:	2300      	movne	r3, #0
 80092ac:	680e      	ldr	r6, [r1, #0]
 80092ae:	bf08      	it	eq
 80092b0:	694b      	ldreq	r3, [r1, #20]
 80092b2:	1bf6      	subs	r6, r6, r7
 80092b4:	600f      	str	r7, [r1, #0]
 80092b6:	608b      	str	r3, [r1, #8]
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	dd9f      	ble.n	80091fc <__sflush_r+0x18>
 80092bc:	4633      	mov	r3, r6
 80092be:	463a      	mov	r2, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	6a21      	ldr	r1, [r4, #32]
 80092c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80092c8:	47e0      	blx	ip
 80092ca:	2800      	cmp	r0, #0
 80092cc:	dc06      	bgt.n	80092dc <__sflush_r+0xf8>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	e790      	b.n	80091fe <__sflush_r+0x1a>
 80092dc:	4407      	add	r7, r0
 80092de:	1a36      	subs	r6, r6, r0
 80092e0:	e7ea      	b.n	80092b8 <__sflush_r+0xd4>
 80092e2:	bf00      	nop
 80092e4:	dfbffffe 	.word	0xdfbffffe

080092e8 <_fflush_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	690b      	ldr	r3, [r1, #16]
 80092ec:	4605      	mov	r5, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	b913      	cbnz	r3, 80092f8 <_fflush_r+0x10>
 80092f2:	2500      	movs	r5, #0
 80092f4:	4628      	mov	r0, r5
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	b118      	cbz	r0, 8009302 <_fflush_r+0x1a>
 80092fa:	6a03      	ldr	r3, [r0, #32]
 80092fc:	b90b      	cbnz	r3, 8009302 <_fflush_r+0x1a>
 80092fe:	f7fd fc99 	bl	8006c34 <__sinit>
 8009302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0f3      	beq.n	80092f2 <_fflush_r+0xa>
 800930a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800930c:	07d0      	lsls	r0, r2, #31
 800930e:	d404      	bmi.n	800931a <_fflush_r+0x32>
 8009310:	0599      	lsls	r1, r3, #22
 8009312:	d402      	bmi.n	800931a <_fflush_r+0x32>
 8009314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009316:	f7fd fde4 	bl	8006ee2 <__retarget_lock_acquire_recursive>
 800931a:	4628      	mov	r0, r5
 800931c:	4621      	mov	r1, r4
 800931e:	f7ff ff61 	bl	80091e4 <__sflush_r>
 8009322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009324:	4605      	mov	r5, r0
 8009326:	07da      	lsls	r2, r3, #31
 8009328:	d4e4      	bmi.n	80092f4 <_fflush_r+0xc>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	059b      	lsls	r3, r3, #22
 800932e:	d4e1      	bmi.n	80092f4 <_fflush_r+0xc>
 8009330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009332:	f7fd fdd7 	bl	8006ee4 <__retarget_lock_release_recursive>
 8009336:	e7dd      	b.n	80092f4 <_fflush_r+0xc>

08009338 <memmove>:
 8009338:	4288      	cmp	r0, r1
 800933a:	b510      	push	{r4, lr}
 800933c:	eb01 0402 	add.w	r4, r1, r2
 8009340:	d902      	bls.n	8009348 <memmove+0x10>
 8009342:	4284      	cmp	r4, r0
 8009344:	4623      	mov	r3, r4
 8009346:	d807      	bhi.n	8009358 <memmove+0x20>
 8009348:	1e43      	subs	r3, r0, #1
 800934a:	42a1      	cmp	r1, r4
 800934c:	d008      	beq.n	8009360 <memmove+0x28>
 800934e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009356:	e7f8      	b.n	800934a <memmove+0x12>
 8009358:	4601      	mov	r1, r0
 800935a:	4402      	add	r2, r0
 800935c:	428a      	cmp	r2, r1
 800935e:	d100      	bne.n	8009362 <memmove+0x2a>
 8009360:	bd10      	pop	{r4, pc}
 8009362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800936a:	e7f7      	b.n	800935c <memmove+0x24>

0800936c <_sbrk_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	2300      	movs	r3, #0
 8009370:	4d05      	ldr	r5, [pc, #20]	; (8009388 <_sbrk_r+0x1c>)
 8009372:	4604      	mov	r4, r0
 8009374:	4608      	mov	r0, r1
 8009376:	602b      	str	r3, [r5, #0]
 8009378:	f7f8 f8f0 	bl	800155c <_sbrk>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_sbrk_r+0x1a>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_sbrk_r+0x1a>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	200004f8 	.word	0x200004f8

0800938c <__assert_func>:
 800938c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800938e:	4614      	mov	r4, r2
 8009390:	461a      	mov	r2, r3
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <__assert_func+0x2c>)
 8009394:	4605      	mov	r5, r0
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68d8      	ldr	r0, [r3, #12]
 800939a:	b14c      	cbz	r4, 80093b0 <__assert_func+0x24>
 800939c:	4b07      	ldr	r3, [pc, #28]	; (80093bc <__assert_func+0x30>)
 800939e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093a2:	9100      	str	r1, [sp, #0]
 80093a4:	462b      	mov	r3, r5
 80093a6:	4906      	ldr	r1, [pc, #24]	; (80093c0 <__assert_func+0x34>)
 80093a8:	f000 f852 	bl	8009450 <fiprintf>
 80093ac:	f000 f862 	bl	8009474 <abort>
 80093b0:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <__assert_func+0x38>)
 80093b2:	461c      	mov	r4, r3
 80093b4:	e7f3      	b.n	800939e <__assert_func+0x12>
 80093b6:	bf00      	nop
 80093b8:	200001d0 	.word	0x200001d0
 80093bc:	0800b0fe 	.word	0x0800b0fe
 80093c0:	0800b10b 	.word	0x0800b10b
 80093c4:	0800b139 	.word	0x0800b139

080093c8 <_calloc_r>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	fba1 5402 	umull	r5, r4, r1, r2
 80093ce:	b934      	cbnz	r4, 80093de <_calloc_r+0x16>
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7fe ffe7 	bl	80083a4 <_malloc_r>
 80093d6:	4606      	mov	r6, r0
 80093d8:	b928      	cbnz	r0, 80093e6 <_calloc_r+0x1e>
 80093da:	4630      	mov	r0, r6
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
 80093de:	220c      	movs	r2, #12
 80093e0:	2600      	movs	r6, #0
 80093e2:	6002      	str	r2, [r0, #0]
 80093e4:	e7f9      	b.n	80093da <_calloc_r+0x12>
 80093e6:	462a      	mov	r2, r5
 80093e8:	4621      	mov	r1, r4
 80093ea:	f7fd fcdd 	bl	8006da8 <memset>
 80093ee:	e7f4      	b.n	80093da <_calloc_r+0x12>

080093f0 <_realloc_r>:
 80093f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f4:	4680      	mov	r8, r0
 80093f6:	4614      	mov	r4, r2
 80093f8:	460e      	mov	r6, r1
 80093fa:	b921      	cbnz	r1, 8009406 <_realloc_r+0x16>
 80093fc:	4611      	mov	r1, r2
 80093fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009402:	f7fe bfcf 	b.w	80083a4 <_malloc_r>
 8009406:	b92a      	cbnz	r2, 8009414 <_realloc_r+0x24>
 8009408:	f7fe fc02 	bl	8007c10 <_free_r>
 800940c:	4625      	mov	r5, r4
 800940e:	4628      	mov	r0, r5
 8009410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009414:	f000 f835 	bl	8009482 <_malloc_usable_size_r>
 8009418:	4284      	cmp	r4, r0
 800941a:	4607      	mov	r7, r0
 800941c:	d802      	bhi.n	8009424 <_realloc_r+0x34>
 800941e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009422:	d812      	bhi.n	800944a <_realloc_r+0x5a>
 8009424:	4621      	mov	r1, r4
 8009426:	4640      	mov	r0, r8
 8009428:	f7fe ffbc 	bl	80083a4 <_malloc_r>
 800942c:	4605      	mov	r5, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	d0ed      	beq.n	800940e <_realloc_r+0x1e>
 8009432:	42bc      	cmp	r4, r7
 8009434:	4622      	mov	r2, r4
 8009436:	4631      	mov	r1, r6
 8009438:	bf28      	it	cs
 800943a:	463a      	movcs	r2, r7
 800943c:	f7fd fd61 	bl	8006f02 <memcpy>
 8009440:	4631      	mov	r1, r6
 8009442:	4640      	mov	r0, r8
 8009444:	f7fe fbe4 	bl	8007c10 <_free_r>
 8009448:	e7e1      	b.n	800940e <_realloc_r+0x1e>
 800944a:	4635      	mov	r5, r6
 800944c:	e7df      	b.n	800940e <_realloc_r+0x1e>
	...

08009450 <fiprintf>:
 8009450:	b40e      	push	{r1, r2, r3}
 8009452:	b503      	push	{r0, r1, lr}
 8009454:	4601      	mov	r1, r0
 8009456:	ab03      	add	r3, sp, #12
 8009458:	4805      	ldr	r0, [pc, #20]	; (8009470 <fiprintf+0x20>)
 800945a:	f853 2b04 	ldr.w	r2, [r3], #4
 800945e:	6800      	ldr	r0, [r0, #0]
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	f000 f83d 	bl	80094e0 <_vfiprintf_r>
 8009466:	b002      	add	sp, #8
 8009468:	f85d eb04 	ldr.w	lr, [sp], #4
 800946c:	b003      	add	sp, #12
 800946e:	4770      	bx	lr
 8009470:	200001d0 	.word	0x200001d0

08009474 <abort>:
 8009474:	2006      	movs	r0, #6
 8009476:	b508      	push	{r3, lr}
 8009478:	f000 fa0a 	bl	8009890 <raise>
 800947c:	2001      	movs	r0, #1
 800947e:	f7f7 fffa 	bl	8001476 <_exit>

08009482 <_malloc_usable_size_r>:
 8009482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009486:	1f18      	subs	r0, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	bfbc      	itt	lt
 800948c:	580b      	ldrlt	r3, [r1, r0]
 800948e:	18c0      	addlt	r0, r0, r3
 8009490:	4770      	bx	lr

08009492 <__sfputc_r>:
 8009492:	6893      	ldr	r3, [r2, #8]
 8009494:	b410      	push	{r4}
 8009496:	3b01      	subs	r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	6093      	str	r3, [r2, #8]
 800949c:	da07      	bge.n	80094ae <__sfputc_r+0x1c>
 800949e:	6994      	ldr	r4, [r2, #24]
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	db01      	blt.n	80094a8 <__sfputc_r+0x16>
 80094a4:	290a      	cmp	r1, #10
 80094a6:	d102      	bne.n	80094ae <__sfputc_r+0x1c>
 80094a8:	bc10      	pop	{r4}
 80094aa:	f000 b933 	b.w	8009714 <__swbuf_r>
 80094ae:	6813      	ldr	r3, [r2, #0]
 80094b0:	1c58      	adds	r0, r3, #1
 80094b2:	6010      	str	r0, [r2, #0]
 80094b4:	7019      	strb	r1, [r3, #0]
 80094b6:	4608      	mov	r0, r1
 80094b8:	bc10      	pop	{r4}
 80094ba:	4770      	bx	lr

080094bc <__sfputs_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	4606      	mov	r6, r0
 80094c0:	460f      	mov	r7, r1
 80094c2:	4614      	mov	r4, r2
 80094c4:	18d5      	adds	r5, r2, r3
 80094c6:	42ac      	cmp	r4, r5
 80094c8:	d101      	bne.n	80094ce <__sfputs_r+0x12>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e007      	b.n	80094de <__sfputs_r+0x22>
 80094ce:	463a      	mov	r2, r7
 80094d0:	4630      	mov	r0, r6
 80094d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d6:	f7ff ffdc 	bl	8009492 <__sfputc_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d1f3      	bne.n	80094c6 <__sfputs_r+0xa>
 80094de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094e0 <_vfiprintf_r>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	460d      	mov	r5, r1
 80094e6:	4614      	mov	r4, r2
 80094e8:	4698      	mov	r8, r3
 80094ea:	4606      	mov	r6, r0
 80094ec:	b09d      	sub	sp, #116	; 0x74
 80094ee:	b118      	cbz	r0, 80094f8 <_vfiprintf_r+0x18>
 80094f0:	6a03      	ldr	r3, [r0, #32]
 80094f2:	b90b      	cbnz	r3, 80094f8 <_vfiprintf_r+0x18>
 80094f4:	f7fd fb9e 	bl	8006c34 <__sinit>
 80094f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094fa:	07d9      	lsls	r1, r3, #31
 80094fc:	d405      	bmi.n	800950a <_vfiprintf_r+0x2a>
 80094fe:	89ab      	ldrh	r3, [r5, #12]
 8009500:	059a      	lsls	r2, r3, #22
 8009502:	d402      	bmi.n	800950a <_vfiprintf_r+0x2a>
 8009504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009506:	f7fd fcec 	bl	8006ee2 <__retarget_lock_acquire_recursive>
 800950a:	89ab      	ldrh	r3, [r5, #12]
 800950c:	071b      	lsls	r3, r3, #28
 800950e:	d501      	bpl.n	8009514 <_vfiprintf_r+0x34>
 8009510:	692b      	ldr	r3, [r5, #16]
 8009512:	b99b      	cbnz	r3, 800953c <_vfiprintf_r+0x5c>
 8009514:	4629      	mov	r1, r5
 8009516:	4630      	mov	r0, r6
 8009518:	f000 f93a 	bl	8009790 <__swsetup_r>
 800951c:	b170      	cbz	r0, 800953c <_vfiprintf_r+0x5c>
 800951e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009520:	07dc      	lsls	r4, r3, #31
 8009522:	d504      	bpl.n	800952e <_vfiprintf_r+0x4e>
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	b01d      	add	sp, #116	; 0x74
 800952a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952e:	89ab      	ldrh	r3, [r5, #12]
 8009530:	0598      	lsls	r0, r3, #22
 8009532:	d4f7      	bmi.n	8009524 <_vfiprintf_r+0x44>
 8009534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009536:	f7fd fcd5 	bl	8006ee4 <__retarget_lock_release_recursive>
 800953a:	e7f3      	b.n	8009524 <_vfiprintf_r+0x44>
 800953c:	2300      	movs	r3, #0
 800953e:	9309      	str	r3, [sp, #36]	; 0x24
 8009540:	2320      	movs	r3, #32
 8009542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009546:	2330      	movs	r3, #48	; 0x30
 8009548:	f04f 0901 	mov.w	r9, #1
 800954c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009550:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009700 <_vfiprintf_r+0x220>
 8009554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009558:	4623      	mov	r3, r4
 800955a:	469a      	mov	sl, r3
 800955c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009560:	b10a      	cbz	r2, 8009566 <_vfiprintf_r+0x86>
 8009562:	2a25      	cmp	r2, #37	; 0x25
 8009564:	d1f9      	bne.n	800955a <_vfiprintf_r+0x7a>
 8009566:	ebba 0b04 	subs.w	fp, sl, r4
 800956a:	d00b      	beq.n	8009584 <_vfiprintf_r+0xa4>
 800956c:	465b      	mov	r3, fp
 800956e:	4622      	mov	r2, r4
 8009570:	4629      	mov	r1, r5
 8009572:	4630      	mov	r0, r6
 8009574:	f7ff ffa2 	bl	80094bc <__sfputs_r>
 8009578:	3001      	adds	r0, #1
 800957a:	f000 80a9 	beq.w	80096d0 <_vfiprintf_r+0x1f0>
 800957e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009580:	445a      	add	r2, fp
 8009582:	9209      	str	r2, [sp, #36]	; 0x24
 8009584:	f89a 3000 	ldrb.w	r3, [sl]
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 80a1 	beq.w	80096d0 <_vfiprintf_r+0x1f0>
 800958e:	2300      	movs	r3, #0
 8009590:	f04f 32ff 	mov.w	r2, #4294967295
 8009594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009598:	f10a 0a01 	add.w	sl, sl, #1
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	9307      	str	r3, [sp, #28]
 80095a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095a4:	931a      	str	r3, [sp, #104]	; 0x68
 80095a6:	4654      	mov	r4, sl
 80095a8:	2205      	movs	r2, #5
 80095aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ae:	4854      	ldr	r0, [pc, #336]	; (8009700 <_vfiprintf_r+0x220>)
 80095b0:	f7fd fc99 	bl	8006ee6 <memchr>
 80095b4:	9a04      	ldr	r2, [sp, #16]
 80095b6:	b9d8      	cbnz	r0, 80095f0 <_vfiprintf_r+0x110>
 80095b8:	06d1      	lsls	r1, r2, #27
 80095ba:	bf44      	itt	mi
 80095bc:	2320      	movmi	r3, #32
 80095be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095c2:	0713      	lsls	r3, r2, #28
 80095c4:	bf44      	itt	mi
 80095c6:	232b      	movmi	r3, #43	; 0x2b
 80095c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095cc:	f89a 3000 	ldrb.w	r3, [sl]
 80095d0:	2b2a      	cmp	r3, #42	; 0x2a
 80095d2:	d015      	beq.n	8009600 <_vfiprintf_r+0x120>
 80095d4:	4654      	mov	r4, sl
 80095d6:	2000      	movs	r0, #0
 80095d8:	f04f 0c0a 	mov.w	ip, #10
 80095dc:	9a07      	ldr	r2, [sp, #28]
 80095de:	4621      	mov	r1, r4
 80095e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e4:	3b30      	subs	r3, #48	; 0x30
 80095e6:	2b09      	cmp	r3, #9
 80095e8:	d94d      	bls.n	8009686 <_vfiprintf_r+0x1a6>
 80095ea:	b1b0      	cbz	r0, 800961a <_vfiprintf_r+0x13a>
 80095ec:	9207      	str	r2, [sp, #28]
 80095ee:	e014      	b.n	800961a <_vfiprintf_r+0x13a>
 80095f0:	eba0 0308 	sub.w	r3, r0, r8
 80095f4:	fa09 f303 	lsl.w	r3, r9, r3
 80095f8:	4313      	orrs	r3, r2
 80095fa:	46a2      	mov	sl, r4
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	e7d2      	b.n	80095a6 <_vfiprintf_r+0xc6>
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	1d19      	adds	r1, r3, #4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	9103      	str	r1, [sp, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	bfbb      	ittet	lt
 800960c:	425b      	neglt	r3, r3
 800960e:	f042 0202 	orrlt.w	r2, r2, #2
 8009612:	9307      	strge	r3, [sp, #28]
 8009614:	9307      	strlt	r3, [sp, #28]
 8009616:	bfb8      	it	lt
 8009618:	9204      	strlt	r2, [sp, #16]
 800961a:	7823      	ldrb	r3, [r4, #0]
 800961c:	2b2e      	cmp	r3, #46	; 0x2e
 800961e:	d10c      	bne.n	800963a <_vfiprintf_r+0x15a>
 8009620:	7863      	ldrb	r3, [r4, #1]
 8009622:	2b2a      	cmp	r3, #42	; 0x2a
 8009624:	d134      	bne.n	8009690 <_vfiprintf_r+0x1b0>
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	3402      	adds	r4, #2
 800962a:	1d1a      	adds	r2, r3, #4
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	9203      	str	r2, [sp, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	bfb8      	it	lt
 8009634:	f04f 33ff 	movlt.w	r3, #4294967295
 8009638:	9305      	str	r3, [sp, #20]
 800963a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009704 <_vfiprintf_r+0x224>
 800963e:	2203      	movs	r2, #3
 8009640:	4650      	mov	r0, sl
 8009642:	7821      	ldrb	r1, [r4, #0]
 8009644:	f7fd fc4f 	bl	8006ee6 <memchr>
 8009648:	b138      	cbz	r0, 800965a <_vfiprintf_r+0x17a>
 800964a:	2240      	movs	r2, #64	; 0x40
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	eba0 000a 	sub.w	r0, r0, sl
 8009652:	4082      	lsls	r2, r0
 8009654:	4313      	orrs	r3, r2
 8009656:	3401      	adds	r4, #1
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965e:	2206      	movs	r2, #6
 8009660:	4829      	ldr	r0, [pc, #164]	; (8009708 <_vfiprintf_r+0x228>)
 8009662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009666:	f7fd fc3e 	bl	8006ee6 <memchr>
 800966a:	2800      	cmp	r0, #0
 800966c:	d03f      	beq.n	80096ee <_vfiprintf_r+0x20e>
 800966e:	4b27      	ldr	r3, [pc, #156]	; (800970c <_vfiprintf_r+0x22c>)
 8009670:	bb1b      	cbnz	r3, 80096ba <_vfiprintf_r+0x1da>
 8009672:	9b03      	ldr	r3, [sp, #12]
 8009674:	3307      	adds	r3, #7
 8009676:	f023 0307 	bic.w	r3, r3, #7
 800967a:	3308      	adds	r3, #8
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009680:	443b      	add	r3, r7
 8009682:	9309      	str	r3, [sp, #36]	; 0x24
 8009684:	e768      	b.n	8009558 <_vfiprintf_r+0x78>
 8009686:	460c      	mov	r4, r1
 8009688:	2001      	movs	r0, #1
 800968a:	fb0c 3202 	mla	r2, ip, r2, r3
 800968e:	e7a6      	b.n	80095de <_vfiprintf_r+0xfe>
 8009690:	2300      	movs	r3, #0
 8009692:	f04f 0c0a 	mov.w	ip, #10
 8009696:	4619      	mov	r1, r3
 8009698:	3401      	adds	r4, #1
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	4620      	mov	r0, r4
 800969e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a2:	3a30      	subs	r2, #48	; 0x30
 80096a4:	2a09      	cmp	r2, #9
 80096a6:	d903      	bls.n	80096b0 <_vfiprintf_r+0x1d0>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0c6      	beq.n	800963a <_vfiprintf_r+0x15a>
 80096ac:	9105      	str	r1, [sp, #20]
 80096ae:	e7c4      	b.n	800963a <_vfiprintf_r+0x15a>
 80096b0:	4604      	mov	r4, r0
 80096b2:	2301      	movs	r3, #1
 80096b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096b8:	e7f0      	b.n	800969c <_vfiprintf_r+0x1bc>
 80096ba:	ab03      	add	r3, sp, #12
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	462a      	mov	r2, r5
 80096c0:	4630      	mov	r0, r6
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <_vfiprintf_r+0x230>)
 80096c4:	a904      	add	r1, sp, #16
 80096c6:	f7fc fc59 	bl	8005f7c <_printf_float>
 80096ca:	4607      	mov	r7, r0
 80096cc:	1c78      	adds	r0, r7, #1
 80096ce:	d1d6      	bne.n	800967e <_vfiprintf_r+0x19e>
 80096d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d2:	07d9      	lsls	r1, r3, #31
 80096d4:	d405      	bmi.n	80096e2 <_vfiprintf_r+0x202>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_vfiprintf_r+0x202>
 80096dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096de:	f7fd fc01 	bl	8006ee4 <__retarget_lock_release_recursive>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	065b      	lsls	r3, r3, #25
 80096e6:	f53f af1d 	bmi.w	8009524 <_vfiprintf_r+0x44>
 80096ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ec:	e71c      	b.n	8009528 <_vfiprintf_r+0x48>
 80096ee:	ab03      	add	r3, sp, #12
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	462a      	mov	r2, r5
 80096f4:	4630      	mov	r0, r6
 80096f6:	4b06      	ldr	r3, [pc, #24]	; (8009710 <_vfiprintf_r+0x230>)
 80096f8:	a904      	add	r1, sp, #16
 80096fa:	f7fc fedf 	bl	80064bc <_printf_i>
 80096fe:	e7e4      	b.n	80096ca <_vfiprintf_r+0x1ea>
 8009700:	0800b0ed 	.word	0x0800b0ed
 8009704:	0800b0f3 	.word	0x0800b0f3
 8009708:	0800b0f7 	.word	0x0800b0f7
 800970c:	08005f7d 	.word	0x08005f7d
 8009710:	080094bd 	.word	0x080094bd

08009714 <__swbuf_r>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	460e      	mov	r6, r1
 8009718:	4614      	mov	r4, r2
 800971a:	4605      	mov	r5, r0
 800971c:	b118      	cbz	r0, 8009726 <__swbuf_r+0x12>
 800971e:	6a03      	ldr	r3, [r0, #32]
 8009720:	b90b      	cbnz	r3, 8009726 <__swbuf_r+0x12>
 8009722:	f7fd fa87 	bl	8006c34 <__sinit>
 8009726:	69a3      	ldr	r3, [r4, #24]
 8009728:	60a3      	str	r3, [r4, #8]
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	071a      	lsls	r2, r3, #28
 800972e:	d525      	bpl.n	800977c <__swbuf_r+0x68>
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	b31b      	cbz	r3, 800977c <__swbuf_r+0x68>
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	6922      	ldr	r2, [r4, #16]
 8009738:	b2f6      	uxtb	r6, r6
 800973a:	1a98      	subs	r0, r3, r2
 800973c:	6963      	ldr	r3, [r4, #20]
 800973e:	4637      	mov	r7, r6
 8009740:	4283      	cmp	r3, r0
 8009742:	dc04      	bgt.n	800974e <__swbuf_r+0x3a>
 8009744:	4621      	mov	r1, r4
 8009746:	4628      	mov	r0, r5
 8009748:	f7ff fdce 	bl	80092e8 <_fflush_r>
 800974c:	b9e0      	cbnz	r0, 8009788 <__swbuf_r+0x74>
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	3b01      	subs	r3, #1
 8009752:	60a3      	str	r3, [r4, #8]
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	6022      	str	r2, [r4, #0]
 800975a:	701e      	strb	r6, [r3, #0]
 800975c:	6962      	ldr	r2, [r4, #20]
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	429a      	cmp	r2, r3
 8009762:	d004      	beq.n	800976e <__swbuf_r+0x5a>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	07db      	lsls	r3, r3, #31
 8009768:	d506      	bpl.n	8009778 <__swbuf_r+0x64>
 800976a:	2e0a      	cmp	r6, #10
 800976c:	d104      	bne.n	8009778 <__swbuf_r+0x64>
 800976e:	4621      	mov	r1, r4
 8009770:	4628      	mov	r0, r5
 8009772:	f7ff fdb9 	bl	80092e8 <_fflush_r>
 8009776:	b938      	cbnz	r0, 8009788 <__swbuf_r+0x74>
 8009778:	4638      	mov	r0, r7
 800977a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977c:	4621      	mov	r1, r4
 800977e:	4628      	mov	r0, r5
 8009780:	f000 f806 	bl	8009790 <__swsetup_r>
 8009784:	2800      	cmp	r0, #0
 8009786:	d0d5      	beq.n	8009734 <__swbuf_r+0x20>
 8009788:	f04f 37ff 	mov.w	r7, #4294967295
 800978c:	e7f4      	b.n	8009778 <__swbuf_r+0x64>
	...

08009790 <__swsetup_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4b2a      	ldr	r3, [pc, #168]	; (800983c <__swsetup_r+0xac>)
 8009794:	4605      	mov	r5, r0
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	460c      	mov	r4, r1
 800979a:	b118      	cbz	r0, 80097a4 <__swsetup_r+0x14>
 800979c:	6a03      	ldr	r3, [r0, #32]
 800979e:	b90b      	cbnz	r3, 80097a4 <__swsetup_r+0x14>
 80097a0:	f7fd fa48 	bl	8006c34 <__sinit>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097aa:	0718      	lsls	r0, r3, #28
 80097ac:	d422      	bmi.n	80097f4 <__swsetup_r+0x64>
 80097ae:	06d9      	lsls	r1, r3, #27
 80097b0:	d407      	bmi.n	80097c2 <__swsetup_r+0x32>
 80097b2:	2309      	movs	r3, #9
 80097b4:	602b      	str	r3, [r5, #0]
 80097b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	e034      	b.n	800982c <__swsetup_r+0x9c>
 80097c2:	0758      	lsls	r0, r3, #29
 80097c4:	d512      	bpl.n	80097ec <__swsetup_r+0x5c>
 80097c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097c8:	b141      	cbz	r1, 80097dc <__swsetup_r+0x4c>
 80097ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ce:	4299      	cmp	r1, r3
 80097d0:	d002      	beq.n	80097d8 <__swsetup_r+0x48>
 80097d2:	4628      	mov	r0, r5
 80097d4:	f7fe fa1c 	bl	8007c10 <_free_r>
 80097d8:	2300      	movs	r3, #0
 80097da:	6363      	str	r3, [r4, #52]	; 0x34
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	2300      	movs	r3, #0
 80097e6:	6063      	str	r3, [r4, #4]
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f043 0308 	orr.w	r3, r3, #8
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	b94b      	cbnz	r3, 800980c <__swsetup_r+0x7c>
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009802:	d003      	beq.n	800980c <__swsetup_r+0x7c>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f000 f883 	bl	8009912 <__smakebuf_r>
 800980c:	89a0      	ldrh	r0, [r4, #12]
 800980e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009812:	f010 0301 	ands.w	r3, r0, #1
 8009816:	d00a      	beq.n	800982e <__swsetup_r+0x9e>
 8009818:	2300      	movs	r3, #0
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	6963      	ldr	r3, [r4, #20]
 800981e:	425b      	negs	r3, r3
 8009820:	61a3      	str	r3, [r4, #24]
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	b943      	cbnz	r3, 8009838 <__swsetup_r+0xa8>
 8009826:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800982a:	d1c4      	bne.n	80097b6 <__swsetup_r+0x26>
 800982c:	bd38      	pop	{r3, r4, r5, pc}
 800982e:	0781      	lsls	r1, r0, #30
 8009830:	bf58      	it	pl
 8009832:	6963      	ldrpl	r3, [r4, #20]
 8009834:	60a3      	str	r3, [r4, #8]
 8009836:	e7f4      	b.n	8009822 <__swsetup_r+0x92>
 8009838:	2000      	movs	r0, #0
 800983a:	e7f7      	b.n	800982c <__swsetup_r+0x9c>
 800983c:	200001d0 	.word	0x200001d0

08009840 <_raise_r>:
 8009840:	291f      	cmp	r1, #31
 8009842:	b538      	push	{r3, r4, r5, lr}
 8009844:	4604      	mov	r4, r0
 8009846:	460d      	mov	r5, r1
 8009848:	d904      	bls.n	8009854 <_raise_r+0x14>
 800984a:	2316      	movs	r3, #22
 800984c:	6003      	str	r3, [r0, #0]
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009856:	b112      	cbz	r2, 800985e <_raise_r+0x1e>
 8009858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800985c:	b94b      	cbnz	r3, 8009872 <_raise_r+0x32>
 800985e:	4620      	mov	r0, r4
 8009860:	f000 f830 	bl	80098c4 <_getpid_r>
 8009864:	462a      	mov	r2, r5
 8009866:	4601      	mov	r1, r0
 8009868:	4620      	mov	r0, r4
 800986a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986e:	f000 b817 	b.w	80098a0 <_kill_r>
 8009872:	2b01      	cmp	r3, #1
 8009874:	d00a      	beq.n	800988c <_raise_r+0x4c>
 8009876:	1c59      	adds	r1, r3, #1
 8009878:	d103      	bne.n	8009882 <_raise_r+0x42>
 800987a:	2316      	movs	r3, #22
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	2001      	movs	r0, #1
 8009880:	e7e7      	b.n	8009852 <_raise_r+0x12>
 8009882:	2400      	movs	r4, #0
 8009884:	4628      	mov	r0, r5
 8009886:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800988a:	4798      	blx	r3
 800988c:	2000      	movs	r0, #0
 800988e:	e7e0      	b.n	8009852 <_raise_r+0x12>

08009890 <raise>:
 8009890:	4b02      	ldr	r3, [pc, #8]	; (800989c <raise+0xc>)
 8009892:	4601      	mov	r1, r0
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	f7ff bfd3 	b.w	8009840 <_raise_r>
 800989a:	bf00      	nop
 800989c:	200001d0 	.word	0x200001d0

080098a0 <_kill_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	2300      	movs	r3, #0
 80098a4:	4d06      	ldr	r5, [pc, #24]	; (80098c0 <_kill_r+0x20>)
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	f7f7 fdd2 	bl	8001456 <_kill>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	d102      	bne.n	80098bc <_kill_r+0x1c>
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	b103      	cbz	r3, 80098bc <_kill_r+0x1c>
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	200004f8 	.word	0x200004f8

080098c4 <_getpid_r>:
 80098c4:	f7f7 bdc0 	b.w	8001448 <_getpid>

080098c8 <__swhatbuf_r>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	460c      	mov	r4, r1
 80098cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d0:	4615      	mov	r5, r2
 80098d2:	2900      	cmp	r1, #0
 80098d4:	461e      	mov	r6, r3
 80098d6:	b096      	sub	sp, #88	; 0x58
 80098d8:	da0c      	bge.n	80098f4 <__swhatbuf_r+0x2c>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	2100      	movs	r1, #0
 80098de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098e2:	bf0c      	ite	eq
 80098e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80098e8:	2340      	movne	r3, #64	; 0x40
 80098ea:	2000      	movs	r0, #0
 80098ec:	6031      	str	r1, [r6, #0]
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	b016      	add	sp, #88	; 0x58
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	466a      	mov	r2, sp
 80098f6:	f000 f849 	bl	800998c <_fstat_r>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	dbed      	blt.n	80098da <__swhatbuf_r+0x12>
 80098fe:	9901      	ldr	r1, [sp, #4]
 8009900:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009904:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009908:	4259      	negs	r1, r3
 800990a:	4159      	adcs	r1, r3
 800990c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009910:	e7eb      	b.n	80098ea <__swhatbuf_r+0x22>

08009912 <__smakebuf_r>:
 8009912:	898b      	ldrh	r3, [r1, #12]
 8009914:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009916:	079d      	lsls	r5, r3, #30
 8009918:	4606      	mov	r6, r0
 800991a:	460c      	mov	r4, r1
 800991c:	d507      	bpl.n	800992e <__smakebuf_r+0x1c>
 800991e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	2301      	movs	r3, #1
 8009928:	6163      	str	r3, [r4, #20]
 800992a:	b002      	add	sp, #8
 800992c:	bd70      	pop	{r4, r5, r6, pc}
 800992e:	466a      	mov	r2, sp
 8009930:	ab01      	add	r3, sp, #4
 8009932:	f7ff ffc9 	bl	80098c8 <__swhatbuf_r>
 8009936:	9900      	ldr	r1, [sp, #0]
 8009938:	4605      	mov	r5, r0
 800993a:	4630      	mov	r0, r6
 800993c:	f7fe fd32 	bl	80083a4 <_malloc_r>
 8009940:	b948      	cbnz	r0, 8009956 <__smakebuf_r+0x44>
 8009942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009946:	059a      	lsls	r2, r3, #22
 8009948:	d4ef      	bmi.n	800992a <__smakebuf_r+0x18>
 800994a:	f023 0303 	bic.w	r3, r3, #3
 800994e:	f043 0302 	orr.w	r3, r3, #2
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	e7e3      	b.n	800991e <__smakebuf_r+0xc>
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	6020      	str	r0, [r4, #0]
 800995a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	6120      	str	r0, [r4, #16]
 8009964:	6163      	str	r3, [r4, #20]
 8009966:	9b01      	ldr	r3, [sp, #4]
 8009968:	b15b      	cbz	r3, 8009982 <__smakebuf_r+0x70>
 800996a:	4630      	mov	r0, r6
 800996c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009970:	f000 f81e 	bl	80099b0 <_isatty_r>
 8009974:	b128      	cbz	r0, 8009982 <__smakebuf_r+0x70>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f023 0303 	bic.w	r3, r3, #3
 800997c:	f043 0301 	orr.w	r3, r3, #1
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	431d      	orrs	r5, r3
 8009986:	81a5      	strh	r5, [r4, #12]
 8009988:	e7cf      	b.n	800992a <__smakebuf_r+0x18>
	...

0800998c <_fstat_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	2300      	movs	r3, #0
 8009990:	4d06      	ldr	r5, [pc, #24]	; (80099ac <_fstat_r+0x20>)
 8009992:	4604      	mov	r4, r0
 8009994:	4608      	mov	r0, r1
 8009996:	4611      	mov	r1, r2
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	f7f7 fdba 	bl	8001512 <_fstat>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	d102      	bne.n	80099a8 <_fstat_r+0x1c>
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	b103      	cbz	r3, 80099a8 <_fstat_r+0x1c>
 80099a6:	6023      	str	r3, [r4, #0]
 80099a8:	bd38      	pop	{r3, r4, r5, pc}
 80099aa:	bf00      	nop
 80099ac:	200004f8 	.word	0x200004f8

080099b0 <_isatty_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	2300      	movs	r3, #0
 80099b4:	4d05      	ldr	r5, [pc, #20]	; (80099cc <_isatty_r+0x1c>)
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	f7f7 fdb8 	bl	8001530 <_isatty>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d102      	bne.n	80099ca <_isatty_r+0x1a>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	b103      	cbz	r3, 80099ca <_isatty_r+0x1a>
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	200004f8 	.word	0x200004f8

080099d0 <fmod>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	4680      	mov	r8, r0
 80099d6:	4689      	mov	r9, r1
 80099d8:	4616      	mov	r6, r2
 80099da:	461f      	mov	r7, r3
 80099dc:	f000 fa22 	bl	8009e24 <__ieee754_fmod>
 80099e0:	4632      	mov	r2, r6
 80099e2:	4604      	mov	r4, r0
 80099e4:	460d      	mov	r5, r1
 80099e6:	463b      	mov	r3, r7
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	f7f7 f80e 	bl	8000a0c <__aeabi_dcmpun>
 80099f0:	b990      	cbnz	r0, 8009a18 <fmod+0x48>
 80099f2:	2200      	movs	r2, #0
 80099f4:	2300      	movs	r3, #0
 80099f6:	4630      	mov	r0, r6
 80099f8:	4639      	mov	r1, r7
 80099fa:	f7f6 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80099fe:	b158      	cbz	r0, 8009a18 <fmod+0x48>
 8009a00:	f7fd fa44 	bl	8006e8c <__errno>
 8009a04:	2321      	movs	r3, #33	; 0x21
 8009a06:	2200      	movs	r2, #0
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	f7f6 fe8c 	bl	800072c <__aeabi_ddiv>
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009a20 <cos>:
 8009a20:	b530      	push	{r4, r5, lr}
 8009a22:	4a20      	ldr	r2, [pc, #128]	; (8009aa4 <cos+0x84>)
 8009a24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	dc06      	bgt.n	8009a3c <cos+0x1c>
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2300      	movs	r3, #0
 8009a32:	b007      	add	sp, #28
 8009a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a38:	f000 b87e 	b.w	8009b38 <__kernel_cos>
 8009a3c:	4a1a      	ldr	r2, [pc, #104]	; (8009aa8 <cos+0x88>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	dd05      	ble.n	8009a4e <cos+0x2e>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	f7f6 fb8f 	bl	8000168 <__aeabi_dsub>
 8009a4a:	b007      	add	sp, #28
 8009a4c:	bd30      	pop	{r4, r5, pc}
 8009a4e:	aa02      	add	r2, sp, #8
 8009a50:	f000 fafa 	bl	800a048 <__ieee754_rem_pio2>
 8009a54:	f000 0003 	and.w	r0, r0, #3
 8009a58:	2801      	cmp	r0, #1
 8009a5a:	d009      	beq.n	8009a70 <cos+0x50>
 8009a5c:	2802      	cmp	r0, #2
 8009a5e:	d011      	beq.n	8009a84 <cos+0x64>
 8009a60:	b9b8      	cbnz	r0, 8009a92 <cos+0x72>
 8009a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6a:	f000 f865 	bl	8009b38 <__kernel_cos>
 8009a6e:	e7ec      	b.n	8009a4a <cos+0x2a>
 8009a70:	9000      	str	r0, [sp, #0]
 8009a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a7a:	f000 f91d 	bl	8009cb8 <__kernel_sin>
 8009a7e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009a82:	e7e2      	b.n	8009a4a <cos+0x2a>
 8009a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8c:	f000 f854 	bl	8009b38 <__kernel_cos>
 8009a90:	e7f5      	b.n	8009a7e <cos+0x5e>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a9e:	f000 f90b 	bl	8009cb8 <__kernel_sin>
 8009aa2:	e7d2      	b.n	8009a4a <cos+0x2a>
 8009aa4:	3fe921fb 	.word	0x3fe921fb
 8009aa8:	7fefffff 	.word	0x7fefffff

08009aac <sin>:
 8009aac:	b530      	push	{r4, r5, lr}
 8009aae:	4a20      	ldr	r2, [pc, #128]	; (8009b30 <sin+0x84>)
 8009ab0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	dc06      	bgt.n	8009ac8 <sin+0x1c>
 8009aba:	2300      	movs	r3, #0
 8009abc:	2200      	movs	r2, #0
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f000 f8f9 	bl	8009cb8 <__kernel_sin>
 8009ac6:	e006      	b.n	8009ad6 <sin+0x2a>
 8009ac8:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <sin+0x88>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	dd05      	ble.n	8009ada <sin+0x2e>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	f7f6 fb49 	bl	8000168 <__aeabi_dsub>
 8009ad6:	b007      	add	sp, #28
 8009ad8:	bd30      	pop	{r4, r5, pc}
 8009ada:	aa02      	add	r2, sp, #8
 8009adc:	f000 fab4 	bl	800a048 <__ieee754_rem_pio2>
 8009ae0:	f000 0003 	and.w	r0, r0, #3
 8009ae4:	2801      	cmp	r0, #1
 8009ae6:	d009      	beq.n	8009afc <sin+0x50>
 8009ae8:	2802      	cmp	r0, #2
 8009aea:	d00e      	beq.n	8009b0a <sin+0x5e>
 8009aec:	b9c0      	cbnz	r0, 8009b20 <sin+0x74>
 8009aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af2:	2301      	movs	r3, #1
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009afa:	e7e2      	b.n	8009ac2 <sin+0x16>
 8009afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b04:	f000 f818 	bl	8009b38 <__kernel_cos>
 8009b08:	e7e5      	b.n	8009ad6 <sin+0x2a>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b16:	f000 f8cf 	bl	8009cb8 <__kernel_sin>
 8009b1a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009b1e:	e7da      	b.n	8009ad6 <sin+0x2a>
 8009b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b28:	f000 f806 	bl	8009b38 <__kernel_cos>
 8009b2c:	e7f5      	b.n	8009b1a <sin+0x6e>
 8009b2e:	bf00      	nop
 8009b30:	3fe921fb 	.word	0x3fe921fb
 8009b34:	7fefffff 	.word	0x7fefffff

08009b38 <__kernel_cos>:
 8009b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009b40:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009b44:	4680      	mov	r8, r0
 8009b46:	460f      	mov	r7, r1
 8009b48:	e9cd 2300 	strd	r2, r3, [sp]
 8009b4c:	da04      	bge.n	8009b58 <__kernel_cos+0x20>
 8009b4e:	f7f6 ff73 	bl	8000a38 <__aeabi_d2iz>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f000 8086 	beq.w	8009c64 <__kernel_cos+0x12c>
 8009b58:	4642      	mov	r2, r8
 8009b5a:	463b      	mov	r3, r7
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 fcba 	bl	80004d8 <__aeabi_dmul>
 8009b64:	2200      	movs	r2, #0
 8009b66:	4b4e      	ldr	r3, [pc, #312]	; (8009ca0 <__kernel_cos+0x168>)
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	f7f6 fcb4 	bl	80004d8 <__aeabi_dmul>
 8009b70:	a33f      	add	r3, pc, #252	; (adr r3, 8009c70 <__kernel_cos+0x138>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	4682      	mov	sl, r0
 8009b78:	468b      	mov	fp, r1
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	f7f6 fcab 	bl	80004d8 <__aeabi_dmul>
 8009b82:	a33d      	add	r3, pc, #244	; (adr r3, 8009c78 <__kernel_cos+0x140>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f7f6 faf0 	bl	800016c <__adddf3>
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	462b      	mov	r3, r5
 8009b90:	f7f6 fca2 	bl	80004d8 <__aeabi_dmul>
 8009b94:	a33a      	add	r3, pc, #232	; (adr r3, 8009c80 <__kernel_cos+0x148>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f7f6 fae5 	bl	8000168 <__aeabi_dsub>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	f7f6 fc99 	bl	80004d8 <__aeabi_dmul>
 8009ba6:	a338      	add	r3, pc, #224	; (adr r3, 8009c88 <__kernel_cos+0x150>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7f6 fade 	bl	800016c <__adddf3>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	f7f6 fc90 	bl	80004d8 <__aeabi_dmul>
 8009bb8:	a335      	add	r3, pc, #212	; (adr r3, 8009c90 <__kernel_cos+0x158>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	f7f6 fad3 	bl	8000168 <__aeabi_dsub>
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	462b      	mov	r3, r5
 8009bc6:	f7f6 fc87 	bl	80004d8 <__aeabi_dmul>
 8009bca:	a333      	add	r3, pc, #204	; (adr r3, 8009c98 <__kernel_cos+0x160>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 facc 	bl	800016c <__adddf3>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	462b      	mov	r3, r5
 8009bd8:	f7f6 fc7e 	bl	80004d8 <__aeabi_dmul>
 8009bdc:	4622      	mov	r2, r4
 8009bde:	462b      	mov	r3, r5
 8009be0:	f7f6 fc7a 	bl	80004d8 <__aeabi_dmul>
 8009be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	4640      	mov	r0, r8
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f7f6 fc72 	bl	80004d8 <__aeabi_dmul>
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7f6 fab4 	bl	8000168 <__aeabi_dsub>
 8009c00:	4b28      	ldr	r3, [pc, #160]	; (8009ca4 <__kernel_cos+0x16c>)
 8009c02:	4680      	mov	r8, r0
 8009c04:	429e      	cmp	r6, r3
 8009c06:	4689      	mov	r9, r1
 8009c08:	dc0e      	bgt.n	8009c28 <__kernel_cos+0xf0>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4650      	mov	r0, sl
 8009c10:	4659      	mov	r1, fp
 8009c12:	f7f6 faa9 	bl	8000168 <__aeabi_dsub>
 8009c16:	4602      	mov	r2, r0
 8009c18:	2000      	movs	r0, #0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4922      	ldr	r1, [pc, #136]	; (8009ca8 <__kernel_cos+0x170>)
 8009c1e:	f7f6 faa3 	bl	8000168 <__aeabi_dsub>
 8009c22:	b003      	add	sp, #12
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c28:	2400      	movs	r4, #0
 8009c2a:	4b20      	ldr	r3, [pc, #128]	; (8009cac <__kernel_cos+0x174>)
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	429e      	cmp	r6, r3
 8009c30:	bfcc      	ite	gt
 8009c32:	4d1f      	ldrgt	r5, [pc, #124]	; (8009cb0 <__kernel_cos+0x178>)
 8009c34:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009c38:	462b      	mov	r3, r5
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	491a      	ldr	r1, [pc, #104]	; (8009ca8 <__kernel_cos+0x170>)
 8009c3e:	f7f6 fa93 	bl	8000168 <__aeabi_dsub>
 8009c42:	4622      	mov	r2, r4
 8009c44:	4606      	mov	r6, r0
 8009c46:	460f      	mov	r7, r1
 8009c48:	462b      	mov	r3, r5
 8009c4a:	4650      	mov	r0, sl
 8009c4c:	4659      	mov	r1, fp
 8009c4e:	f7f6 fa8b 	bl	8000168 <__aeabi_dsub>
 8009c52:	4642      	mov	r2, r8
 8009c54:	464b      	mov	r3, r9
 8009c56:	f7f6 fa87 	bl	8000168 <__aeabi_dsub>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4630      	mov	r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	e7dc      	b.n	8009c1e <__kernel_cos+0xe6>
 8009c64:	2000      	movs	r0, #0
 8009c66:	4910      	ldr	r1, [pc, #64]	; (8009ca8 <__kernel_cos+0x170>)
 8009c68:	e7db      	b.n	8009c22 <__kernel_cos+0xea>
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w
 8009c70:	be8838d4 	.word	0xbe8838d4
 8009c74:	bda8fae9 	.word	0xbda8fae9
 8009c78:	bdb4b1c4 	.word	0xbdb4b1c4
 8009c7c:	3e21ee9e 	.word	0x3e21ee9e
 8009c80:	809c52ad 	.word	0x809c52ad
 8009c84:	3e927e4f 	.word	0x3e927e4f
 8009c88:	19cb1590 	.word	0x19cb1590
 8009c8c:	3efa01a0 	.word	0x3efa01a0
 8009c90:	16c15177 	.word	0x16c15177
 8009c94:	3f56c16c 	.word	0x3f56c16c
 8009c98:	5555554c 	.word	0x5555554c
 8009c9c:	3fa55555 	.word	0x3fa55555
 8009ca0:	3fe00000 	.word	0x3fe00000
 8009ca4:	3fd33332 	.word	0x3fd33332
 8009ca8:	3ff00000 	.word	0x3ff00000
 8009cac:	3fe90000 	.word	0x3fe90000
 8009cb0:	3fd20000 	.word	0x3fd20000
 8009cb4:	00000000 	.word	0x00000000

08009cb8 <__kernel_sin>:
 8009cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	b086      	sub	sp, #24
 8009cbe:	e9cd 2300 	strd	r2, r3, [sp]
 8009cc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cc6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009cca:	4682      	mov	sl, r0
 8009ccc:	460c      	mov	r4, r1
 8009cce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009cd0:	da03      	bge.n	8009cda <__kernel_sin+0x22>
 8009cd2:	f7f6 feb1 	bl	8000a38 <__aeabi_d2iz>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d050      	beq.n	8009d7c <__kernel_sin+0xc4>
 8009cda:	4652      	mov	r2, sl
 8009cdc:	4623      	mov	r3, r4
 8009cde:	4650      	mov	r0, sl
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	f7f6 fbf9 	bl	80004d8 <__aeabi_dmul>
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460f      	mov	r7, r1
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4650      	mov	r0, sl
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	f7f6 fbf1 	bl	80004d8 <__aeabi_dmul>
 8009cf6:	a33e      	add	r3, pc, #248	; (adr r3, 8009df0 <__kernel_sin+0x138>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	4689      	mov	r9, r1
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fbe8 	bl	80004d8 <__aeabi_dmul>
 8009d08:	a33b      	add	r3, pc, #236	; (adr r3, 8009df8 <__kernel_sin+0x140>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	f7f6 fa2b 	bl	8000168 <__aeabi_dsub>
 8009d12:	4632      	mov	r2, r6
 8009d14:	463b      	mov	r3, r7
 8009d16:	f7f6 fbdf 	bl	80004d8 <__aeabi_dmul>
 8009d1a:	a339      	add	r3, pc, #228	; (adr r3, 8009e00 <__kernel_sin+0x148>)
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	f7f6 fa24 	bl	800016c <__adddf3>
 8009d24:	4632      	mov	r2, r6
 8009d26:	463b      	mov	r3, r7
 8009d28:	f7f6 fbd6 	bl	80004d8 <__aeabi_dmul>
 8009d2c:	a336      	add	r3, pc, #216	; (adr r3, 8009e08 <__kernel_sin+0x150>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f7f6 fa19 	bl	8000168 <__aeabi_dsub>
 8009d36:	4632      	mov	r2, r6
 8009d38:	463b      	mov	r3, r7
 8009d3a:	f7f6 fbcd 	bl	80004d8 <__aeabi_dmul>
 8009d3e:	a334      	add	r3, pc, #208	; (adr r3, 8009e10 <__kernel_sin+0x158>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f7f6 fa12 	bl	800016c <__adddf3>
 8009d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d4c:	b9dd      	cbnz	r5, 8009d86 <__kernel_sin+0xce>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	f7f6 fbbf 	bl	80004d8 <__aeabi_dmul>
 8009d5a:	a32f      	add	r3, pc, #188	; (adr r3, 8009e18 <__kernel_sin+0x160>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 fa02 	bl	8000168 <__aeabi_dsub>
 8009d64:	4642      	mov	r2, r8
 8009d66:	464b      	mov	r3, r9
 8009d68:	f7f6 fbb6 	bl	80004d8 <__aeabi_dmul>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4650      	mov	r0, sl
 8009d72:	4621      	mov	r1, r4
 8009d74:	f7f6 f9fa 	bl	800016c <__adddf3>
 8009d78:	4682      	mov	sl, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	4650      	mov	r0, sl
 8009d7e:	4621      	mov	r1, r4
 8009d80:	b006      	add	sp, #24
 8009d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d86:	2200      	movs	r2, #0
 8009d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d8c:	4b24      	ldr	r3, [pc, #144]	; (8009e20 <__kernel_sin+0x168>)
 8009d8e:	f7f6 fba3 	bl	80004d8 <__aeabi_dmul>
 8009d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	f7f6 fb9b 	bl	80004d8 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009daa:	f7f6 f9dd 	bl	8000168 <__aeabi_dsub>
 8009dae:	4632      	mov	r2, r6
 8009db0:	463b      	mov	r3, r7
 8009db2:	f7f6 fb91 	bl	80004d8 <__aeabi_dmul>
 8009db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dba:	f7f6 f9d5 	bl	8000168 <__aeabi_dsub>
 8009dbe:	a316      	add	r3, pc, #88	; (adr r3, 8009e18 <__kernel_sin+0x160>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	460f      	mov	r7, r1
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fb84 	bl	80004d8 <__aeabi_dmul>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	f7f6 f9c8 	bl	800016c <__adddf3>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4650      	mov	r0, sl
 8009de2:	4621      	mov	r1, r4
 8009de4:	f7f6 f9c0 	bl	8000168 <__aeabi_dsub>
 8009de8:	e7c6      	b.n	8009d78 <__kernel_sin+0xc0>
 8009dea:	bf00      	nop
 8009dec:	f3af 8000 	nop.w
 8009df0:	5acfd57c 	.word	0x5acfd57c
 8009df4:	3de5d93a 	.word	0x3de5d93a
 8009df8:	8a2b9ceb 	.word	0x8a2b9ceb
 8009dfc:	3e5ae5e6 	.word	0x3e5ae5e6
 8009e00:	57b1fe7d 	.word	0x57b1fe7d
 8009e04:	3ec71de3 	.word	0x3ec71de3
 8009e08:	19c161d5 	.word	0x19c161d5
 8009e0c:	3f2a01a0 	.word	0x3f2a01a0
 8009e10:	1110f8a6 	.word	0x1110f8a6
 8009e14:	3f811111 	.word	0x3f811111
 8009e18:	55555549 	.word	0x55555549
 8009e1c:	3fc55555 	.word	0x3fc55555
 8009e20:	3fe00000 	.word	0x3fe00000

08009e24 <__ieee754_fmod>:
 8009e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e28:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8009e2c:	4684      	mov	ip, r0
 8009e2e:	461d      	mov	r5, r3
 8009e30:	4608      	mov	r0, r1
 8009e32:	4619      	mov	r1, r3
 8009e34:	ea57 0302 	orrs.w	r3, r7, r2
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4616      	mov	r6, r2
 8009e3c:	4696      	mov	lr, r2
 8009e3e:	d00c      	beq.n	8009e5a <__ieee754_fmod+0x36>
 8009e40:	4b7b      	ldr	r3, [pc, #492]	; (800a030 <__ieee754_fmod+0x20c>)
 8009e42:	f020 4900 	bic.w	r9, r0, #2147483648	; 0x80000000
 8009e46:	4599      	cmp	r9, r3
 8009e48:	4682      	mov	sl, r0
 8009e4a:	dc06      	bgt.n	8009e5a <__ieee754_fmod+0x36>
 8009e4c:	4253      	negs	r3, r2
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	4a78      	ldr	r2, [pc, #480]	; (800a034 <__ieee754_fmod+0x210>)
 8009e52:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d90d      	bls.n	8009e76 <__ieee754_fmod+0x52>
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4660      	mov	r0, ip
 8009e62:	4629      	mov	r1, r5
 8009e64:	f7f6 fb38 	bl	80004d8 <__aeabi_dmul>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	f7f6 fc5e 	bl	800072c <__aeabi_ddiv>
 8009e70:	4684      	mov	ip, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	e00e      	b.n	8009e94 <__ieee754_fmod+0x70>
 8009e76:	45b9      	cmp	r9, r7
 8009e78:	46e0      	mov	r8, ip
 8009e7a:	4661      	mov	r1, ip
 8009e7c:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 8009e80:	dc0d      	bgt.n	8009e9e <__ieee754_fmod+0x7a>
 8009e82:	db07      	blt.n	8009e94 <__ieee754_fmod+0x70>
 8009e84:	45b4      	cmp	ip, r6
 8009e86:	d305      	bcc.n	8009e94 <__ieee754_fmod+0x70>
 8009e88:	d109      	bne.n	8009e9e <__ieee754_fmod+0x7a>
 8009e8a:	4b6b      	ldr	r3, [pc, #428]	; (800a038 <__ieee754_fmod+0x214>)
 8009e8c:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8009e90:	e9d3 c000 	ldrd	ip, r0, [r3]
 8009e94:	4603      	mov	r3, r0
 8009e96:	4660      	mov	r0, ip
 8009e98:	4619      	mov	r1, r3
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	4a65      	ldr	r2, [pc, #404]	; (800a034 <__ieee754_fmod+0x210>)
 8009ea0:	ea1a 0f02 	tst.w	sl, r2
 8009ea4:	d149      	bne.n	8009f3a <__ieee754_fmod+0x116>
 8009ea6:	f1b9 0f00 	cmp.w	r9, #0
 8009eaa:	d13e      	bne.n	8009f2a <__ieee754_fmod+0x106>
 8009eac:	4643      	mov	r3, r8
 8009eae:	4863      	ldr	r0, [pc, #396]	; (800a03c <__ieee754_fmod+0x218>)
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dc37      	bgt.n	8009f24 <__ieee754_fmod+0x100>
 8009eb4:	4215      	tst	r5, r2
 8009eb6:	d14f      	bne.n	8009f58 <__ieee754_fmod+0x134>
 8009eb8:	2f00      	cmp	r7, #0
 8009eba:	d146      	bne.n	8009f4a <__ieee754_fmod+0x126>
 8009ebc:	4633      	mov	r3, r6
 8009ebe:	4a5f      	ldr	r2, [pc, #380]	; (800a03c <__ieee754_fmod+0x218>)
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dc3f      	bgt.n	8009f44 <__ieee754_fmod+0x120>
 8009ec4:	4b5e      	ldr	r3, [pc, #376]	; (800a040 <__ieee754_fmod+0x21c>)
 8009ec6:	4298      	cmp	r0, r3
 8009ec8:	db4a      	blt.n	8009f60 <__ieee754_fmod+0x13c>
 8009eca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8009ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed2:	f8df c16c 	ldr.w	ip, [pc, #364]	; 800a040 <__ieee754_fmod+0x21c>
 8009ed6:	4562      	cmp	r2, ip
 8009ed8:	db57      	blt.n	8009f8a <__ieee754_fmod+0x166>
 8009eda:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009ede:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8009ee2:	1a80      	subs	r0, r0, r2
 8009ee4:	1b5e      	subs	r6, r3, r5
 8009ee6:	eba1 070e 	sub.w	r7, r1, lr
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d163      	bne.n	8009fb6 <__ieee754_fmod+0x192>
 8009eee:	4571      	cmp	r1, lr
 8009ef0:	bf38      	it	cc
 8009ef2:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	bfa4      	itt	ge
 8009efa:	4639      	movge	r1, r7
 8009efc:	4633      	movge	r3, r6
 8009efe:	ea53 0001 	orrs.w	r0, r3, r1
 8009f02:	d0c2      	beq.n	8009e8a <__ieee754_fmod+0x66>
 8009f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f08:	db6a      	blt.n	8009fe0 <__ieee754_fmod+0x1bc>
 8009f0a:	484d      	ldr	r0, [pc, #308]	; (800a040 <__ieee754_fmod+0x21c>)
 8009f0c:	4282      	cmp	r2, r0
 8009f0e:	db6d      	blt.n	8009fec <__ieee754_fmod+0x1c8>
 8009f10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f14:	4323      	orrs	r3, r4
 8009f16:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8009f1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009f1e:	468c      	mov	ip, r1
 8009f20:	4628      	mov	r0, r5
 8009f22:	e7b7      	b.n	8009e94 <__ieee754_fmod+0x70>
 8009f24:	3801      	subs	r0, #1
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	e7c2      	b.n	8009eb0 <__ieee754_fmod+0x8c>
 8009f2a:	4845      	ldr	r0, [pc, #276]	; (800a040 <__ieee754_fmod+0x21c>)
 8009f2c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	ddbf      	ble.n	8009eb4 <__ieee754_fmod+0x90>
 8009f34:	3801      	subs	r0, #1
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	e7fa      	b.n	8009f30 <__ieee754_fmod+0x10c>
 8009f3a:	ea4f 5029 	mov.w	r0, r9, asr #20
 8009f3e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009f42:	e7b7      	b.n	8009eb4 <__ieee754_fmod+0x90>
 8009f44:	3a01      	subs	r2, #1
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	e7ba      	b.n	8009ec0 <__ieee754_fmod+0x9c>
 8009f4a:	4a3d      	ldr	r2, [pc, #244]	; (800a040 <__ieee754_fmod+0x21c>)
 8009f4c:	02fb      	lsls	r3, r7, #11
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	ddb8      	ble.n	8009ec4 <__ieee754_fmod+0xa0>
 8009f52:	3a01      	subs	r2, #1
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	e7fa      	b.n	8009f4e <__ieee754_fmod+0x12a>
 8009f58:	153a      	asrs	r2, r7, #20
 8009f5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009f5e:	e7b1      	b.n	8009ec4 <__ieee754_fmod+0xa0>
 8009f60:	eba3 0c00 	sub.w	ip, r3, r0
 8009f64:	f1bc 0f1f 	cmp.w	ip, #31
 8009f68:	dc09      	bgt.n	8009f7e <__ieee754_fmod+0x15a>
 8009f6a:	f200 431e 	addw	r3, r0, #1054	; 0x41e
 8009f6e:	fa09 f10c 	lsl.w	r1, r9, ip
 8009f72:	fa28 f303 	lsr.w	r3, r8, r3
 8009f76:	430b      	orrs	r3, r1
 8009f78:	fa08 f10c 	lsl.w	r1, r8, ip
 8009f7c:	e7a9      	b.n	8009ed2 <__ieee754_fmod+0xae>
 8009f7e:	4b31      	ldr	r3, [pc, #196]	; (800a044 <__ieee754_fmod+0x220>)
 8009f80:	2100      	movs	r1, #0
 8009f82:	1a1b      	subs	r3, r3, r0
 8009f84:	fa08 f303 	lsl.w	r3, r8, r3
 8009f88:	e7a3      	b.n	8009ed2 <__ieee754_fmod+0xae>
 8009f8a:	ebac 0c02 	sub.w	ip, ip, r2
 8009f8e:	f1bc 0f1f 	cmp.w	ip, #31
 8009f92:	dc09      	bgt.n	8009fa8 <__ieee754_fmod+0x184>
 8009f94:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8009f98:	fa07 f70c 	lsl.w	r7, r7, ip
 8009f9c:	fa26 f505 	lsr.w	r5, r6, r5
 8009fa0:	433d      	orrs	r5, r7
 8009fa2:	fa06 fe0c 	lsl.w	lr, r6, ip
 8009fa6:	e79c      	b.n	8009ee2 <__ieee754_fmod+0xbe>
 8009fa8:	4d26      	ldr	r5, [pc, #152]	; (800a044 <__ieee754_fmod+0x220>)
 8009faa:	f04f 0e00 	mov.w	lr, #0
 8009fae:	1aad      	subs	r5, r5, r2
 8009fb0:	fa06 f505 	lsl.w	r5, r6, r5
 8009fb4:	e795      	b.n	8009ee2 <__ieee754_fmod+0xbe>
 8009fb6:	4571      	cmp	r1, lr
 8009fb8:	bf38      	it	cc
 8009fba:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	da05      	bge.n	8009fce <__ieee754_fmod+0x1aa>
 8009fc2:	0fce      	lsrs	r6, r1, #31
 8009fc4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8009fc8:	0049      	lsls	r1, r1, #1
 8009fca:	3801      	subs	r0, #1
 8009fcc:	e78a      	b.n	8009ee4 <__ieee754_fmod+0xc0>
 8009fce:	ea56 0307 	orrs.w	r3, r6, r7
 8009fd2:	f43f af5a 	beq.w	8009e8a <__ieee754_fmod+0x66>
 8009fd6:	0ffb      	lsrs	r3, r7, #31
 8009fd8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8009fdc:	0079      	lsls	r1, r7, #1
 8009fde:	e7f4      	b.n	8009fca <__ieee754_fmod+0x1a6>
 8009fe0:	0fc8      	lsrs	r0, r1, #31
 8009fe2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009fe6:	0049      	lsls	r1, r1, #1
 8009fe8:	3a01      	subs	r2, #1
 8009fea:	e78b      	b.n	8009f04 <__ieee754_fmod+0xe0>
 8009fec:	1a80      	subs	r0, r0, r2
 8009fee:	2814      	cmp	r0, #20
 8009ff0:	dc0a      	bgt.n	800a008 <__ieee754_fmod+0x1e4>
 8009ff2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009ff6:	fa03 f202 	lsl.w	r2, r3, r2
 8009ffa:	40c1      	lsrs	r1, r0
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	4103      	asrs	r3, r0
 800a000:	4610      	mov	r0, r2
 800a002:	ea43 0104 	orr.w	r1, r3, r4
 800a006:	e733      	b.n	8009e70 <__ieee754_fmod+0x4c>
 800a008:	281f      	cmp	r0, #31
 800a00a:	dc07      	bgt.n	800a01c <__ieee754_fmod+0x1f8>
 800a00c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a010:	40c1      	lsrs	r1, r0
 800a012:	fa03 f202 	lsl.w	r2, r3, r2
 800a016:	430a      	orrs	r2, r1
 800a018:	4623      	mov	r3, r4
 800a01a:	e7f1      	b.n	800a000 <__ieee754_fmod+0x1dc>
 800a01c:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800a020:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a024:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800a028:	32e2      	adds	r2, #226	; 0xe2
 800a02a:	fa43 f202 	asr.w	r2, r3, r2
 800a02e:	e7f3      	b.n	800a018 <__ieee754_fmod+0x1f4>
 800a030:	7fefffff 	.word	0x7fefffff
 800a034:	7ff00000 	.word	0x7ff00000
 800a038:	0800b140 	.word	0x0800b140
 800a03c:	fffffbed 	.word	0xfffffbed
 800a040:	fffffc02 	.word	0xfffffc02
 800a044:	fffffbe2 	.word	0xfffffbe2

0800a048 <__ieee754_rem_pio2>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	4614      	mov	r4, r2
 800a04e:	4ac2      	ldr	r2, [pc, #776]	; (800a358 <__ieee754_rem_pio2+0x310>)
 800a050:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a054:	b08d      	sub	sp, #52	; 0x34
 800a056:	4592      	cmp	sl, r2
 800a058:	9104      	str	r1, [sp, #16]
 800a05a:	dc07      	bgt.n	800a06c <__ieee754_rem_pio2+0x24>
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	e9c4 0100 	strd	r0, r1, [r4]
 800a064:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a068:	2500      	movs	r5, #0
 800a06a:	e024      	b.n	800a0b6 <__ieee754_rem_pio2+0x6e>
 800a06c:	4abb      	ldr	r2, [pc, #748]	; (800a35c <__ieee754_rem_pio2+0x314>)
 800a06e:	4592      	cmp	sl, r2
 800a070:	dc72      	bgt.n	800a158 <__ieee754_rem_pio2+0x110>
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	4dba      	ldr	r5, [pc, #744]	; (800a360 <__ieee754_rem_pio2+0x318>)
 800a076:	2b00      	cmp	r3, #0
 800a078:	a3a9      	add	r3, pc, #676	; (adr r3, 800a320 <__ieee754_rem_pio2+0x2d8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	dd36      	ble.n	800a0ee <__ieee754_rem_pio2+0xa6>
 800a080:	f7f6 f872 	bl	8000168 <__aeabi_dsub>
 800a084:	45aa      	cmp	sl, r5
 800a086:	4606      	mov	r6, r0
 800a088:	460f      	mov	r7, r1
 800a08a:	d018      	beq.n	800a0be <__ieee754_rem_pio2+0x76>
 800a08c:	a3a6      	add	r3, pc, #664	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e0>)
 800a08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a092:	f7f6 f869 	bl	8000168 <__aeabi_dsub>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4630      	mov	r0, r6
 800a09c:	e9c4 2300 	strd	r2, r3, [r4]
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f861 	bl	8000168 <__aeabi_dsub>
 800a0a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e0>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f7f6 f85c 	bl	8000168 <__aeabi_dsub>
 800a0b0:	2501      	movs	r5, #1
 800a0b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	b00d      	add	sp, #52	; 0x34
 800a0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0be:	a39c      	add	r3, pc, #624	; (adr r3, 800a330 <__ieee754_rem_pio2+0x2e8>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	f7f6 f850 	bl	8000168 <__aeabi_dsub>
 800a0c8:	a39b      	add	r3, pc, #620	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460f      	mov	r7, r1
 800a0d2:	f7f6 f849 	bl	8000168 <__aeabi_dsub>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4630      	mov	r0, r6
 800a0dc:	e9c4 2300 	strd	r2, r3, [r4]
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 f841 	bl	8000168 <__aeabi_dsub>
 800a0e6:	a394      	add	r3, pc, #592	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f0>)
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	e7de      	b.n	800a0ac <__ieee754_rem_pio2+0x64>
 800a0ee:	f7f6 f83d 	bl	800016c <__adddf3>
 800a0f2:	45aa      	cmp	sl, r5
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	d016      	beq.n	800a128 <__ieee754_rem_pio2+0xe0>
 800a0fa:	a38b      	add	r3, pc, #556	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e0>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f7f6 f834 	bl	800016c <__adddf3>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4630      	mov	r0, r6
 800a10a:	e9c4 2300 	strd	r2, r3, [r4]
 800a10e:	4639      	mov	r1, r7
 800a110:	f7f6 f82a 	bl	8000168 <__aeabi_dsub>
 800a114:	a384      	add	r3, pc, #528	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e0>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f7f6 f827 	bl	800016c <__adddf3>
 800a11e:	f04f 35ff 	mov.w	r5, #4294967295
 800a122:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a126:	e7c6      	b.n	800a0b6 <__ieee754_rem_pio2+0x6e>
 800a128:	a381      	add	r3, pc, #516	; (adr r3, 800a330 <__ieee754_rem_pio2+0x2e8>)
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	f7f6 f81d 	bl	800016c <__adddf3>
 800a132:	a381      	add	r3, pc, #516	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f0>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	4606      	mov	r6, r0
 800a13a:	460f      	mov	r7, r1
 800a13c:	f7f6 f816 	bl	800016c <__adddf3>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4630      	mov	r0, r6
 800a146:	e9c4 2300 	strd	r2, r3, [r4]
 800a14a:	4639      	mov	r1, r7
 800a14c:	f7f6 f80c 	bl	8000168 <__aeabi_dsub>
 800a150:	a379      	add	r3, pc, #484	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f0>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	e7e0      	b.n	800a11a <__ieee754_rem_pio2+0xd2>
 800a158:	4a82      	ldr	r2, [pc, #520]	; (800a364 <__ieee754_rem_pio2+0x31c>)
 800a15a:	4592      	cmp	sl, r2
 800a15c:	f300 80d4 	bgt.w	800a308 <__ieee754_rem_pio2+0x2c0>
 800a160:	f000 f966 	bl	800a430 <fabs>
 800a164:	a376      	add	r3, pc, #472	; (adr r3, 800a340 <__ieee754_rem_pio2+0x2f8>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	4606      	mov	r6, r0
 800a16c:	460f      	mov	r7, r1
 800a16e:	f7f6 f9b3 	bl	80004d8 <__aeabi_dmul>
 800a172:	2200      	movs	r2, #0
 800a174:	4b7c      	ldr	r3, [pc, #496]	; (800a368 <__ieee754_rem_pio2+0x320>)
 800a176:	f7f5 fff9 	bl	800016c <__adddf3>
 800a17a:	f7f6 fc5d 	bl	8000a38 <__aeabi_d2iz>
 800a17e:	4605      	mov	r5, r0
 800a180:	f7f6 f940 	bl	8000404 <__aeabi_i2d>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a18c:	a364      	add	r3, pc, #400	; (adr r3, 800a320 <__ieee754_rem_pio2+0x2d8>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f6 f9a1 	bl	80004d8 <__aeabi_dmul>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	f7f5 ffe3 	bl	8000168 <__aeabi_dsub>
 800a1a2:	a361      	add	r3, pc, #388	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e0>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4689      	mov	r9, r1
 800a1ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b0:	f7f6 f992 	bl	80004d8 <__aeabi_dmul>
 800a1b4:	2d1f      	cmp	r5, #31
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	dc0e      	bgt.n	800a1da <__ieee754_rem_pio2+0x192>
 800a1bc:	4b6b      	ldr	r3, [pc, #428]	; (800a36c <__ieee754_rem_pio2+0x324>)
 800a1be:	1e6a      	subs	r2, r5, #1
 800a1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c4:	4553      	cmp	r3, sl
 800a1c6:	d008      	beq.n	800a1da <__ieee754_rem_pio2+0x192>
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	f7f5 ffca 	bl	8000168 <__aeabi_dsub>
 800a1d4:	e9c4 0100 	strd	r0, r1, [r4]
 800a1d8:	e012      	b.n	800a200 <__ieee754_rem_pio2+0x1b8>
 800a1da:	463b      	mov	r3, r7
 800a1dc:	4632      	mov	r2, r6
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f5 ffc1 	bl	8000168 <__aeabi_dsub>
 800a1e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a1f0:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	dc1f      	bgt.n	800a238 <__ieee754_rem_pio2+0x1f0>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	e9c4 2300 	strd	r2, r3, [r4]
 800a200:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a204:	4640      	mov	r0, r8
 800a206:	4653      	mov	r3, sl
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f5 ffad 	bl	8000168 <__aeabi_dsub>
 800a20e:	4632      	mov	r2, r6
 800a210:	463b      	mov	r3, r7
 800a212:	f7f5 ffa9 	bl	8000168 <__aeabi_dsub>
 800a216:	460b      	mov	r3, r1
 800a218:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a21c:	9904      	ldr	r1, [sp, #16]
 800a21e:	4602      	mov	r2, r0
 800a220:	2900      	cmp	r1, #0
 800a222:	f6bf af48 	bge.w	800a0b6 <__ieee754_rem_pio2+0x6e>
 800a226:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800a22a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a22e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a232:	60e3      	str	r3, [r4, #12]
 800a234:	426d      	negs	r5, r5
 800a236:	e73e      	b.n	800a0b6 <__ieee754_rem_pio2+0x6e>
 800a238:	a33d      	add	r3, pc, #244	; (adr r3, 800a330 <__ieee754_rem_pio2+0x2e8>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a242:	f7f6 f949 	bl	80004d8 <__aeabi_dmul>
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4640      	mov	r0, r8
 800a250:	4649      	mov	r1, r9
 800a252:	f7f5 ff89 	bl	8000168 <__aeabi_dsub>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4682      	mov	sl, r0
 800a25c:	468b      	mov	fp, r1
 800a25e:	4640      	mov	r0, r8
 800a260:	4649      	mov	r1, r9
 800a262:	f7f5 ff81 	bl	8000168 <__aeabi_dsub>
 800a266:	4632      	mov	r2, r6
 800a268:	463b      	mov	r3, r7
 800a26a:	f7f5 ff7d 	bl	8000168 <__aeabi_dsub>
 800a26e:	a332      	add	r3, pc, #200	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f0>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	4606      	mov	r6, r0
 800a276:	460f      	mov	r7, r1
 800a278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a27c:	f7f6 f92c 	bl	80004d8 <__aeabi_dmul>
 800a280:	4632      	mov	r2, r6
 800a282:	463b      	mov	r3, r7
 800a284:	f7f5 ff70 	bl	8000168 <__aeabi_dsub>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4606      	mov	r6, r0
 800a28e:	460f      	mov	r7, r1
 800a290:	4650      	mov	r0, sl
 800a292:	4659      	mov	r1, fp
 800a294:	f7f5 ff68 	bl	8000168 <__aeabi_dsub>
 800a298:	9a05      	ldr	r2, [sp, #20]
 800a29a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b31      	cmp	r3, #49	; 0x31
 800a2a2:	dc06      	bgt.n	800a2b2 <__ieee754_rem_pio2+0x26a>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	46d0      	mov	r8, sl
 800a2aa:	46d9      	mov	r9, fp
 800a2ac:	e9c4 2300 	strd	r2, r3, [r4]
 800a2b0:	e7a6      	b.n	800a200 <__ieee754_rem_pio2+0x1b8>
 800a2b2:	a325      	add	r3, pc, #148	; (adr r3, 800a348 <__ieee754_rem_pio2+0x300>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2bc:	f7f6 f90c 	bl	80004d8 <__aeabi_dmul>
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	f7f5 ff4c 	bl	8000168 <__aeabi_dsub>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	4650      	mov	r0, sl
 800a2da:	4659      	mov	r1, fp
 800a2dc:	f7f5 ff44 	bl	8000168 <__aeabi_dsub>
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	f7f5 ff40 	bl	8000168 <__aeabi_dsub>
 800a2e8:	a319      	add	r3, pc, #100	; (adr r3, 800a350 <__ieee754_rem_pio2+0x308>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f6:	f7f6 f8ef 	bl	80004d8 <__aeabi_dmul>
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	f7f5 ff33 	bl	8000168 <__aeabi_dsub>
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	e75f      	b.n	800a1c8 <__ieee754_rem_pio2+0x180>
 800a308:	4a19      	ldr	r2, [pc, #100]	; (800a370 <__ieee754_rem_pio2+0x328>)
 800a30a:	4592      	cmp	sl, r2
 800a30c:	dd32      	ble.n	800a374 <__ieee754_rem_pio2+0x32c>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	f7f5 ff29 	bl	8000168 <__aeabi_dsub>
 800a316:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a31a:	e9c4 0100 	strd	r0, r1, [r4]
 800a31e:	e6a3      	b.n	800a068 <__ieee754_rem_pio2+0x20>
 800a320:	54400000 	.word	0x54400000
 800a324:	3ff921fb 	.word	0x3ff921fb
 800a328:	1a626331 	.word	0x1a626331
 800a32c:	3dd0b461 	.word	0x3dd0b461
 800a330:	1a600000 	.word	0x1a600000
 800a334:	3dd0b461 	.word	0x3dd0b461
 800a338:	2e037073 	.word	0x2e037073
 800a33c:	3ba3198a 	.word	0x3ba3198a
 800a340:	6dc9c883 	.word	0x6dc9c883
 800a344:	3fe45f30 	.word	0x3fe45f30
 800a348:	2e000000 	.word	0x2e000000
 800a34c:	3ba3198a 	.word	0x3ba3198a
 800a350:	252049c1 	.word	0x252049c1
 800a354:	397b839a 	.word	0x397b839a
 800a358:	3fe921fb 	.word	0x3fe921fb
 800a35c:	4002d97b 	.word	0x4002d97b
 800a360:	3ff921fb 	.word	0x3ff921fb
 800a364:	413921fb 	.word	0x413921fb
 800a368:	3fe00000 	.word	0x3fe00000
 800a36c:	0800b150 	.word	0x0800b150
 800a370:	7fefffff 	.word	0x7fefffff
 800a374:	ea4f 552a 	mov.w	r5, sl, asr #20
 800a378:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a37c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800a380:	460f      	mov	r7, r1
 800a382:	4606      	mov	r6, r0
 800a384:	f7f6 fb58 	bl	8000a38 <__aeabi_d2iz>
 800a388:	f7f6 f83c 	bl	8000404 <__aeabi_i2d>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a398:	f7f5 fee6 	bl	8000168 <__aeabi_dsub>
 800a39c:	2200      	movs	r2, #0
 800a39e:	4b22      	ldr	r3, [pc, #136]	; (800a428 <__ieee754_rem_pio2+0x3e0>)
 800a3a0:	f7f6 f89a 	bl	80004d8 <__aeabi_dmul>
 800a3a4:	460f      	mov	r7, r1
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	f7f6 fb46 	bl	8000a38 <__aeabi_d2iz>
 800a3ac:	f7f6 f82a 	bl	8000404 <__aeabi_i2d>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3bc:	f7f5 fed4 	bl	8000168 <__aeabi_dsub>
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4b19      	ldr	r3, [pc, #100]	; (800a428 <__ieee754_rem_pio2+0x3e0>)
 800a3c4:	f7f6 f888 	bl	80004d8 <__aeabi_dmul>
 800a3c8:	f04f 0803 	mov.w	r8, #3
 800a3cc:	2600      	movs	r6, #0
 800a3ce:	2700      	movs	r7, #0
 800a3d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a3d8:	4632      	mov	r2, r6
 800a3da:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a3de:	463b      	mov	r3, r7
 800a3e0:	46c2      	mov	sl, r8
 800a3e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3e6:	f7f6 fadf 	bl	80009a8 <__aeabi_dcmpeq>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d1f4      	bne.n	800a3d8 <__ieee754_rem_pio2+0x390>
 800a3ee:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <__ieee754_rem_pio2+0x3e4>)
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	a806      	add	r0, sp, #24
 800a3fc:	4653      	mov	r3, sl
 800a3fe:	f000 f81b 	bl	800a438 <__kernel_rem_pio2>
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	4605      	mov	r5, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	f6bf ae55 	bge.w	800a0b6 <__ieee754_rem_pio2+0x6e>
 800a40c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a414:	e9c4 2300 	strd	r2, r3, [r4]
 800a418:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a41c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a420:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a424:	e706      	b.n	800a234 <__ieee754_rem_pio2+0x1ec>
 800a426:	bf00      	nop
 800a428:	41700000 	.word	0x41700000
 800a42c:	0800b1d0 	.word	0x0800b1d0

0800a430 <fabs>:
 800a430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a434:	4619      	mov	r1, r3
 800a436:	4770      	bx	lr

0800a438 <__kernel_rem_pio2>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a440:	9308      	str	r3, [sp, #32]
 800a442:	9106      	str	r1, [sp, #24]
 800a444:	4bb6      	ldr	r3, [pc, #728]	; (800a720 <__kernel_rem_pio2+0x2e8>)
 800a446:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a448:	f112 0f14 	cmn.w	r2, #20
 800a44c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a450:	bfa8      	it	ge
 800a452:	1ed4      	subge	r4, r2, #3
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	9b08      	ldr	r3, [sp, #32]
 800a458:	bfb8      	it	lt
 800a45a:	2400      	movlt	r4, #0
 800a45c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a460:	9307      	str	r3, [sp, #28]
 800a462:	bfa4      	itt	ge
 800a464:	2318      	movge	r3, #24
 800a466:	fb94 f4f3 	sdivge	r4, r4, r3
 800a46a:	f06f 0317 	mvn.w	r3, #23
 800a46e:	fb04 3303 	mla	r3, r4, r3, r3
 800a472:	eb03 0b02 	add.w	fp, r3, r2
 800a476:	9a07      	ldr	r2, [sp, #28]
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	1aa7      	subs	r7, r4, r2
 800a47c:	eb03 0802 	add.w	r8, r3, r2
 800a480:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a482:	2500      	movs	r5, #0
 800a484:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a488:	2200      	movs	r2, #0
 800a48a:	2300      	movs	r3, #0
 800a48c:	9009      	str	r0, [sp, #36]	; 0x24
 800a48e:	ae20      	add	r6, sp, #128	; 0x80
 800a490:	4545      	cmp	r5, r8
 800a492:	dd14      	ble.n	800a4be <__kernel_rem_pio2+0x86>
 800a494:	f04f 0800 	mov.w	r8, #0
 800a498:	9a08      	ldr	r2, [sp, #32]
 800a49a:	ab20      	add	r3, sp, #128	; 0x80
 800a49c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a4a0:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800a4a4:	9b02      	ldr	r3, [sp, #8]
 800a4a6:	4598      	cmp	r8, r3
 800a4a8:	dc35      	bgt.n	800a516 <__kernel_rem_pio2+0xde>
 800a4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f1a3 0908 	sub.w	r9, r3, #8
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	462f      	mov	r7, r5
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	e9cd 2300 	strd	r2, r3, [sp]
 800a4bc:	e01f      	b.n	800a4fe <__kernel_rem_pio2+0xc6>
 800a4be:	42ef      	cmn	r7, r5
 800a4c0:	d40b      	bmi.n	800a4da <__kernel_rem_pio2+0xa2>
 800a4c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a4c6:	e9cd 2300 	strd	r2, r3, [sp]
 800a4ca:	f7f5 ff9b 	bl	8000404 <__aeabi_i2d>
 800a4ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a4d6:	3501      	adds	r5, #1
 800a4d8:	e7da      	b.n	800a490 <__kernel_rem_pio2+0x58>
 800a4da:	4610      	mov	r0, r2
 800a4dc:	4619      	mov	r1, r3
 800a4de:	e7f8      	b.n	800a4d2 <__kernel_rem_pio2+0x9a>
 800a4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4e4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a4e8:	f7f5 fff6 	bl	80004d8 <__aeabi_dmul>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4f4:	f7f5 fe3a 	bl	800016c <__adddf3>
 800a4f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a4fc:	3601      	adds	r6, #1
 800a4fe:	9b07      	ldr	r3, [sp, #28]
 800a500:	3f08      	subs	r7, #8
 800a502:	429e      	cmp	r6, r3
 800a504:	ddec      	ble.n	800a4e0 <__kernel_rem_pio2+0xa8>
 800a506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a50a:	f108 0801 	add.w	r8, r8, #1
 800a50e:	e8ea 2302 	strd	r2, r3, [sl], #8
 800a512:	3508      	adds	r5, #8
 800a514:	e7c6      	b.n	800a4a4 <__kernel_rem_pio2+0x6c>
 800a516:	9b02      	ldr	r3, [sp, #8]
 800a518:	aa0c      	add	r2, sp, #48	; 0x30
 800a51a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a51e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a520:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a522:	9e02      	ldr	r6, [sp, #8]
 800a524:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a528:	930a      	str	r3, [sp, #40]	; 0x28
 800a52a:	ab98      	add	r3, sp, #608	; 0x260
 800a52c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a530:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800a534:	ab70      	add	r3, sp, #448	; 0x1c0
 800a536:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800a53a:	46d0      	mov	r8, sl
 800a53c:	46b1      	mov	r9, r6
 800a53e:	af0c      	add	r7, sp, #48	; 0x30
 800a540:	9700      	str	r7, [sp, #0]
 800a542:	f1b9 0f00 	cmp.w	r9, #0
 800a546:	f1a8 0808 	sub.w	r8, r8, #8
 800a54a:	dc70      	bgt.n	800a62e <__kernel_rem_pio2+0x1f6>
 800a54c:	465a      	mov	r2, fp
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f000 fab1 	bl	800aab8 <scalbn>
 800a556:	2200      	movs	r2, #0
 800a558:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a55c:	4604      	mov	r4, r0
 800a55e:	460d      	mov	r5, r1
 800a560:	f7f5 ffba 	bl	80004d8 <__aeabi_dmul>
 800a564:	f000 fb24 	bl	800abb0 <floor>
 800a568:	2200      	movs	r2, #0
 800a56a:	4b6e      	ldr	r3, [pc, #440]	; (800a724 <__kernel_rem_pio2+0x2ec>)
 800a56c:	f7f5 ffb4 	bl	80004d8 <__aeabi_dmul>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4620      	mov	r0, r4
 800a576:	4629      	mov	r1, r5
 800a578:	f7f5 fdf6 	bl	8000168 <__aeabi_dsub>
 800a57c:	460d      	mov	r5, r1
 800a57e:	4604      	mov	r4, r0
 800a580:	f7f6 fa5a 	bl	8000a38 <__aeabi_d2iz>
 800a584:	9004      	str	r0, [sp, #16]
 800a586:	f7f5 ff3d 	bl	8000404 <__aeabi_i2d>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	f7f5 fde9 	bl	8000168 <__aeabi_dsub>
 800a596:	f1bb 0f00 	cmp.w	fp, #0
 800a59a:	4680      	mov	r8, r0
 800a59c:	4689      	mov	r9, r1
 800a59e:	dd6f      	ble.n	800a680 <__kernel_rem_pio2+0x248>
 800a5a0:	1e71      	subs	r1, r6, #1
 800a5a2:	ab0c      	add	r3, sp, #48	; 0x30
 800a5a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5a8:	9c04      	ldr	r4, [sp, #16]
 800a5aa:	f1cb 0018 	rsb	r0, fp, #24
 800a5ae:	fa43 f200 	asr.w	r2, r3, r0
 800a5b2:	4414      	add	r4, r2
 800a5b4:	4082      	lsls	r2, r0
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	aa0c      	add	r2, sp, #48	; 0x30
 800a5ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a5be:	f1cb 0217 	rsb	r2, fp, #23
 800a5c2:	9404      	str	r4, [sp, #16]
 800a5c4:	4113      	asrs	r3, r2
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	9b00      	ldr	r3, [sp, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dd66      	ble.n	800a69c <__kernel_rem_pio2+0x264>
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	9b04      	ldr	r3, [sp, #16]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	9304      	str	r3, [sp, #16]
 800a5dc:	4296      	cmp	r6, r2
 800a5de:	f300 80ad 	bgt.w	800a73c <__kernel_rem_pio2+0x304>
 800a5e2:	f1bb 0f00 	cmp.w	fp, #0
 800a5e6:	dd07      	ble.n	800a5f8 <__kernel_rem_pio2+0x1c0>
 800a5e8:	f1bb 0f01 	cmp.w	fp, #1
 800a5ec:	f000 80b5 	beq.w	800a75a <__kernel_rem_pio2+0x322>
 800a5f0:	f1bb 0f02 	cmp.w	fp, #2
 800a5f4:	f000 80bb 	beq.w	800a76e <__kernel_rem_pio2+0x336>
 800a5f8:	9b00      	ldr	r3, [sp, #0]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d14e      	bne.n	800a69c <__kernel_rem_pio2+0x264>
 800a5fe:	4642      	mov	r2, r8
 800a600:	464b      	mov	r3, r9
 800a602:	2000      	movs	r0, #0
 800a604:	4948      	ldr	r1, [pc, #288]	; (800a728 <__kernel_rem_pio2+0x2f0>)
 800a606:	f7f5 fdaf 	bl	8000168 <__aeabi_dsub>
 800a60a:	4680      	mov	r8, r0
 800a60c:	4689      	mov	r9, r1
 800a60e:	2c00      	cmp	r4, #0
 800a610:	d044      	beq.n	800a69c <__kernel_rem_pio2+0x264>
 800a612:	465a      	mov	r2, fp
 800a614:	2000      	movs	r0, #0
 800a616:	4944      	ldr	r1, [pc, #272]	; (800a728 <__kernel_rem_pio2+0x2f0>)
 800a618:	f000 fa4e 	bl	800aab8 <scalbn>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 fda0 	bl	8000168 <__aeabi_dsub>
 800a628:	4680      	mov	r8, r0
 800a62a:	4689      	mov	r9, r1
 800a62c:	e036      	b.n	800a69c <__kernel_rem_pio2+0x264>
 800a62e:	2200      	movs	r2, #0
 800a630:	4b3e      	ldr	r3, [pc, #248]	; (800a72c <__kernel_rem_pio2+0x2f4>)
 800a632:	4620      	mov	r0, r4
 800a634:	4629      	mov	r1, r5
 800a636:	f7f5 ff4f 	bl	80004d8 <__aeabi_dmul>
 800a63a:	f7f6 f9fd 	bl	8000a38 <__aeabi_d2iz>
 800a63e:	f7f5 fee1 	bl	8000404 <__aeabi_i2d>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a64a:	2200      	movs	r2, #0
 800a64c:	4b38      	ldr	r3, [pc, #224]	; (800a730 <__kernel_rem_pio2+0x2f8>)
 800a64e:	f7f5 ff43 	bl	80004d8 <__aeabi_dmul>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4620      	mov	r0, r4
 800a658:	4629      	mov	r1, r5
 800a65a:	f7f5 fd85 	bl	8000168 <__aeabi_dsub>
 800a65e:	f7f6 f9eb 	bl	8000a38 <__aeabi_d2iz>
 800a662:	9b00      	ldr	r3, [sp, #0]
 800a664:	f109 39ff 	add.w	r9, r9, #4294967295
 800a668:	f843 0b04 	str.w	r0, [r3], #4
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a672:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a676:	f7f5 fd79 	bl	800016c <__adddf3>
 800a67a:	4604      	mov	r4, r0
 800a67c:	460d      	mov	r5, r1
 800a67e:	e760      	b.n	800a542 <__kernel_rem_pio2+0x10a>
 800a680:	d105      	bne.n	800a68e <__kernel_rem_pio2+0x256>
 800a682:	1e73      	subs	r3, r6, #1
 800a684:	aa0c      	add	r2, sp, #48	; 0x30
 800a686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a68a:	15db      	asrs	r3, r3, #23
 800a68c:	e79b      	b.n	800a5c6 <__kernel_rem_pio2+0x18e>
 800a68e:	2200      	movs	r2, #0
 800a690:	4b28      	ldr	r3, [pc, #160]	; (800a734 <__kernel_rem_pio2+0x2fc>)
 800a692:	f7f6 f9a7 	bl	80009e4 <__aeabi_dcmpge>
 800a696:	2800      	cmp	r0, #0
 800a698:	d13e      	bne.n	800a718 <__kernel_rem_pio2+0x2e0>
 800a69a:	9000      	str	r0, [sp, #0]
 800a69c:	2200      	movs	r2, #0
 800a69e:	2300      	movs	r3, #0
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	f7f6 f980 	bl	80009a8 <__aeabi_dcmpeq>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	f000 80b2 	beq.w	800a812 <__kernel_rem_pio2+0x3da>
 800a6ae:	1e74      	subs	r4, r6, #1
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	9902      	ldr	r1, [sp, #8]
 800a6b6:	428b      	cmp	r3, r1
 800a6b8:	da60      	bge.n	800a77c <__kernel_rem_pio2+0x344>
 800a6ba:	2a00      	cmp	r2, #0
 800a6bc:	d075      	beq.n	800a7aa <__kernel_rem_pio2+0x372>
 800a6be:	ab0c      	add	r3, sp, #48	; 0x30
 800a6c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a6c4:	f1ab 0b18 	sub.w	fp, fp, #24
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 80a0 	beq.w	800a80e <__kernel_rem_pio2+0x3d6>
 800a6ce:	465a      	mov	r2, fp
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	4915      	ldr	r1, [pc, #84]	; (800a728 <__kernel_rem_pio2+0x2f0>)
 800a6d4:	f000 f9f0 	bl	800aab8 <scalbn>
 800a6d8:	46a2      	mov	sl, r4
 800a6da:	4606      	mov	r6, r0
 800a6dc:	460f      	mov	r7, r1
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	ab70      	add	r3, sp, #448	; 0x1c0
 800a6e4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800a72c <__kernel_rem_pio2+0x2f4>
 800a6e8:	00e5      	lsls	r5, r4, #3
 800a6ea:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800a6ee:	f1ba 0f00 	cmp.w	sl, #0
 800a6f2:	f280 80c4 	bge.w	800a87e <__kernel_rem_pio2+0x446>
 800a6f6:	4626      	mov	r6, r4
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	f2c0 80f6 	blt.w	800a8ea <__kernel_rem_pio2+0x4b2>
 800a6fe:	4b0e      	ldr	r3, [pc, #56]	; (800a738 <__kernel_rem_pio2+0x300>)
 800a700:	f04f 0a00 	mov.w	sl, #0
 800a704:	9307      	str	r3, [sp, #28]
 800a706:	ab70      	add	r3, sp, #448	; 0x1c0
 800a708:	f04f 0b00 	mov.w	fp, #0
 800a70c:	f04f 0800 	mov.w	r8, #0
 800a710:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a714:	1ba7      	subs	r7, r4, r6
 800a716:	e0dc      	b.n	800a8d2 <__kernel_rem_pio2+0x49a>
 800a718:	2302      	movs	r3, #2
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	e757      	b.n	800a5ce <__kernel_rem_pio2+0x196>
 800a71e:	bf00      	nop
 800a720:	0800b318 	.word	0x0800b318
 800a724:	40200000 	.word	0x40200000
 800a728:	3ff00000 	.word	0x3ff00000
 800a72c:	3e700000 	.word	0x3e700000
 800a730:	41700000 	.word	0x41700000
 800a734:	3fe00000 	.word	0x3fe00000
 800a738:	0800b2d8 	.word	0x0800b2d8
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	b944      	cbnz	r4, 800a752 <__kernel_rem_pio2+0x31a>
 800a740:	b11b      	cbz	r3, 800a74a <__kernel_rem_pio2+0x312>
 800a742:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	2301      	movs	r3, #1
 800a74a:	461c      	mov	r4, r3
 800a74c:	3201      	adds	r2, #1
 800a74e:	3704      	adds	r7, #4
 800a750:	e744      	b.n	800a5dc <__kernel_rem_pio2+0x1a4>
 800a752:	1acb      	subs	r3, r1, r3
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	4623      	mov	r3, r4
 800a758:	e7f7      	b.n	800a74a <__kernel_rem_pio2+0x312>
 800a75a:	1e72      	subs	r2, r6, #1
 800a75c:	ab0c      	add	r3, sp, #48	; 0x30
 800a75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a762:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a766:	a90c      	add	r1, sp, #48	; 0x30
 800a768:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a76c:	e744      	b.n	800a5f8 <__kernel_rem_pio2+0x1c0>
 800a76e:	1e72      	subs	r2, r6, #1
 800a770:	ab0c      	add	r3, sp, #48	; 0x30
 800a772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a776:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a77a:	e7f4      	b.n	800a766 <__kernel_rem_pio2+0x32e>
 800a77c:	a90c      	add	r1, sp, #48	; 0x30
 800a77e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a782:	3b01      	subs	r3, #1
 800a784:	430a      	orrs	r2, r1
 800a786:	e795      	b.n	800a6b4 <__kernel_rem_pio2+0x27c>
 800a788:	3301      	adds	r3, #1
 800a78a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a78e:	2900      	cmp	r1, #0
 800a790:	d0fa      	beq.n	800a788 <__kernel_rem_pio2+0x350>
 800a792:	9a08      	ldr	r2, [sp, #32]
 800a794:	a920      	add	r1, sp, #128	; 0x80
 800a796:	18b2      	adds	r2, r6, r2
 800a798:	f106 0801 	add.w	r8, r6, #1
 800a79c:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a7a0:	18f4      	adds	r4, r6, r3
 800a7a2:	4544      	cmp	r4, r8
 800a7a4:	da04      	bge.n	800a7b0 <__kernel_rem_pio2+0x378>
 800a7a6:	4626      	mov	r6, r4
 800a7a8:	e6bf      	b.n	800a52a <__kernel_rem_pio2+0xf2>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7ae:	e7ec      	b.n	800a78a <__kernel_rem_pio2+0x352>
 800a7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b2:	f04f 0900 	mov.w	r9, #0
 800a7b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a7ba:	f7f5 fe23 	bl	8000404 <__aeabi_i2d>
 800a7be:	2600      	movs	r6, #0
 800a7c0:	2700      	movs	r7, #0
 800a7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c4:	e9c5 0100 	strd	r0, r1, [r5]
 800a7c8:	3b08      	subs	r3, #8
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	9504      	str	r5, [sp, #16]
 800a7ce:	9b07      	ldr	r3, [sp, #28]
 800a7d0:	4599      	cmp	r9, r3
 800a7d2:	dd05      	ble.n	800a7e0 <__kernel_rem_pio2+0x3a8>
 800a7d4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800a7d8:	f108 0801 	add.w	r8, r8, #1
 800a7dc:	3508      	adds	r5, #8
 800a7de:	e7e0      	b.n	800a7a2 <__kernel_rem_pio2+0x36a>
 800a7e0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a7e4:	9900      	ldr	r1, [sp, #0]
 800a7e6:	f109 0901 	add.w	r9, r9, #1
 800a7ea:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a7ee:	9100      	str	r1, [sp, #0]
 800a7f0:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800a7f4:	f8cd c010 	str.w	ip, [sp, #16]
 800a7f8:	f7f5 fe6e 	bl	80004d8 <__aeabi_dmul>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	f7f5 fcb2 	bl	800016c <__adddf3>
 800a808:	4606      	mov	r6, r0
 800a80a:	460f      	mov	r7, r1
 800a80c:	e7df      	b.n	800a7ce <__kernel_rem_pio2+0x396>
 800a80e:	3c01      	subs	r4, #1
 800a810:	e755      	b.n	800a6be <__kernel_rem_pio2+0x286>
 800a812:	f1cb 0200 	rsb	r2, fp, #0
 800a816:	4640      	mov	r0, r8
 800a818:	4649      	mov	r1, r9
 800a81a:	f000 f94d 	bl	800aab8 <scalbn>
 800a81e:	2200      	movs	r2, #0
 800a820:	4ba3      	ldr	r3, [pc, #652]	; (800aab0 <__kernel_rem_pio2+0x678>)
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	f7f6 f8dd 	bl	80009e4 <__aeabi_dcmpge>
 800a82a:	b1f8      	cbz	r0, 800a86c <__kernel_rem_pio2+0x434>
 800a82c:	2200      	movs	r2, #0
 800a82e:	4ba1      	ldr	r3, [pc, #644]	; (800aab4 <__kernel_rem_pio2+0x67c>)
 800a830:	4620      	mov	r0, r4
 800a832:	4629      	mov	r1, r5
 800a834:	f7f5 fe50 	bl	80004d8 <__aeabi_dmul>
 800a838:	f7f6 f8fe 	bl	8000a38 <__aeabi_d2iz>
 800a83c:	4607      	mov	r7, r0
 800a83e:	f7f5 fde1 	bl	8000404 <__aeabi_i2d>
 800a842:	2200      	movs	r2, #0
 800a844:	4b9a      	ldr	r3, [pc, #616]	; (800aab0 <__kernel_rem_pio2+0x678>)
 800a846:	f7f5 fe47 	bl	80004d8 <__aeabi_dmul>
 800a84a:	460b      	mov	r3, r1
 800a84c:	4602      	mov	r2, r0
 800a84e:	4629      	mov	r1, r5
 800a850:	4620      	mov	r0, r4
 800a852:	f7f5 fc89 	bl	8000168 <__aeabi_dsub>
 800a856:	f7f6 f8ef 	bl	8000a38 <__aeabi_d2iz>
 800a85a:	1c74      	adds	r4, r6, #1
 800a85c:	ab0c      	add	r3, sp, #48	; 0x30
 800a85e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a862:	f10b 0b18 	add.w	fp, fp, #24
 800a866:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800a86a:	e730      	b.n	800a6ce <__kernel_rem_pio2+0x296>
 800a86c:	4620      	mov	r0, r4
 800a86e:	4629      	mov	r1, r5
 800a870:	f7f6 f8e2 	bl	8000a38 <__aeabi_d2iz>
 800a874:	ab0c      	add	r3, sp, #48	; 0x30
 800a876:	4634      	mov	r4, r6
 800a878:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a87c:	e727      	b.n	800a6ce <__kernel_rem_pio2+0x296>
 800a87e:	ab0c      	add	r3, sp, #48	; 0x30
 800a880:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a884:	f7f5 fdbe 	bl	8000404 <__aeabi_i2d>
 800a888:	4632      	mov	r2, r6
 800a88a:	463b      	mov	r3, r7
 800a88c:	f7f5 fe24 	bl	80004d8 <__aeabi_dmul>
 800a890:	4642      	mov	r2, r8
 800a892:	e86b 0102 	strd	r0, r1, [fp], #-8
 800a896:	464b      	mov	r3, r9
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fe1c 	bl	80004d8 <__aeabi_dmul>
 800a8a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	460f      	mov	r7, r1
 800a8a8:	e721      	b.n	800a6ee <__kernel_rem_pio2+0x2b6>
 800a8aa:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a8ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a8b2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a8b6:	f8cd c01c 	str.w	ip, [sp, #28]
 800a8ba:	f7f5 fe0d 	bl	80004d8 <__aeabi_dmul>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4650      	mov	r0, sl
 800a8c4:	4659      	mov	r1, fp
 800a8c6:	f7f5 fc51 	bl	800016c <__adddf3>
 800a8ca:	4682      	mov	sl, r0
 800a8cc:	468b      	mov	fp, r1
 800a8ce:	f108 0801 	add.w	r8, r8, #1
 800a8d2:	9b02      	ldr	r3, [sp, #8]
 800a8d4:	4598      	cmp	r8, r3
 800a8d6:	dc01      	bgt.n	800a8dc <__kernel_rem_pio2+0x4a4>
 800a8d8:	45b8      	cmp	r8, r7
 800a8da:	dde6      	ble.n	800a8aa <__kernel_rem_pio2+0x472>
 800a8dc:	ab48      	add	r3, sp, #288	; 0x120
 800a8de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a8e2:	e9c7 ab00 	strd	sl, fp, [r7]
 800a8e6:	3e01      	subs	r6, #1
 800a8e8:	e706      	b.n	800a6f8 <__kernel_rem_pio2+0x2c0>
 800a8ea:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	dc09      	bgt.n	800a904 <__kernel_rem_pio2+0x4cc>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dc32      	bgt.n	800a95a <__kernel_rem_pio2+0x522>
 800a8f4:	d058      	beq.n	800a9a8 <__kernel_rem_pio2+0x570>
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	f003 0007 	and.w	r0, r3, #7
 800a8fc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a904:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a906:	2b03      	cmp	r3, #3
 800a908:	d1f5      	bne.n	800a8f6 <__kernel_rem_pio2+0x4be>
 800a90a:	ab48      	add	r3, sp, #288	; 0x120
 800a90c:	441d      	add	r5, r3
 800a90e:	46aa      	mov	sl, r5
 800a910:	46a3      	mov	fp, r4
 800a912:	f1bb 0f00 	cmp.w	fp, #0
 800a916:	dc74      	bgt.n	800aa02 <__kernel_rem_pio2+0x5ca>
 800a918:	46aa      	mov	sl, r5
 800a91a:	46a3      	mov	fp, r4
 800a91c:	f1bb 0f01 	cmp.w	fp, #1
 800a920:	f300 808e 	bgt.w	800aa40 <__kernel_rem_pio2+0x608>
 800a924:	2700      	movs	r7, #0
 800a926:	463e      	mov	r6, r7
 800a928:	2c01      	cmp	r4, #1
 800a92a:	f300 80a8 	bgt.w	800aa7e <__kernel_rem_pio2+0x646>
 800a92e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800a932:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800a936:	9b00      	ldr	r3, [sp, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f040 80aa 	bne.w	800aa92 <__kernel_rem_pio2+0x65a>
 800a93e:	4603      	mov	r3, r0
 800a940:	462a      	mov	r2, r5
 800a942:	9806      	ldr	r0, [sp, #24]
 800a944:	e9c0 2300 	strd	r2, r3, [r0]
 800a948:	4622      	mov	r2, r4
 800a94a:	460b      	mov	r3, r1
 800a94c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a950:	463a      	mov	r2, r7
 800a952:	4633      	mov	r3, r6
 800a954:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a958:	e7cd      	b.n	800a8f6 <__kernel_rem_pio2+0x4be>
 800a95a:	2000      	movs	r0, #0
 800a95c:	46a0      	mov	r8, r4
 800a95e:	4601      	mov	r1, r0
 800a960:	ab48      	add	r3, sp, #288	; 0x120
 800a962:	441d      	add	r5, r3
 800a964:	f1b8 0f00 	cmp.w	r8, #0
 800a968:	da38      	bge.n	800a9dc <__kernel_rem_pio2+0x5a4>
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d03c      	beq.n	800a9ea <__kernel_rem_pio2+0x5b2>
 800a970:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800a974:	4602      	mov	r2, r0
 800a976:	462b      	mov	r3, r5
 800a978:	9d06      	ldr	r5, [sp, #24]
 800a97a:	2601      	movs	r6, #1
 800a97c:	e9c5 2300 	strd	r2, r3, [r5]
 800a980:	460b      	mov	r3, r1
 800a982:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a986:	f7f5 fbef 	bl	8000168 <__aeabi_dsub>
 800a98a:	4684      	mov	ip, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	ad48      	add	r5, sp, #288	; 0x120
 800a990:	42b4      	cmp	r4, r6
 800a992:	da2c      	bge.n	800a9ee <__kernel_rem_pio2+0x5b6>
 800a994:	9b00      	ldr	r3, [sp, #0]
 800a996:	b10b      	cbz	r3, 800a99c <__kernel_rem_pio2+0x564>
 800a998:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a99c:	4662      	mov	r2, ip
 800a99e:	463b      	mov	r3, r7
 800a9a0:	9906      	ldr	r1, [sp, #24]
 800a9a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a9a6:	e7a6      	b.n	800a8f6 <__kernel_rem_pio2+0x4be>
 800a9a8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800a9aa:	ab48      	add	r3, sp, #288	; 0x120
 800a9ac:	4637      	mov	r7, r6
 800a9ae:	441d      	add	r5, r3
 800a9b0:	2c00      	cmp	r4, #0
 800a9b2:	da09      	bge.n	800a9c8 <__kernel_rem_pio2+0x590>
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	b10b      	cbz	r3, 800a9bc <__kernel_rem_pio2+0x584>
 800a9b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a9bc:	4632      	mov	r2, r6
 800a9be:	463b      	mov	r3, r7
 800a9c0:	9906      	ldr	r1, [sp, #24]
 800a9c2:	e9c1 2300 	strd	r2, r3, [r1]
 800a9c6:	e796      	b.n	800a8f6 <__kernel_rem_pio2+0x4be>
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	f7f5 fbcc 	bl	800016c <__adddf3>
 800a9d4:	3c01      	subs	r4, #1
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	e7e9      	b.n	800a9b0 <__kernel_rem_pio2+0x578>
 800a9dc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a9e0:	f7f5 fbc4 	bl	800016c <__adddf3>
 800a9e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9e8:	e7bc      	b.n	800a964 <__kernel_rem_pio2+0x52c>
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	e7c2      	b.n	800a974 <__kernel_rem_pio2+0x53c>
 800a9ee:	4660      	mov	r0, ip
 800a9f0:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	f7f5 fbb9 	bl	800016c <__adddf3>
 800a9fa:	3601      	adds	r6, #1
 800a9fc:	4684      	mov	ip, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	e7c6      	b.n	800a990 <__kernel_rem_pio2+0x558>
 800aa02:	e9da 6700 	ldrd	r6, r7, [sl]
 800aa06:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800aa0a:	4632      	mov	r2, r6
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f5 fbab 	bl	800016c <__adddf3>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa1e:	4640      	mov	r0, r8
 800aa20:	4649      	mov	r1, r9
 800aa22:	f7f5 fba1 	bl	8000168 <__aeabi_dsub>
 800aa26:	4632      	mov	r2, r6
 800aa28:	463b      	mov	r3, r7
 800aa2a:	f7f5 fb9f 	bl	800016c <__adddf3>
 800aa2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa32:	e86a 0102 	strd	r0, r1, [sl], #-8
 800aa36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa3a:	e9ca 2300 	strd	r2, r3, [sl]
 800aa3e:	e768      	b.n	800a912 <__kernel_rem_pio2+0x4da>
 800aa40:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa44:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800aa48:	4642      	mov	r2, r8
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	f7f5 fb8c 	bl	800016c <__adddf3>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f7f5 fb82 	bl	8000168 <__aeabi_dsub>
 800aa64:	4642      	mov	r2, r8
 800aa66:	464b      	mov	r3, r9
 800aa68:	f7f5 fb80 	bl	800016c <__adddf3>
 800aa6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa70:	e86a 0102 	strd	r0, r1, [sl], #-8
 800aa74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa78:	e9ca 2300 	strd	r2, r3, [sl]
 800aa7c:	e74e      	b.n	800a91c <__kernel_rem_pio2+0x4e4>
 800aa7e:	4638      	mov	r0, r7
 800aa80:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800aa84:	4631      	mov	r1, r6
 800aa86:	f7f5 fb71 	bl	800016c <__adddf3>
 800aa8a:	3c01      	subs	r4, #1
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	460e      	mov	r6, r1
 800aa90:	e74a      	b.n	800a928 <__kernel_rem_pio2+0x4f0>
 800aa92:	9b06      	ldr	r3, [sp, #24]
 800aa94:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aa98:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800aa9c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800aaa0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800aaa4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800aaa8:	601d      	str	r5, [r3, #0]
 800aaaa:	615e      	str	r6, [r3, #20]
 800aaac:	e723      	b.n	800a8f6 <__kernel_rem_pio2+0x4be>
 800aaae:	bf00      	nop
 800aab0:	41700000 	.word	0x41700000
 800aab4:	3e700000 	.word	0x3e700000

0800aab8 <scalbn>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	4616      	mov	r6, r2
 800aabc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	460b      	mov	r3, r1
 800aac6:	b992      	cbnz	r2, 800aaee <scalbn+0x36>
 800aac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aacc:	4303      	orrs	r3, r0
 800aace:	d03c      	beq.n	800ab4a <scalbn+0x92>
 800aad0:	4b31      	ldr	r3, [pc, #196]	; (800ab98 <scalbn+0xe0>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f7f5 fd00 	bl	80004d8 <__aeabi_dmul>
 800aad8:	4b30      	ldr	r3, [pc, #192]	; (800ab9c <scalbn+0xe4>)
 800aada:	4604      	mov	r4, r0
 800aadc:	429e      	cmp	r6, r3
 800aade:	460d      	mov	r5, r1
 800aae0:	da0f      	bge.n	800ab02 <scalbn+0x4a>
 800aae2:	a329      	add	r3, pc, #164	; (adr r3, 800ab88 <scalbn+0xd0>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fcf6 	bl	80004d8 <__aeabi_dmul>
 800aaec:	e006      	b.n	800aafc <scalbn+0x44>
 800aaee:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800aaf2:	42ba      	cmp	r2, r7
 800aaf4:	d109      	bne.n	800ab0a <scalbn+0x52>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	f7f5 fb38 	bl	800016c <__adddf3>
 800aafc:	4604      	mov	r4, r0
 800aafe:	460d      	mov	r5, r1
 800ab00:	e023      	b.n	800ab4a <scalbn+0x92>
 800ab02:	460b      	mov	r3, r1
 800ab04:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab08:	3a36      	subs	r2, #54	; 0x36
 800ab0a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ab0e:	428e      	cmp	r6, r1
 800ab10:	dd0e      	ble.n	800ab30 <scalbn+0x78>
 800ab12:	a31f      	add	r3, pc, #124	; (adr r3, 800ab90 <scalbn+0xd8>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ab1c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ab20:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ab24:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ab28:	481d      	ldr	r0, [pc, #116]	; (800aba0 <scalbn+0xe8>)
 800ab2a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ab2e:	e7db      	b.n	800aae8 <scalbn+0x30>
 800ab30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ab34:	4432      	add	r2, r6
 800ab36:	428a      	cmp	r2, r1
 800ab38:	dceb      	bgt.n	800ab12 <scalbn+0x5a>
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	dd08      	ble.n	800ab50 <scalbn+0x98>
 800ab3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab46:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab54:	da0c      	bge.n	800ab70 <scalbn+0xb8>
 800ab56:	a30c      	add	r3, pc, #48	; (adr r3, 800ab88 <scalbn+0xd0>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ab60:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ab64:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ab68:	480e      	ldr	r0, [pc, #56]	; (800aba4 <scalbn+0xec>)
 800ab6a:	f041 011f 	orr.w	r1, r1, #31
 800ab6e:	e7bb      	b.n	800aae8 <scalbn+0x30>
 800ab70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab74:	3236      	adds	r2, #54	; 0x36
 800ab76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab7e:	4620      	mov	r0, r4
 800ab80:	4629      	mov	r1, r5
 800ab82:	2200      	movs	r2, #0
 800ab84:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <scalbn+0xf0>)
 800ab86:	e7af      	b.n	800aae8 <scalbn+0x30>
 800ab88:	c2f8f359 	.word	0xc2f8f359
 800ab8c:	01a56e1f 	.word	0x01a56e1f
 800ab90:	8800759c 	.word	0x8800759c
 800ab94:	7e37e43c 	.word	0x7e37e43c
 800ab98:	43500000 	.word	0x43500000
 800ab9c:	ffff3cb0 	.word	0xffff3cb0
 800aba0:	8800759c 	.word	0x8800759c
 800aba4:	c2f8f359 	.word	0xc2f8f359
 800aba8:	3c900000 	.word	0x3c900000
 800abac:	00000000 	.word	0x00000000

0800abb0 <floor>:
 800abb0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800abb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800abbc:	2e13      	cmp	r6, #19
 800abbe:	460b      	mov	r3, r1
 800abc0:	4607      	mov	r7, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	4605      	mov	r5, r0
 800abc6:	dc32      	bgt.n	800ac2e <floor+0x7e>
 800abc8:	2e00      	cmp	r6, #0
 800abca:	da14      	bge.n	800abf6 <floor+0x46>
 800abcc:	a334      	add	r3, pc, #208	; (adr r3, 800aca0 <floor+0xf0>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 facb 	bl	800016c <__adddf3>
 800abd6:	2200      	movs	r2, #0
 800abd8:	2300      	movs	r3, #0
 800abda:	f7f5 ff0d 	bl	80009f8 <__aeabi_dcmpgt>
 800abde:	b138      	cbz	r0, 800abf0 <floor+0x40>
 800abe0:	2c00      	cmp	r4, #0
 800abe2:	da56      	bge.n	800ac92 <floor+0xe2>
 800abe4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800abe8:	4325      	orrs	r5, r4
 800abea:	d055      	beq.n	800ac98 <floor+0xe8>
 800abec:	2500      	movs	r5, #0
 800abee:	4c2e      	ldr	r4, [pc, #184]	; (800aca8 <floor+0xf8>)
 800abf0:	4623      	mov	r3, r4
 800abf2:	462f      	mov	r7, r5
 800abf4:	e025      	b.n	800ac42 <floor+0x92>
 800abf6:	4a2d      	ldr	r2, [pc, #180]	; (800acac <floor+0xfc>)
 800abf8:	fa42 f806 	asr.w	r8, r2, r6
 800abfc:	ea01 0208 	and.w	r2, r1, r8
 800ac00:	4302      	orrs	r2, r0
 800ac02:	d01e      	beq.n	800ac42 <floor+0x92>
 800ac04:	a326      	add	r3, pc, #152	; (adr r3, 800aca0 <floor+0xf0>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	f7f5 faaf 	bl	800016c <__adddf3>
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2300      	movs	r3, #0
 800ac12:	f7f5 fef1 	bl	80009f8 <__aeabi_dcmpgt>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0ea      	beq.n	800abf0 <floor+0x40>
 800ac1a:	2c00      	cmp	r4, #0
 800ac1c:	bfbe      	ittt	lt
 800ac1e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ac22:	4133      	asrlt	r3, r6
 800ac24:	18e4      	addlt	r4, r4, r3
 800ac26:	2500      	movs	r5, #0
 800ac28:	ea24 0408 	bic.w	r4, r4, r8
 800ac2c:	e7e0      	b.n	800abf0 <floor+0x40>
 800ac2e:	2e33      	cmp	r6, #51	; 0x33
 800ac30:	dd0b      	ble.n	800ac4a <floor+0x9a>
 800ac32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ac36:	d104      	bne.n	800ac42 <floor+0x92>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	f7f5 fa97 	bl	800016c <__adddf3>
 800ac3e:	4607      	mov	r7, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4638      	mov	r0, r7
 800ac44:	4619      	mov	r1, r3
 800ac46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac4a:	f04f 38ff 	mov.w	r8, #4294967295
 800ac4e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ac52:	fa28 f802 	lsr.w	r8, r8, r2
 800ac56:	ea10 0f08 	tst.w	r0, r8
 800ac5a:	d0f2      	beq.n	800ac42 <floor+0x92>
 800ac5c:	a310      	add	r3, pc, #64	; (adr r3, 800aca0 <floor+0xf0>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f7f5 fa83 	bl	800016c <__adddf3>
 800ac66:	2200      	movs	r2, #0
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f7f5 fec5 	bl	80009f8 <__aeabi_dcmpgt>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0be      	beq.n	800abf0 <floor+0x40>
 800ac72:	2c00      	cmp	r4, #0
 800ac74:	da0a      	bge.n	800ac8c <floor+0xdc>
 800ac76:	2e14      	cmp	r6, #20
 800ac78:	d101      	bne.n	800ac7e <floor+0xce>
 800ac7a:	3401      	adds	r4, #1
 800ac7c:	e006      	b.n	800ac8c <floor+0xdc>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ac84:	40b3      	lsls	r3, r6
 800ac86:	441d      	add	r5, r3
 800ac88:	42af      	cmp	r7, r5
 800ac8a:	d8f6      	bhi.n	800ac7a <floor+0xca>
 800ac8c:	ea25 0508 	bic.w	r5, r5, r8
 800ac90:	e7ae      	b.n	800abf0 <floor+0x40>
 800ac92:	2500      	movs	r5, #0
 800ac94:	462c      	mov	r4, r5
 800ac96:	e7ab      	b.n	800abf0 <floor+0x40>
 800ac98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ac9c:	e7a8      	b.n	800abf0 <floor+0x40>
 800ac9e:	bf00      	nop
 800aca0:	8800759c 	.word	0x8800759c
 800aca4:	7e37e43c 	.word	0x7e37e43c
 800aca8:	bff00000 	.word	0xbff00000
 800acac:	000fffff 	.word	0x000fffff

0800acb0 <_init>:
 800acb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb2:	bf00      	nop
 800acb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb6:	bc08      	pop	{r3}
 800acb8:	469e      	mov	lr, r3
 800acba:	4770      	bx	lr

0800acbc <_fini>:
 800acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acbe:	bf00      	nop
 800acc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc2:	bc08      	pop	{r3}
 800acc4:	469e      	mov	lr, r3
 800acc6:	4770      	bx	lr
